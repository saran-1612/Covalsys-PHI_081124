package com.cbs.snb.ui.product_list;

import android.content.Context;
import android.content.Intent;
import android.os.Bundle;

import androidx.appcompat.widget.SearchView;
import androidx.lifecycle.ViewModelProvider;
import androidx.recyclerview.widget.DefaultItemAnimator;
import androidx.recyclerview.widget.LinearLayoutManager;

import com.cbs.snb.BR;
import com.cbs.snb.R;
import com.cbs.snb.data.network.models.get.ProductsListModel;
import com.cbs.snb.databinding.ActivityProductsBinding;
import com.cbs.snb.databinding.ActivityProductsListBinding;
import com.cbs.snb.ui.ViewModelProviderFactory;
import com.cbs.snb.ui.base.BaseActivity;

import java.util.List;

import javax.inject.Inject;

/**
 * Created by Venkatesh on 09-07-2020.
 */
public class ProductsListActivity extends BaseActivity<ProductsListViewModel, ActivityProductsListBinding> implements ProductsListNavigator, ProductsListAdapter.Callback  {

    @Inject
    ViewModelProviderFactory factory;

    private ProductsListViewModel productsListViewModel;

    @Inject
    ProductsListAdapter mAdapter;

    @Override
    public int getBindingVariable() {
        return BR.productsListViewModel;
    }

    @Override
    public int getLayoutRes() {
        return R.layout.activity_products_list;
    }

    @Override
    protected ProductsListViewModel getViewModel() {
        productsListViewModel = new ViewModelProvider(this, factory).get(ProductsListViewModel.class);
        return productsListViewModel;
    }

    private String cardCode,cardName;

    public static Intent newIntent(Context context) {
        Intent intent = new Intent(context, ProductsListActivity.class);
        return intent;
    }

    public static Intent getStartIntent(Context context, Bundle bundle) {
        Intent intent = new Intent(context, ProductsListActivity.class);
        intent.putExtras(bundle);
        return intent;
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        productsListViewModel.setNavigator(this);
        mAdapter.setOnClick(this);
        setUp();
    }


    private void setUp() {
        setSupportActionBar(dataBinding.toolbar);
        if (getSupportActionBar() != null) {
            getSupportActionBar().setTitle("Products");
            getSupportActionBar().setDisplayHomeAsUpEnabled(true);
            getSupportActionBar().setDisplayShowHomeEnabled(true);
        }

        dataBinding.toolbar.setNavigationIcon(R.drawable.ic_arrow_back_black_24dp);
        dataBinding.toolbar.setNavigationOnClickListener(v -> onBackPressed());

        LinearLayoutManager linearLayoutManager = new LinearLayoutManager(this);
        linearLayoutManager.setOrientation(LinearLayoutManager.VERTICAL);
        dataBinding.productsListRecyclerView.setLayoutManager(linearLayoutManager);
        dataBinding.productsListRecyclerView.setItemAnimator(new DefaultItemAnimator());
        dataBinding.productsListRecyclerView.setAdapter(mAdapter);

        Bundle bundle = getIntent().getExtras();
        if (bundle != null) {
            cardCode = bundle.getString("cardCode");
            cardName = bundle.getString("cardName");
        }

        if (isNetworkConnected()) {
            productsListViewModel.isLoading().observe(this, aBoolean -> {
                if (aBoolean) {
                    showLoading();
                } else {
                    hideLoading();
                }
            });

            productsListViewModel.getProductsResponse().observe(this, productsModelResource -> {
                switch (productsModelResource.status) {
                    case LOADING:
                        showLoading();
                        break;
                    case SUCCESS:
                        hideLoading();
                        setProducts(productsModelResource.data.getResponseObject());
                        break;
                    case ERROR:
                        hideLoading();
                        showSnackBar(productsModelResource.getMessage(), getResources().getColor(R.color.red));
                        break;
                    default:
                        break;
                }
            });
        } else {
            showSnackBar(getResources().getString(R.string.no_internet), getResources().getColor(R.color.black_effective));
        }

        dataBinding.searchProductsList.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
            @Override
            public boolean onQueryTextSubmit(String query) {
                return false;
            }

            @Override
            public boolean onQueryTextChange(String newText) {
                //mAdapter.getFilter().filter(newText);
                return true;
            }
        });
    }

    private void setProducts(List<ProductsListModel.ResponseObject> products) {
        if(mAdapter != null)
        mAdapter.clearList();
        mAdapter.addProducts(products);
        mAdapter.notifyDataSetChanged();
    }

    @Override
    public void onProductClick(int position, ProductsListModel.ResponseObject models) {

    }
}
