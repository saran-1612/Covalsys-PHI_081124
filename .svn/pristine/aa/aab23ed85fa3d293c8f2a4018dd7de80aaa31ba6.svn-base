package com.cbs.snb.ui.reports.salesanalysis;

import androidx.lifecycle.ViewModelProvider;
import androidx.recyclerview.widget.DefaultItemAnimator;
import androidx.recyclerview.widget.LinearLayoutManager;

import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.AdapterView;

import com.cbs.snb.BR;
import com.cbs.snb.R;
import com.cbs.snb.data.network.models.get.DealerNameModel;
import com.cbs.snb.data.network.models.get.SalesAnalysisReportModel;
import com.cbs.snb.databinding.ActivitySalesAnalysisBinding;
import com.cbs.snb.ui.ViewModelProviderFactory;
import com.cbs.snb.ui.base.BaseActivity;
import com.cbs.snb.ui.complaints.adapter.DealerNameAdapter;

import java.util.List;

import javax.inject.Inject;

public class SalesAnalysisActivity extends BaseActivity<SalesAnalysisViewModel, ActivitySalesAnalysisBinding> implements SalesAnalysisNavigator {

    @Inject
    ViewModelProviderFactory factory;

    SalesAnalysisViewModel mViewModel;

    private String dealerCode,dealerName;
    SalesAnalysisAdapter mAdapter;

    public static Intent newIntent(Context context) {
        Intent intent = new Intent(context, SalesAnalysisActivity.class);
        return intent;
    }

    public static Intent getStartIntent(Context context, Bundle bundle) {
        Intent intent = new Intent(context, SalesAnalysisActivity.class);
        intent.putExtras(bundle);
        return intent;
    }

    @Override
    public int getBindingVariable() {
        return BR.salesAnalysisViewModel;
    }

    @Override
    protected int getLayoutRes() {
        return R.layout.activity_sales_analysis;
    }

    @Override
    protected SalesAnalysisViewModel getViewModel() {
        mViewModel = new ViewModelProvider(this, factory).get(SalesAnalysisViewModel.class);
        return mViewModel;
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        mViewModel.setNavigator(this);
        setUp();
    }

    public void setUp() {
        setSupportActionBar(dataBinding.toolbar);
        if (getSupportActionBar() != null) {
            getSupportActionBar().setTitle("Sales Analysis");
            getSupportActionBar().setDisplayHomeAsUpEnabled(true);
            getSupportActionBar().setDisplayShowHomeEnabled(true);
        }

        dataBinding.toolbar.setNavigationIcon(R.drawable.ic_arrow_back_black_24dp);
        dataBinding.toolbar.setNavigationOnClickListener(v -> onBackPressed());

        dataBinding.etFromDate.setOnClickListener(v -> mViewModel.fromDate(this));

        dataBinding.etToDate.setOnClickListener(v -> mViewModel.toDate(this));

        if (isNetworkConnected()){

            isLoading();

            getDealers();

        }else{
            showSnackBar(this.getResources().getString(R.string.no_internet),getResources().getColor(R.color.black_effective));
        }

    }

    private void isLoading(){
        mViewModel.isLoading().observe(this,aBoolean -> {
            if (aBoolean){
                showLoading();
            }else{
                hideLoading();
            }
        });
    }

    private void getDealers() {
        mViewModel.getDealers().observe(this, dealerNameModelResource -> {
            switch (dealerNameModelResource.status) {
                case LOADING:
                    showLoading();
                    break;
                case SUCCESS:
                    hideLoading();
                    setDealers(dealerNameModelResource.data.getResponseObject());
                    break;
                case ERROR:
                    hideLoading();
                    showSnackBar(dealerNameModelResource.getMessage(), getResources().getColor(R.color.red));
                    mAdapter.notifyDataSetChanged();
                    break;
                default:
                    break;
            }
        });
    }

    private void setDealers(List<DealerNameModel.ResponseObject> responseObjects) {
        dataBinding.spDealerName.setTitle("Dealers");
        DealerNameAdapter adapter = new DealerNameAdapter(this, responseObjects);
        dataBinding.spDealerName.setAdapter(adapter);

        dataBinding.spDealerName.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                dealerCode = responseObjects.get(position).getCardCode();
                dealerName = responseObjects.get(position).getCardName();
                getReport();
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {

            }
        });
    }


    private void getReport(){
        mViewModel.getSalesAnalysisReport(dealerCode,dataBinding.etFromDate.getText().toString(),
                dataBinding.etToDate.getText().toString()).observe(this,salesAnalysisReportModelResource -> {
            switch (salesAnalysisReportModelResource.status){
                case LOADING:
                    showLoading();
                    break;
                case SUCCESS:
                    hideLoading();
                    setReport(salesAnalysisReportModelResource.data.getResponseObject());
                    break;
                case ERROR:
                    hideLoading();
                    showSnackBar(salesAnalysisReportModelResource.getMessage(),getResources().getColor(R.color.red));
                    break;
                default:
                    break;
            }
        });
    }


    private void setReport(List<SalesAnalysisReportModel.ResponseObject> salesReport){
        dataBinding.salesAnalysisRecyclerView.setLayoutManager(new LinearLayoutManager(this));
        dataBinding.salesAnalysisRecyclerView.setItemAnimator(new DefaultItemAnimator());
        mAdapter = new SalesAnalysisAdapter(salesReport,this);
        dataBinding.salesAnalysisRecyclerView.setAdapter(mAdapter);
    }

    @Override
    public void fromDate(String fromDate) {
        dataBinding.etFromDate.setText(fromDate);
    }

    @Override
    public void toDate(String toDate) {
        dataBinding.etToDate.setText(toDate);
        getReport();
    }
}