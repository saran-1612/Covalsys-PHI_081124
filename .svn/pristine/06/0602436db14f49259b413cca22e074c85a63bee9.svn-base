package com.cbs.snb.ui.leads;

import android.Manifest;
import android.annotation.TargetApi;
import android.content.Intent;
import android.graphics.Bitmap;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.annotation.RequiresApi;
import androidx.core.app.ActivityCompat;
import androidx.fragment.app.FragmentManager;
import androidx.fragment.app.FragmentTransaction;

import android.os.Handler;
import android.os.Looper;
import android.provider.MediaStore;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.LinearLayout;

import com.bumptech.glide.Glide;
import com.cbs.snb.BR;
import com.cbs.snb.R;
import com.cbs.snb.data.network.models.get.GstTypeModel;
import com.cbs.snb.data.network.models.get.PaymentTermsModel;
import com.cbs.snb.data.network.models.get.StateModel;
import com.cbs.snb.ui.activity.CreateActivityFragment;
import com.cbs.snb.ui.home.HomeFragment;
import com.cbs.snb.service.LocationService;
import com.cbs.snb.data.network.models.get.CustomerGroupModel;
import com.cbs.snb.data.network.models.post.LeadCreationModel;
import com.cbs.snb.databinding.FragmentLeadBinding;
import com.cbs.snb.ui.base.BaseFragment;
import com.cbs.snb.ui.customerhistory.addcustomer.CustomerGroupAdapter;
import com.cbs.snb.ui.customerhistory.addcustomer.PaymentTermsAdapter;
import com.cbs.snb.utils.CommonUtils;
import com.cbs.snb.utils.DateUtils;
import com.cbs.snb.utils.ImageInputHelper;
import com.cbs.snb.utils.PhotoFullPopupWindow;
import com.cbs.snb.utils.RealPathUtils;
import com.cbs.snb.utils.getAddressByLatLng;
import com.google.android.material.bottomsheet.BottomSheetDialog;
import com.karumi.dexter.Dexter;
import com.karumi.dexter.MultiplePermissionsReport;
import com.karumi.dexter.PermissionToken;
import com.karumi.dexter.listener.PermissionRequest;
import com.karumi.dexter.listener.multi.MultiplePermissionsListener;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.inject.Inject;

import okhttp3.MultipartBody;
import okhttp3.RequestBody;

import static android.Manifest.permission.CAMERA;
import static android.Manifest.permission.READ_EXTERNAL_STORAGE;
import static android.Manifest.permission.WRITE_EXTERNAL_STORAGE;
import static com.cbs.snb.utils.Constants.PERMISSION_LOCATION_REQUEST_CODE;

/**
 * create an instance of this fragment.
 */
public class LeadFragment extends BaseFragment<LeadsViewModel, FragmentLeadBinding>
        implements LeadsNavigator, ImageInputHelper.ImageActionListener {

    private ImageInputHelper mImageInputHelper;

    @Inject
    LocationService locationService;

    @Override
    public int getBindingVariable() {
        return BR.leadsViewModel;
    }

    @Override
    public int getLayoutRes() {
        return R.layout.fragment_lead;
    }

    @Override
    protected Class<LeadsViewModel> getViewModel() {
        return LeadsViewModel.class;
    }

    private String groupName,paymentGroupName,selectedType,customerCode,customerName,stateCode,stateName;
    private int groupCode,paymentGroupCode;
    private String gstCode="", gstName="";
    private List<LeadCreationModel.Addres> address;
    private static LeadFragment instance = null;
    private List<LeadCreationModel> leadCreationModel;
    private String path;

    private String stCardType = "L";

    public static LeadFragment newInstance() {
        Bundle args = new Bundle();
        LeadFragment fragment = new LeadFragment();
        fragment.setArguments(args);
        return fragment;
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        instance = this;
    }

    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, Bundle savedInstanceState) {
        super.onCreateView(inflater, container, savedInstanceState);
        setHasOptionsMenu(true);
        viewModel.setNavigator(this);
        setUp();
        return dataBinding.getRoot();
    }

    public void setUp() {

        mImageInputHelper = new ImageInputHelper(instance);
        mImageInputHelper.setImageActionListener(this);
        address = new ArrayList<>();
        leadCreationModel = new ArrayList<>();

        int con = 0;
        Bundle bundle = this.getArguments();
        if (bundle != null) {
            con = bundle.getInt("code", 0);
        }

        if(con == 1){
            stCardType = "C";
        }

        showPermissionDialog();

        dataBinding.etLocation.setOnClickListener(v -> subscribeToLocationUpdate());

        subscribeToLocationUpdate();

        isLoading();

        getCustomerCode();

        getPaymentTerms();

        getGstType();

        getState();

        dataBinding.addImage.setOnClickListener(v -> pickImage());

        Log.e("deviceId",CommonUtils.getDeviceId(getActivity()));

        dataBinding.submit.setOnClickListener(v -> {
            hideKeyboard();
             if (dataBinding.etDealerName.getText().toString().isEmpty()){
                 showSnackBar("Please enter dealer name",getResources().getColor(R.color.red));
             }/*else if (dataBinding.etOwnerName.getText().toString().isEmpty()){
                 showSnackBar("Please enter owner name",getResources().getColor(R.color.red));
             }else if (dataBinding.etMobileNo.getText().toString().isEmpty()){
                 showSnackBar("Please enter shop mobile number",getResources().getColor(R.color.red));
             }*/ else if (dataBinding.etMobileNo.getText().toString().length() < 10) {
                 showSnackBar("Mobile number should be 10 digits",getResources().getColor(R.color.red));
             } else if (!gstCode.equals("")){
                 if (dataBinding.etGstInNo.getText().toString().length() < 15) {
                     showSnackBar("GST Number should be 15 digits",getResources().getColor(R.color.red));
                 } else {
                     hideKeyboard();
                     addLead();
                 }
             } else if (dataBinding.etGstInNo.getText().toString().length() != 0){
                 if (gstCode.equals("")) {
                     showSnackBar(" Select GST Type",getResources().getColor(R.color.red));
                 } else if (dataBinding.etGstInNo.getText().toString().length() < 15) {
                     showSnackBar("GST Number should be 15 digits",getResources().getColor(R.color.red));
                 } else {
                     hideKeyboard();
                     addLead();
                 }
             }  else if (dataBinding.etPanNo.getText().toString().length() != 0){
                if (dataBinding.etPanNo.getText().toString().length() < 10) {
                     showSnackBar("PAN Number should be 10 digits",getResources().getColor(R.color.red));
                 } else {
                     hideKeyboard();
                     addLead();
                 }
             }


             /*else if (dataBinding.etEmailId.getText().toString().isEmpty()){
                showSnackBar("Please enter email id",getResources().getColor(R.color.red));
            }else if (!CommonUtils.emailValidator(dataBinding.etEmailId.getText().toString())){
                 showSnackBar("Please enter valid email id",getResources().getColor(R.color.red));
             }else if (dataBinding.etCreditLimit.getText().toString().isEmpty()){
                 showSnackBar("Please enter credit limit",getResources().getColor(R.color.red));
             }else if (dataBinding.etMobileNo.getText().toString().isEmpty()){
                 showSnackBar("Please enter mobile number",getResources().getColor(R.color.red));
             }else if (dataBinding.etEmailId.getText().toString().isEmpty()){
                 showSnackBar("Please enter email id",getResources().getColor(R.color.red));
             }else if (dataBinding.etBlock.getText().toString().isEmpty()){
                 showSnackBar("Please enter block",getResources().getColor(R.color.red));
             }else if (dataBinding.etStreet.getText().toString().isEmpty()){
                 showSnackBar("Please enter street name",getResources().getColor(R.color.red));
             }else if (dataBinding.etAddress1.getText().toString().isEmpty()){
                 showSnackBar("Please enter address 1",getResources().getColor(R.color.red));
             }else if (dataBinding.etAddress2.getText().toString().isEmpty()){
                 showSnackBar("Please enter address 2",getResources().getColor(R.color.red));
             }else if (dataBinding.etState.getText().toString().isEmpty()){
                 showSnackBar("Please enter state",getResources().getColor(R.color.red));
             }else if (dataBinding.etCountry.getText().toString().isEmpty()){
                 showSnackBar("Please enter country",getResources().getColor(R.color.red));
             }else if (dataBinding.etPinCode.getText().toString().isEmpty()){
                 showSnackBar("Please enter pincode",getResources().getColor(R.color.red));
             }else if (dataBinding.etGstInNo.getText().toString().isEmpty()){
                 showSnackBar("Please enter GSTN number",getResources().getColor(R.color.red));
             }else if (dataBinding.etAdharNo.getText().toString().isEmpty()){
                 showSnackBar("Please enter adhar number",getResources().getColor(R.color.red));
             }else if (dataBinding.etPanNo.getText().toString().isEmpty()){
                 showSnackBar("Please enter PAN number",getResources().getColor(R.color.red));
             }else if (dataBinding.etRemarks.getText().toString().isEmpty()){
                 showSnackBar("Please enter remarks",getResources().getColor(R.color.red));
             }*/
             else {
                 hideKeyboard();
                 addLead();
             }

        });
    }

    public void isLoading(){
      viewModel.isLoading().observe(getViewLifecycleOwner(),aBoolean -> {
          if (aBoolean){
              showLoading();
          }else {
              hideLoading();
          }
      });
    }

    private void getCustomerCode(){
        viewModel.getCustomerCode().observe(getViewLifecycleOwner(),customerGroupModelResource -> {
            switch (customerGroupModelResource.status){
                case LOADING:
                    showLoading();
                    break;
                case SUCCESS:
                    hideLoading();
                    setCustomerCode(customerGroupModelResource.data.getResponseObject());
                    break;
                case ERROR:
                    hideLoading();
                    showSnackBar(customerGroupModelResource.getMessage(),getResources().getColor(R.color.red));
                    break;
                default:
                    break;
            }
        });
    }

    private void getPaymentTerms(){
        viewModel.getPaymentTerms().observe(getViewLifecycleOwner(),paymentTermsModelResource -> {
            switch (paymentTermsModelResource.status){
                case LOADING:
                    showLoading();
                    break;
                case SUCCESS:
                    hideLoading();
                    setPaymentTerms(paymentTermsModelResource.data.getResponseObject());
                    break;
                case ERROR:
                    hideLoading();
                    showSnackBar(paymentTermsModelResource.getMessage(),getResources().getColor(R.color.red));
                    break;
                default:
                    break;
            }
        });

    }

    private void getGstType(){
        viewModel.getGstType().observe(getViewLifecycleOwner(),gstTypeModelResource -> {
            switch (gstTypeModelResource.status){
                case LOADING:
                    showLoading();
                    break;
                case SUCCESS:
                    hideLoading();
                    setGstType(gstTypeModelResource.data.getResponseObject());
                    break;
                case ERROR:
                    hideLoading();
                    showSnackBar(gstTypeModelResource.getMessage(),getResources().getColor(R.color.red));
                    break;
                default:
                    break;
            }
        });
    }

    private void getState(){
        viewModel.getState().observe(getViewLifecycleOwner(),stateModelResource -> {
            switch (stateModelResource.status){
                case LOADING:
                    showLoading();
                    break;
                case SUCCESS:
                    hideLoading();
                    setState(stateModelResource.data.getResponseObject());
                    break;
                case ERROR:
                    hideLoading();
                    showSnackBar(stateModelResource.getMessage(),getResources().getColor(R.color.red));
                    break;
                default:
                    break;
            }
        });
    }

   /* private void setData(List<CustomerDetailsModel.ResponseObject> responseObjects) {
        dataBinding.dealerSp.setTitle("Customers");
        DealersAdapter adapter = new DealersAdapter(getActivity(), responseObjects);
        dataBinding.dealerSp.setAdapter(adapter);

        dataBinding.dealerSp.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                customerCode = responseObjects.get(position).getCardCode();
                customerName = responseObjects.get(position).getCardName();
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {

            }
        });
    }*/

    private void addLead(){
        hideKeyboard();
        String empCode = viewModel.empCode();
        //Log.e("ddd",empCode);
        address.add(new LeadCreationModel.Addres(dataBinding.etAddress1.getText().toString(),
                dataBinding.etAddress2.getText().toString(),1,
                "","",dataBinding.etBlock.getText().toString(),"","IN",stateCode,
                dataBinding.etStreet.getText().toString(),dataBinding.etPinCode.getText().toString()));

        LeadCreationModel  leadCreationModel = new LeadCreationModel(dataBinding.etAdharNo.getText().toString(),address,"",
                dataBinding.etCreditLimit.getText().toString(), dataBinding.etDealerName.getText().toString(),
                String.valueOf(groupCode),dataBinding.etDealerName.getText().toString(), DateUtils.currentDateYYYY(),
                dataBinding.etEmailId.getText().toString(), dataBinding.etGstInNo.getText().toString(),gstCode,
                locationService.getLatitude()+","+ locationService.getLongitude(), dataBinding.etMobileNo.getText().toString(),
                dataBinding.etOwnerName.getText().toString(), dataBinding.etPanNo.getText().toString(), String.valueOf(paymentGroupCode),
                dataBinding.etRemarks.getText().toString(), empCode,stCardType);

        MultipartBody.Part mImageFile = null;

        if (path != null) {
            File file = new File(path);
            RequestBody requestBody = RequestBody.create(okhttp3.MediaType.parse("multipart/form-data"), file);
            mImageFile = MultipartBody.Part.createFormData("image", file.getName(), requestBody);
        }

        viewModel.addLead(leadCreationModel,mImageFile).observe(getViewLifecycleOwner(),basePostResponseResource -> {
            switch (basePostResponseResource.status){
                case LOADING:
                    showLoading();
                    break;
                case SUCCESS:
                    hideLoading();
                    showSnackBar("Success",getResources().getColor(R.color.green));

                    if(stCardType.equals("C")) {
                        refreshCustomer();
                    }else{
                        refresh();
                    }

                    break;
                case ERROR:
                    hideLoading();
                    showSnackBar(basePostResponseResource.getMessage(),getResources().getColor(R.color.red));
                    break;
                default:
                    break;
            }
        });
    }

    private void showPermissionDialog() {
        if (!LocationService.checkPermission(getActivity())) {
            ActivityCompat.requestPermissions(getActivity(),
                    new String[]{Manifest.permission.ACCESS_COARSE_LOCATION, Manifest.permission.ACCESS_FINE_LOCATION},
                    PERMISSION_LOCATION_REQUEST_CODE);
        }
    }

    private void setCustomerCode(List<CustomerGroupModel.ResponseObject> customerCodeList){
        dataBinding.spGroup.setTitle("Customer Group");
        CustomerGroupAdapter adapter = new CustomerGroupAdapter(getActivity(), customerCodeList);
        dataBinding.spGroup.setAdapter(adapter);

        dataBinding.spGroup.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                groupCode = customerCodeList.get(position).getGroupCode();
                groupName = customerCodeList.get(position).getGroupName();
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {

            }
        });
    }

    private void setPaymentTerms(List<PaymentTermsModel.ResponseObject> paymentTerms){
        dataBinding.spPayTerms.setTitle("Payment Group");
        PaymentTermsAdapter adapter = new PaymentTermsAdapter(getActivity(), paymentTerms);
        dataBinding.spPayTerms.setAdapter(adapter);

        dataBinding.spPayTerms.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                paymentGroupCode = paymentTerms.get(position).getGroupNum();
                paymentGroupName = paymentTerms.get(position).getPymntGroup();
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {

            }
        });
    }

    private void setGstType(List<GstTypeModel.ResponseObject> gstType){

        List<GstTypeModel.ResponseObject> gstType1 = new ArrayList<>();
        gstType1.add(new GstTypeModel.ResponseObject("","Select GST Type"));
        gstType1.addAll(gstType);

        dataBinding.spGstType.setTitle("GST Type");
        GstTypeAdapter adapter = new GstTypeAdapter(getActivity(), gstType1);
        dataBinding.spGstType.setAdapter(adapter);

        dataBinding.spGstType.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                gstCode = gstType1.get(position).getCode();
                gstName = gstType1.get(position).getName();
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {

            }
        });
    }

    private void setState(List<StateModel.ResponseObject> state){
        dataBinding.spState.setTitle("State");
        StateAdapter adapter = new StateAdapter(getActivity(), state);
        dataBinding.spState.setAdapter(adapter);

        dataBinding.spState.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                stateCode = state.get(position).getCode();
                stateName = state.get(position).getName();
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {

            }
        });

    }

    private void subscribeToLocationUpdate() {
        String address = getAddressByLatLng.getAddress(locationService.getLatitude(), locationService.getLongitude(), getActivity());
        dataBinding.etLocation.setText(address);
    }

    public void pickImage() {
        BottomSheetDialog mBottomSheetDialog = new BottomSheetDialog(getActivity());
        View sheetView = getActivity().getLayoutInflater().inflate(R.layout.layout_take_images, null);
        mBottomSheetDialog.setContentView(sheetView);
        mBottomSheetDialog.show();

        LinearLayout camera = sheetView.findViewById(R.id.take_photo);
        LinearLayout gallery = sheetView.findViewById(R.id.pick_gallery);

        camera.setOnClickListener(v -> {
            if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
                mImageInputHelper.takePhotoWithCamera();
            } else {
                initCameraPermission();
            }
            mBottomSheetDialog.dismiss();
        });

        gallery.setOnClickListener(v -> {
            if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
                mImageInputHelper.selectImageFromGallery();
            } else {
                initGalleryPermission();
            }
            mBottomSheetDialog.dismiss();
        });

    }

    @TargetApi(Build.VERSION_CODES.M)
    private void initCameraPermission() {
        Dexter.withActivity(getActivity())
                .withPermissions(CAMERA,WRITE_EXTERNAL_STORAGE)
                .withListener(new MultiplePermissionsListener() {
                    @Override
                    public void onPermissionsChecked(MultiplePermissionsReport report) {
                        if (report.areAllPermissionsGranted()) {
                            mImageInputHelper.takePhotoWithCamera();
                        }
                    }

                    @Override
                    public void onPermissionRationaleShouldBeShown(List<PermissionRequest> permissions, PermissionToken token) {
                        token.continuePermissionRequest();
                    }
                }).check();
    }

    @TargetApi(Build.VERSION_CODES.M)
    private void initGalleryPermission() {
        Dexter.withActivity(getActivity())
                .withPermissions(WRITE_EXTERNAL_STORAGE,
                        READ_EXTERNAL_STORAGE)
                .withListener(new MultiplePermissionsListener() {
                    @Override
                    public void onPermissionsChecked(MultiplePermissionsReport report) {
                        if (report.areAllPermissionsGranted()) {
                            mImageInputHelper.selectImageFromGallery();
                        }
                    }

                    @Override
                    public void onPermissionRationaleShouldBeShown(List<PermissionRequest> permissions, PermissionToken token) {
                        token.continuePermissionRequest();
                    }
                }).check();

    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        mImageInputHelper.onActivityResult(requestCode, resultCode, data);
    }

    @Override
    public void onImageSelectedFromGallery(Uri uri, File imageFile) {
        displayImage(uri);
//        // cropping the selected image. crop intent will have aspect ratio 16/9 and result image
//        // will have size 800x450
       // mImageInputHelper.requestCropImage(uri, 800, 450, 16, 9);
    }

    @Override
    public void onImageTakenFromCamera(Uri uri, File imageFile) {
        displayImage(uri);
       // mImageInputHelper.requestCropImage(uri, 800, 450, 16, 9);

    }

    @Override
    public void onImageCropped(Uri uri, File imageFile) {
        displayImage(uri);
    }

    @RequiresApi(api = Build.VERSION_CODES.KITKAT)
    public void displayImage(Uri uri) {
        Bitmap bitmap = null;
        try {
            bitmap = MediaStore.Images.Media.getBitmap(requireActivity().getContentResolver(), uri);
            path = RealPathUtils.getRealPathFromURI(getActivity(), bitmap);
            dataBinding.imageView.setClipToOutline(true);
            Glide.with(getActivity())
                    .load(path)
                    .into(dataBinding.imageView);
            if (!path.equalsIgnoreCase("")) {
                dataBinding.imageView.setOnClickListener(v -> {
                    // Code to show image in full screen:
                    new PhotoFullPopupWindow(getActivity(), R.layout.popup_photo_full, v, path, null);
                });
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void refresh(){

        final Handler handler = new Handler(Looper.getMainLooper());
        handler.postDelayed(() ->   {
            HomeFragment fragment = new HomeFragment();
            FragmentManager fragmentManager = getFragmentManager();
            FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();
            fragmentTransaction.replace(R.id.nav_host_fragment, fragment);
            fragmentTransaction.addToBackStack("Home");
            fragmentTransaction.commit();
            getActivity().overridePendingTransition(R.anim.slide_out_to_left, R.anim.slide_out_to_right);
        }, 2000);

    }

    private void refreshCustomer(){

        final Handler handler = new Handler(Looper.getMainLooper());
        handler.postDelayed(() ->   {
            CreateActivityFragment fragment = new CreateActivityFragment();
            FragmentManager fragmentManager = getFragmentManager();
            FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();
            fragmentTransaction.replace(R.id.nav_host_fragment, fragment);
            fragmentTransaction.addToBackStack("Activity");
            fragmentTransaction.commit();
            getActivity().overridePendingTransition(R.anim.slide_out_to_left, R.anim.slide_out_to_right);
        }, 2000);

    }

    @Override
    public void onPrepareOptionsMenu(@NonNull Menu menu) {
        MenuItem item = menu.findItem(R.id.action_cart);

        if (item != null)
            item.setVisible(false);

    }

    @Override
    public void onPause() {
        super.onPause();

    }


    @Override
    public void onResume() {
        super.onResume();

    }

    @Override
    public void onStart() {
        super.onStart();

    }

    @Override
    public void onDetach() {
        super.onDetach();

    }

    @Override
    public void onDestroy() {
        super.onDestroy();

    }

    @Override
    public void onDestroyView() {
        super.onDestroyView();

    }
}