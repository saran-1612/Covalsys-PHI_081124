package com.cbs.snb.ui.expense;

import android.annotation.TargetApi;
import android.app.AlertDialog;
import android.app.Dialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.graphics.Bitmap;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.annotation.RequiresApi;
import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentManager;
import androidx.fragment.app.FragmentTransaction;

import android.os.Handler;
import android.os.Looper;
import android.provider.MediaStore;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.LinearLayout;
import android.widget.Toast;

import com.bumptech.glide.Glide;
import com.cbs.snb.BR;
import com.cbs.snb.R;
import com.cbs.snb.data.network.models.get.CustomerDetailsModel;
import com.cbs.snb.data.network.models.get.ExpenseTypesModel;
import com.cbs.snb.data.network.models.post.PostExpense;
import com.cbs.snb.databinding.FragmentExpenseBinding;
import com.cbs.snb.ui.activity.DealersAdapter;
import com.cbs.snb.ui.base.BaseFragment;
import com.cbs.snb.ui.home.HomeFragment;
import com.cbs.snb.utils.DateUtils;
import com.cbs.snb.utils.ImageInputHelper;
import com.cbs.snb.utils.PhotoFullPopupWindow;
import com.cbs.snb.utils.RealPathUtils;
import com.google.android.material.bottomsheet.BottomSheetDialog;
import com.karumi.dexter.Dexter;
import com.karumi.dexter.MultiplePermissionsReport;
import com.karumi.dexter.PermissionToken;
import com.karumi.dexter.listener.PermissionRequest;
import com.karumi.dexter.listener.multi.MultiplePermissionsListener;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import okhttp3.MultipartBody;
import okhttp3.RequestBody;

import static android.Manifest.permission.CAMERA;
import static android.Manifest.permission.READ_EXTERNAL_STORAGE;
import static android.Manifest.permission.WRITE_EXTERNAL_STORAGE;

/**
 * A simple {@link Fragment} subclass.
 * Use the {@link ExpenseFragment#newInstance} factory method to
 * create an instance of this fragment.
 */
public class ExpenseFragment extends BaseFragment<ExpenseViewModel, FragmentExpenseBinding>
        implements ExpenseNavigator, ImageInputHelper.ImageActionListener {

    public static ExpenseFragment newInstance() {
        ExpenseFragment fragment = new ExpenseFragment();
        Bundle args = new Bundle();
        fragment.setArguments(args);
        return fragment;
    }

    boolean isFromImage1 = false;
    boolean isFromImage2 = false;
    boolean isFromImage3 = false;
    boolean isFromImage4 = false;
    boolean isFromImage5 = false;
    boolean isFromImage6 = false;
    boolean isFromImage7 = false;
    MultipartBody.Part mImageFileTravel = null;
    MultipartBody.Part mImageFileFood = null;
    MultipartBody.Part mImageFileSample = null;
    MultipartBody.Part mImageFileLodging = null;
    MultipartBody.Part mImageFileCourier = null;
    MultipartBody.Part mImageFileFuel = null;
    MultipartBody.Part mImageFileOthers = null;
    private String pathTravel = "", pathFood = "", pathSample = "", pathLodging = "", pathCourier = "", pathFuel = "", pathOthers = "";
    private String typeCode,typeName,typeCode2,typeName2,typeCode3,typeName3,typeCode4,typeName4,typeCode5,typeName5,typeCode6,typeName6,typeCode7,typeName7;
    private ImageInputHelper mImageInputHelper;
    private static ExpenseFragment instance = null;
    private List<PostExpense.Detail> details;

    private Dialog dialog;

    @Override
    public int getBindingVariable() {
        return BR.expenseViewModel;
    }

    @Override
    public int getLayoutRes() {
        return R.layout.fragment_expense;
    }

    @Override
    protected Class<ExpenseViewModel> getViewModel() {
        return ExpenseViewModel.class;
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        instance = this;
    }

    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        super.onCreateView(inflater, container, savedInstanceState);
        // Inflate the layout for this fragment
        setHasOptionsMenu(true);
        viewModel.setNavigator(this);
        setUp();
        return dataBinding.getRoot();
    }

    public void setUp() {
        mImageInputHelper = new ImageInputHelper(instance);
        mImageInputHelper.setImageActionListener(this);
        details = new ArrayList<>();

        /*dataBinding.fab.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                openDialog();
            }
        });
*/
        dataBinding.travelImageView.setOnClickListener(v -> {
            pickImage1();
          /*  if (!dataBinding.etTravelAmount.getText().toString().equalsIgnoreCase("")) {
                pickImage1();
                //showSnackBar("Please enter amount greater than 0", getResources().getColor(R.color.red));
            } else if (dataBinding.etTravelAmount.getText().toString().equalsIgnoreCase("0")) {
                showSnackBar("Amount should'nt be 0", getResources().getColor(R.color.red));
            }else {
                pickImage1();
            }*/
        });


        dataBinding.foodImageView.setOnClickListener(v -> {
          /*  if (dataBinding.etFoodAmount.getText().toString().equalsIgnoreCase("")) {
                showSnackBar("Please enter amount greater than 0", getResources().getColor(R.color.red));
            } *//*else if (dataBinding.etFoodAmount.getText().toString().equalsIgnoreCase("0")) {
                showSnackBar("Amount should'nt be 0", getResources().getColor(R.color.red));
            }*//* else {
                pickImage2();
            }*/
            pickImage2();
        });


        dataBinding.sampleImageView.setOnClickListener(v -> {
           /* if (dataBinding.etSampleAmount.getText().toString().equalsIgnoreCase("")) {
                showSnackBar("Please enter amount greater than 0", getResources().getColor(R.color.red));
            }*//* else if (dataBinding.etSampleAmount.getText().toString().equalsIgnoreCase("0")) {
                showSnackBar("Amount should'nt be 0", getResources().getColor(R.color.red));
            }*//* else {
                pickImage3();
            }*/
            pickImage3();
        });


        dataBinding.lodgingImageView.setOnClickListener(v -> {
            /*if (dataBinding.etLodgingAmount.getText().toString().equalsIgnoreCase("")) {
                showSnackBar("Please enter amount greater than 0", getResources().getColor(R.color.red));
            } *//*else if (dataBinding.etLodgingAmount.getText().toString().equalsIgnoreCase("0")) {
                showSnackBar("Amount should'nt be 0", getResources().getColor(R.color.red));
            }*//* else {
                pickImage4();
            }*/
            pickImage4();
        });


        dataBinding.courierImageView.setOnClickListener(v -> {
           /* if (dataBinding.etCourierAmount.getText().toString().equalsIgnoreCase("")) {
                showSnackBar("Please enter amount greater than 0", getResources().getColor(R.color.red));
            }*//* else if (dataBinding.etCourierAmount.getText().toString().equalsIgnoreCase("0")) {
                showSnackBar("Amount should'nt be 0", getResources().getColor(R.color.red));
            }*//* else {
                pickImage5();
            }*/
            pickImage5();
        });


        dataBinding.fuelImageView.setOnClickListener(v -> {
          /*  if (dataBinding.etFuelAmount.getText().toString().equalsIgnoreCase("")) {
                showSnackBar("Please enter amount greater than 0", getResources().getColor(R.color.red));
            } *//*else if (dataBinding.etFuelAmount.getText().toString().equalsIgnoreCase("0")) {
                showSnackBar("Amount should'nt be 0", getResources().getColor(R.color.red));
            }*//*else {
                pickImage6();
            }*/
            pickImage6();
        });


        dataBinding.otherImageView.setOnClickListener(v -> {
            /*if (dataBinding.etOtherAmount.getText().toString().equalsIgnoreCase("")) {
                showSnackBar("Please enter amount greater than 0", getResources().getColor(R.color.red));
            }*//* else if (dataBinding.etOtherAmount.getText().toString().equalsIgnoreCase("0")) {
                showSnackBar("Amount should'nt be 0", getResources().getColor(R.color.red));
            }*//* else {
                pickImage7();
            }*/
            pickImage7();
        });

        dataBinding.travelImageView.setOnLongClickListener(v -> {
            if (!pathTravel.equalsIgnoreCase("")) {
                removeImg("1");
            }
            return false;
        });

        dataBinding.foodImageView.setOnLongClickListener(v -> {
            if (!pathFood.equalsIgnoreCase("")) {
                removeImg("2");
            }
            return false;
        });

        dataBinding.sampleImageView.setOnLongClickListener(v -> {
            if (!pathSample.equalsIgnoreCase("")) {
                removeImg("3");
            }

            return false;
        });

        dataBinding.lodgingImageView.setOnLongClickListener(v -> {
            if (!pathLodging.equalsIgnoreCase("")) {
                removeImg("4");
            }

            return false;
        });

        dataBinding.courierImageView.setOnLongClickListener(v -> {
            if (!pathCourier.equalsIgnoreCase("")) {
                removeImg("5");
            }

            return false;
        });

        dataBinding.fuelImageView.setOnLongClickListener(v -> {
            if (!pathFuel.equalsIgnoreCase("")) {
                removeImg("6");
            }

            return false;
        });

        dataBinding.otherImageView.setOnLongClickListener(v -> {
            if (!pathOthers.equalsIgnoreCase("")) {
                removeImg("7");
            }

            return false;
        });


        dataBinding.date1.setText(DateUtils.currentDate());
        dataBinding.date1.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                viewModel.dateSelection1(getActivity());
            }
        });
        dataBinding.date2.setText(DateUtils.currentDate());
        dataBinding.date2.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                viewModel.dateSelection2(getActivity());
            }
        });

        dataBinding.date3.setText(DateUtils.currentDate());
        dataBinding.date3.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                viewModel.dateSelection3(getActivity());
            }
        });

        dataBinding.date4.setText(DateUtils.currentDate());
        dataBinding.date4.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                viewModel.dateSelection4(getActivity());
            }
        });

        dataBinding.date5.setText(DateUtils.currentDate());
        dataBinding.date5.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                viewModel.dateSelection5(getActivity());
            }
        });

        dataBinding.date6.setText(DateUtils.currentDate());
        dataBinding.date6.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                viewModel.dateSelection6(getActivity());
            }
        });

        dataBinding.date7.setText(DateUtils.currentDate());
        dataBinding.date7.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                viewModel.dateSelection7(getActivity());
            }
        });

        dataBinding.submitEx.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                validate();
            }
        });


        getExpenseObservables();
        isLoading();


    }

    private void isLoading() {
        viewModel.isLoading().observe(getViewLifecycleOwner(), aBoolean -> {
            if (aBoolean) {
                showLoading();
            } else {
                hideLoading();
            }
        });
    }

    private void getExpenseObservables() {
        viewModel.progressBar.observe(getViewLifecycleOwner(), aBoolean -> {
            if (aBoolean) {
                showLoading();
            } else {
                hideLoading();
            }
        });

        viewModel.getType().observe(getViewLifecycleOwner(), expenseTypesModelResource -> {
            switch (expenseTypesModelResource.status) {
                case LOADING:
                    showLoading();
                    break;
                case SUCCESS:
                    hideLoading();
                    assert expenseTypesModelResource.data != null;
                    setData(expenseTypesModelResource.data.getResponseObject());
                    break;
                case ERROR:
                    hideLoading();
                    showSnackBar(expenseTypesModelResource.getMessage());
                    break;
                default:
                    break;
            }
        });
    }

    private void setData(List<ExpenseTypesModel.ResponseObject> responseObjects) {
        dataBinding.spType1.setTitle("Dealers");
        ExpenseTypeAdapter adapter = new ExpenseTypeAdapter(requireActivity(), responseObjects);
        dataBinding.spType1.setAdapter(adapter);

        dataBinding.spType1.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                typeCode = responseObjects.get(position).getCode();
                typeName = responseObjects.get(position).getName();
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {

            }
        });

        dataBinding.spType2.setTitle("Dealers");
        ExpenseTypeAdapter adapter2 = new ExpenseTypeAdapter(requireActivity(), responseObjects);
        dataBinding.spType2.setAdapter(adapter2);

        dataBinding.spType2.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                typeCode2 = responseObjects.get(position).getCode();
                typeName2 = responseObjects.get(position).getName();
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {

            }
        });

        dataBinding.spType3.setTitle("Dealers");
        ExpenseTypeAdapter adapter3 = new ExpenseTypeAdapter(requireActivity(), responseObjects);
        dataBinding.spType3.setAdapter(adapter3);

        dataBinding.spType3.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                typeCode3 = responseObjects.get(position).getCode();
                typeName3 = responseObjects.get(position).getName();
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {

            }
        });

        dataBinding.spType4.setTitle("Dealers");
        ExpenseTypeAdapter adapter4 = new ExpenseTypeAdapter(requireActivity(), responseObjects);
        dataBinding.spType4.setAdapter(adapter4);

        dataBinding.spType4.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                typeCode4 = responseObjects.get(position).getCode();
                typeName4 = responseObjects.get(position).getName();
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {

            }
        });

        dataBinding.spType5.setTitle("Dealers");
        ExpenseTypeAdapter adapter5 = new ExpenseTypeAdapter(requireActivity(), responseObjects);
        dataBinding.spType5.setAdapter(adapter5);

        dataBinding.spType5.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                typeCode5 = responseObjects.get(position).getCode();
                typeName5 = responseObjects.get(position).getName();
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {

            }
        });

        dataBinding.spType6.setTitle("Dealers");
        ExpenseTypeAdapter adapter6 = new ExpenseTypeAdapter(requireActivity(), responseObjects);
        dataBinding.spType6.setAdapter(adapter6);

        dataBinding.spType6.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                typeCode6 = responseObjects.get(position).getCode();
                typeName6 = responseObjects.get(position).getName();
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {

            }
        });

        dataBinding.spType7.setTitle("Dealers");
        ExpenseTypeAdapter adapter7 = new ExpenseTypeAdapter(requireActivity(), responseObjects);
        dataBinding.spType7.setAdapter(adapter7);

        dataBinding.spType7.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                typeCode7 = responseObjects.get(position).getCode();
                typeName7 = responseObjects.get(position).getName();
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {

            }
        });

    }


    /*private void setupDialog() {
        dialog = new Dialog(getActivity(), android.R.style.DeviceDefault_Light_ButtonBar);
        dialog.setContentView(R.layout.expense_items_layout);
        ImageView close = dialog.findViewById(R.id.closeSheet);

        addItems = dialog.findViewById(R.id.btnGIAdd);
        addBatch = dialog.findViewById(R.id.btnGIAddBatch);
        itemSpinner = dialog.findViewById(R.id.spGIItemCode);
        etItemName = dialog.findViewById(R.id.etGIItemName);
        etQuantity = dialog.findViewById(R.id.etGIQuantity);
        etUnitPrice = dialog.findViewById(R.id.etGIUnitPrice);
        spProjectCode = dialog.findViewById(R.id.spGIProjectCode);
        spCostCenter = dialog.findViewById(R.id.spGICostCenter);
        spWarehouse = dialog.findViewById(R.id.spGIWarehouse);
        spBranch = dialog.findViewById(R.id.spGIBranch);
        spServiceCallNo = dialog.findViewById(R.id.spServiceCallNo);
        etServiceCall = dialog.findViewById(R.id.etGIServiceCallNo);
        etWarehouse = dialog.findViewById(R.id.etGIWarehouse);
        spGIBin = dialog.findViewById(R.id.spGIBin);

        if (isFromMain){
            spServiceCallNo.setVisibility(View.VISIBLE);
            mPresenter.getServiceCallNo();
        }else{
            etServiceCall.setVisibility(View.VISIBLE);
            etServiceCall.setText(callId);
        }

        mPresenter.getItemDetails();
        mPresenter.getProjectCode();
        mPresenter.getCostCenter();
        mPresenter.getUserBin();
        //mPresenter.getBranchDetails();
        mPresenter.getWarehouse();

        addItems.setOnClickListener(view12 -> {
            if (etItemName.getText().toString().equalsIgnoreCase("")){
                showMessage("Please select item code");
            }else if (etQuantity.getText().toString().equalsIgnoreCase("")){
                showMessage("Please enter quantity");
            }else if (etQuantity.getText().toString().equals("0")){
                showMessage("Quantity should be grater than 0");
            }else if (etUnitPrice.getText().toString().equalsIgnoreCase("")){
                showMessage("Please enter unit price");
            }else if (TextUtils.isEmpty(proCode)){
                showMessage("Please select project code");
            }else if (TextUtils.isEmpty(ccCode)){
                showMessage("Please select cost center");
            }*//*else if (TextUtils.isEmpty(warehouseCode)){
                showMessage("Please select warehouse");
            }*//*else if (TextUtils.isEmpty(binCode)) {
                showMessage("Please select bin");
            }else{
                postGoodsReceiptBeans.clear();
                issuedAdapter();
                dialog.dismiss();
            }

        });

        addBatch.setOnClickListener(v -> {
            if (etItemName.getText().toString().equalsIgnoreCase("")){
                showMessage("Please select item code");
            }else if (etQuantity.getText().toString().equalsIgnoreCase("")){
                showMessage("Please enter quantity");
            }else if (etQuantity.getText().toString().equals("0")){
                showMessage("Quantity should be grater than 0");
            }else if (etUnitPrice.getText().toString().equalsIgnoreCase("")){
                showMessage("Please enter unit price");
            }else if (TextUtils.isEmpty(proCode)){
                showMessage("Please select project code");
            }else if (TextUtils.isEmpty(ccCode)){
                showMessage("Please select cost center");
            }*//*else if (TextUtils.isEmpty(warehouseCode)){
                showMessage("Please select warehouse");
            }*//*else if (TextUtils.isEmpty(binCode)) {
                showMessage("Please select bin");
            }else {
                addBatchDialog();
            }
        });

        close.setOnClickListener(view1 -> dialog.dismiss());

        if (materialSheetFab.isSheetVisible()) {
            materialSheetFab.hideSheet();
        }

        close.setOnClickListener(v -> dialog.dismiss());
        dialog.show();


    }*/


    public void pickImage1() {
        BottomSheetDialog mBottomSheetDialog = new BottomSheetDialog(getActivity());
        View sheetView = getActivity().getLayoutInflater().inflate(R.layout.layout_take_images, null);
        mBottomSheetDialog.setContentView(sheetView);
        mBottomSheetDialog.show();

        LinearLayout camera = sheetView.findViewById(R.id.take_photo);
        LinearLayout gallery = sheetView.findViewById(R.id.pick_gallery);
        isFromImage1 = true;
        isFromImage2 = false;
        isFromImage3 = false;
        isFromImage4 = false;
        isFromImage5 = false;
        isFromImage6 = false;
        isFromImage7 = false;
        camera.setOnClickListener(v -> {
            if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
                mImageInputHelper.takePhotoWithCamera();
            } else {
                initCameraPermission();
            }
            mBottomSheetDialog.dismiss();
        });

        gallery.setOnClickListener(v -> {
            if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
                mImageInputHelper.selectImageFromGallery();
            } else {
                initGalleryPermission();
            }
            mBottomSheetDialog.dismiss();
        });
    }

    public void pickImage2() {
        BottomSheetDialog mBottomSheetDialog = new BottomSheetDialog(getActivity());
        View sheetView = getActivity().getLayoutInflater().inflate(R.layout.layout_take_images, null);
        mBottomSheetDialog.setContentView(sheetView);
        mBottomSheetDialog.show();

        LinearLayout camera = sheetView.findViewById(R.id.take_photo);
        LinearLayout gallery = sheetView.findViewById(R.id.pick_gallery);
        isFromImage1 = false;
        isFromImage2 = true;
        isFromImage3 = false;
        isFromImage4 = false;
        isFromImage5 = false;
        isFromImage6 = false;
        isFromImage7 = false;

        camera.setOnClickListener(v -> {
            if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
                mImageInputHelper.takePhotoWithCamera();
            } else {
                initCameraPermission();
            }
            mBottomSheetDialog.dismiss();
        });

        gallery.setOnClickListener(v -> {
            if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
                mImageInputHelper.selectImageFromGallery();
            } else {
                initGalleryPermission();
            }
            mBottomSheetDialog.dismiss();
        });

    }

    public void pickImage3() {
        BottomSheetDialog mBottomSheetDialog = new BottomSheetDialog(getActivity());
        View sheetView = getActivity().getLayoutInflater().inflate(R.layout.layout_take_images, null);
        mBottomSheetDialog.setContentView(sheetView);
        mBottomSheetDialog.show();

        LinearLayout camera = sheetView.findViewById(R.id.take_photo);
        LinearLayout gallery = sheetView.findViewById(R.id.pick_gallery);
        isFromImage1 = false;
        isFromImage2 = false;
        isFromImage3 = true;
        isFromImage4 = false;
        isFromImage5 = false;
        isFromImage6 = false;
        isFromImage7 = false;
        camera.setOnClickListener(v -> {
            if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
                mImageInputHelper.takePhotoWithCamera();
            } else {
                initCameraPermission();
            }
            mBottomSheetDialog.dismiss();
        });

        gallery.setOnClickListener(v -> {
            if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
                mImageInputHelper.selectImageFromGallery();
            } else {
                initGalleryPermission();
            }
            mBottomSheetDialog.dismiss();
        });

    }

    public void pickImage4() {
        BottomSheetDialog mBottomSheetDialog = new BottomSheetDialog(getActivity());
        View sheetView = getActivity().getLayoutInflater().inflate(R.layout.layout_take_images, null);
        mBottomSheetDialog.setContentView(sheetView);
        mBottomSheetDialog.show();

        LinearLayout camera = sheetView.findViewById(R.id.take_photo);
        LinearLayout gallery = sheetView.findViewById(R.id.pick_gallery);
        isFromImage1 = false;
        isFromImage2 = false;
        isFromImage3 = false;
        isFromImage4 = true;
        isFromImage5 = false;
        isFromImage6 = false;
        isFromImage7 = false;
        camera.setOnClickListener(v -> {
            if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
                mImageInputHelper.takePhotoWithCamera();
            } else {
                initCameraPermission();
            }
            mBottomSheetDialog.dismiss();
        });

        gallery.setOnClickListener(v -> {
            if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
                mImageInputHelper.selectImageFromGallery();
            } else {
                initGalleryPermission();
            }
            mBottomSheetDialog.dismiss();
        });

    }

    public void pickImage5() {
        BottomSheetDialog mBottomSheetDialog = new BottomSheetDialog(getActivity());
        View sheetView = getActivity().getLayoutInflater().inflate(R.layout.layout_take_images, null);
        mBottomSheetDialog.setContentView(sheetView);
        mBottomSheetDialog.show();

        LinearLayout camera = sheetView.findViewById(R.id.take_photo);
        LinearLayout gallery = sheetView.findViewById(R.id.pick_gallery);
        isFromImage1 = false;
        isFromImage2 = false;
        isFromImage3 = false;
        isFromImage4 = false;
        isFromImage5 = true;
        isFromImage6 = false;
        isFromImage7 = false;
        camera.setOnClickListener(v -> {
            if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
                mImageInputHelper.takePhotoWithCamera();
            } else {
                initCameraPermission();
            }
            mBottomSheetDialog.dismiss();
        });

        gallery.setOnClickListener(v -> {
            if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
                mImageInputHelper.selectImageFromGallery();
            } else {
                initGalleryPermission();
            }
            mBottomSheetDialog.dismiss();
        });
    }

    public void pickImage6() {

        BottomSheetDialog mBottomSheetDialog = new BottomSheetDialog(getActivity());
        View sheetView = getActivity().getLayoutInflater().inflate(R.layout.layout_take_images, null);
        mBottomSheetDialog.setContentView(sheetView);
        mBottomSheetDialog.show();

        LinearLayout camera = sheetView.findViewById(R.id.take_photo);
        LinearLayout gallery = sheetView.findViewById(R.id.pick_gallery);

        isFromImage1 = false;
        isFromImage2 = false;
        isFromImage3 = false;
        isFromImage4 = false;
        isFromImage5 = false;
        isFromImage6 = true;
        isFromImage7 = false;

        camera.setOnClickListener(v -> {
            if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
                mImageInputHelper.takePhotoWithCamera();
            } else {
                initCameraPermission();
            }
            mBottomSheetDialog.dismiss();
        });

        gallery.setOnClickListener(v -> {
            if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
                mImageInputHelper.selectImageFromGallery();
            } else {
                initGalleryPermission();
            }
            mBottomSheetDialog.dismiss();
        });
    }

    public void pickImage7() {
        BottomSheetDialog mBottomSheetDialog = new BottomSheetDialog(getActivity());
        View sheetView = getActivity().getLayoutInflater().inflate(R.layout.layout_take_images, null);
        mBottomSheetDialog.setContentView(sheetView);
        mBottomSheetDialog.show();

        LinearLayout camera = sheetView.findViewById(R.id.take_photo);
        LinearLayout gallery = sheetView.findViewById(R.id.pick_gallery);
        isFromImage1 = false;
        isFromImage2 = false;
        isFromImage3 = false;
        isFromImage4 = false;
        isFromImage5 = false;
        isFromImage6 = false;
        isFromImage7 = true;
        camera.setOnClickListener(v -> {
            if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
                mImageInputHelper.takePhotoWithCamera();
            } else {
                initCameraPermission();
            }
            mBottomSheetDialog.dismiss();
        });

        gallery.setOnClickListener(v -> {
            if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
                mImageInputHelper.selectImageFromGallery();
            } else {
                initGalleryPermission();
            }
            mBottomSheetDialog.dismiss();
        });
    }

    @TargetApi(Build.VERSION_CODES.M)
    private void initCameraPermission() {
        Dexter.withActivity(getActivity())
                .withPermissions(CAMERA, WRITE_EXTERNAL_STORAGE)
                .withListener(new MultiplePermissionsListener() {
                    @Override
                    public void onPermissionsChecked(MultiplePermissionsReport report) {
                        if (report.areAllPermissionsGranted()) {
                            mImageInputHelper.takePhotoWithCamera();
                        }
                    }

                    @Override
                    public void onPermissionRationaleShouldBeShown(List<PermissionRequest> permissions, PermissionToken token) {
                        token.continuePermissionRequest();
                    }
                }).check();
    }

    @TargetApi(Build.VERSION_CODES.M)
    private void initGalleryPermission() {
        Dexter.withActivity(getActivity())
                .withPermissions(WRITE_EXTERNAL_STORAGE,
                        READ_EXTERNAL_STORAGE)
                .withListener(new MultiplePermissionsListener() {
                    @Override
                    public void onPermissionsChecked(MultiplePermissionsReport report) {
                        if (report.areAllPermissionsGranted()) {
                            mImageInputHelper.selectImageFromGallery();
                        }
                    }

                    @Override
                    public void onPermissionRationaleShouldBeShown(List<PermissionRequest> permissions, PermissionToken token) {
                        token.continuePermissionRequest();
                    }
                }).check();
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        mImageInputHelper.onActivityResult(requestCode, resultCode, data);
    }

    @Override
    public void onImageSelectedFromGallery(Uri uri, File imageFile) {
        displayImage(uri);
//        // cropping the selected image. crop intent will have aspect ratio 16/9 and result image
//        // will have size 800x450
        // mImageInputHelper.requestCropImage(uri, 800, 450, 16, 9);
    }

    @Override
    public void onImageTakenFromCamera(Uri uri, File imageFile) {
        displayImage(uri);
        // mImageInputHelper.requestCropImage(uri, 800, 450, 16, 9);
    }

    @Override
    public void onImageCropped(Uri uri, File imageFile) {
        displayImage(uri);
    }

    @RequiresApi(api = Build.VERSION_CODES.KITKAT)
    public void displayImage(Uri uri) {
        Bitmap bitmap = null;
        try {
            bitmap = MediaStore.Images.Media.getBitmap(requireActivity().getContentResolver(), uri);
            //  path = RealPathUtils.getRealPathFromURI(getActivity(), bitmap);
            if (isFromImage1) {
                pathTravel = RealPathUtils.getRealPathFromURI(getActivity(), bitmap);
                dataBinding.travelImageView.setClipToOutline(true);
                Glide.with(getActivity())
                        .load(pathTravel)
                        .into(dataBinding.travelImageView);

                if (!pathTravel.equalsIgnoreCase("")) {
                    dataBinding.travelImageView.setOnClickListener(v -> {
                        // Code to show image in full screen:

                        new PhotoFullPopupWindow(getActivity(), R.layout.popup_photo_full, v, pathTravel, null);

                    });
                }
            } else if (isFromImage2) {
                pathFood = RealPathUtils.getRealPathFromURI(getActivity(), bitmap);
                dataBinding.foodImageView.setClipToOutline(true);
                Glide.with(getActivity())
                        .load(pathFood)
                        .into(dataBinding.foodImageView);

                if (!pathFood.equalsIgnoreCase("")) {
                    dataBinding.foodImageView.setOnClickListener(v -> {
                        // Code to show image in full screen:
                        new PhotoFullPopupWindow(getActivity(), R.layout.popup_photo_full, v, pathFood, null);
                    });
                }
            } else if (isFromImage3) {
                pathSample = RealPathUtils.getRealPathFromURI(getActivity(), bitmap);
                dataBinding.sampleImageView.setClipToOutline(true);
                Glide.with(getActivity())
                        .load(pathSample)
                        .into(dataBinding.sampleImageView);

                if (!pathSample.equalsIgnoreCase("")) {
                    dataBinding.sampleImageView.setOnClickListener(v -> {
                        // Code to show image in full screen:
                        new PhotoFullPopupWindow(getActivity(), R.layout.popup_photo_full, v, pathSample, null);
                    });
                }
            } else if (isFromImage4) {
                pathLodging = RealPathUtils.getRealPathFromURI(getActivity(), bitmap);
                dataBinding.lodgingImageView.setClipToOutline(true);
                Glide.with(getActivity())
                        .load(pathLodging)
                        .into(dataBinding.lodgingImageView);

                if (!pathLodging.equalsIgnoreCase("")) {
                    dataBinding.lodgingImageView.setOnClickListener(v -> {
                        // Code to show image in full screen:
                        new PhotoFullPopupWindow(getActivity(), R.layout.popup_photo_full, v, pathLodging, null);
                    });
                }
            } else if (isFromImage5) {
                pathCourier = RealPathUtils.getRealPathFromURI(getActivity(), bitmap);
                dataBinding.courierImageView.setClipToOutline(true);
                Glide.with(getActivity())
                        .load(pathCourier)
                        .into(dataBinding.courierImageView);

                if (!pathCourier.equalsIgnoreCase("")) {
                    dataBinding.courierImageView.setOnClickListener(v -> {
                        // Code to show image in full screen:
                        new PhotoFullPopupWindow(getActivity(), R.layout.popup_photo_full, v, pathCourier, null);
                    });
                }
            } else if (isFromImage6) {
                pathFuel = RealPathUtils.getRealPathFromURI(getActivity(), bitmap);
                dataBinding.fuelImageView.setClipToOutline(true);
                Glide.with(getActivity())
                        .load(pathFuel)
                        .into(dataBinding.fuelImageView);


                if (!pathFuel.equalsIgnoreCase("")) {
                    dataBinding.fuelImageView.setOnClickListener(v -> {
                        // Code to show image in full screen:
                        new PhotoFullPopupWindow(getActivity(), R.layout.popup_photo_full, v, pathFuel, null);
                    });
                }
            } else if (isFromImage7) {
                pathOthers = RealPathUtils.getRealPathFromURI(getActivity(), bitmap);
                dataBinding.otherImageView.setClipToOutline(true);
                Glide.with(getActivity())
                        .load(pathOthers)
                        .into(dataBinding.otherImageView);

                if (!pathOthers.equalsIgnoreCase("")) {
                    dataBinding.otherImageView.setOnClickListener(v -> {
                        // Code to show image in full screen:
                        new PhotoFullPopupWindow(getActivity(), R.layout.popup_photo_full, v, pathOthers, null);
                    });
                }
            }


        } catch (IOException e) {
            e.printStackTrace();
        }
    }


    public void removeImg(String er) {
        AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(getActivity());
        alertDialogBuilder.setMessage("Are you sure You wanted to remove the image");
        alertDialogBuilder.setPositiveButton("yes", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface arg0, int arg1) {

                if (er.equals("1")) {
                    pathTravel = "";
                    dataBinding.travelImageView.setImageResource(R.drawable.ic_baseline_image_24);
                    if (pathTravel.equals("")) {
                        dataBinding.travelImageView.setOnClickListener(v -> {
                            pickImage1();
                        });
                    }
                } else if (er.equals("2")) {
                    pathFood = "";
                    dataBinding.foodImageView.setImageResource(R.drawable.ic_baseline_image_24);
                    if (pathFood.equals("")) {
                        dataBinding.foodImageView.setOnClickListener(v -> {
                            pickImage2();
                        });
                    }
                } else if (er.equals("3")) {
                    pathSample = "";
                    dataBinding.sampleImageView.setImageResource(R.drawable.ic_baseline_image_24);
                    if (pathSample.equals("")) {
                        dataBinding.sampleImageView.setOnClickListener(v -> {
                            pickImage3();
                        });
                    }
                } else if (er.equals("4")) {
                    pathLodging = "";
                    dataBinding.lodgingImageView.setImageResource(R.drawable.ic_baseline_image_24);
                    if (pathLodging.equals("")) {
                        dataBinding.lodgingImageView.setOnClickListener(v -> {
                            pickImage4();
                        });
                    }
                } else if (er.equals("5")) {
                    pathCourier = "";
                    dataBinding.courierImageView.setImageResource(R.drawable.ic_baseline_image_24);
                    if (pathCourier.equals("")) {
                        dataBinding.courierImageView.setOnClickListener(v -> {
                            pickImage5();
                        });
                    }
                } else if (er.equals("6")) {
                    pathFuel = "";
                    dataBinding.fuelImageView.setImageResource(R.drawable.ic_baseline_image_24);
                    if (pathFuel.equals("")) {
                        dataBinding.fuelImageView.setOnClickListener(v -> {
                            pickImage6();
                        });
                    }
                } else if (er.equals("7")) {
                    pathOthers = "";
                    dataBinding.otherImageView.setImageResource(R.drawable.ic_baseline_image_24);
                    if (pathOthers.equals("")) {
                        dataBinding.otherImageView.setOnClickListener(v -> {
                            pickImage7();
                        });
                    }
                }

                arg0.dismiss();
            }
        });

        alertDialogBuilder.setNegativeButton("No", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();
            }
        });

        AlertDialog alertDialog = alertDialogBuilder.create();
        alertDialog.show();

    }


    private void validate() {
        if (pathTravel != "") {
            File file = new File(pathTravel);
            RequestBody requestBody = RequestBody.create(okhttp3.MediaType.parse("multipart/form-data"), file);
            mImageFileTravel = MultipartBody.Part.createFormData("TRAVEL", file.getName(), requestBody);
        }

        if (pathFood != "") {
            File file = new File(pathFood);
            RequestBody requestBody = RequestBody.create(okhttp3.MediaType.parse("multipart/form-data"), file);
            mImageFileFood = MultipartBody.Part.createFormData("FOOD", file.getName(), requestBody);
        }

        if (pathSample != "") {
            File file = new File(pathSample);
            RequestBody requestBody = RequestBody.create(okhttp3.MediaType.parse("multipart/form-data"), file);
            mImageFileSample = MultipartBody.Part.createFormData("SAMPLE", file.getName(), requestBody);
        }


        if (pathLodging != "") {
            File file = new File(pathLodging);
            RequestBody requestBody = RequestBody.create(okhttp3.MediaType.parse("multipart/form-data"), file);
            mImageFileLodging = MultipartBody.Part.createFormData("LODGING", file.getName(), requestBody);
        }

        if (pathCourier != "") {
            File file = new File(pathCourier);
            RequestBody requestBody = RequestBody.create(okhttp3.MediaType.parse("multipart/form-data"), file);
            mImageFileCourier = MultipartBody.Part.createFormData("COURIER", file.getName(), requestBody);
        }


        if (pathFuel != "") {
            File file = new File(pathFuel);
            RequestBody requestBody = RequestBody.create(okhttp3.MediaType.parse("multipart/form-data"), file);
            mImageFileFuel = MultipartBody.Part.createFormData("FUEL", file.getName(), requestBody);
        }


        if (pathOthers != "") {
            File file = new File(pathOthers);
            RequestBody requestBody = RequestBody.create(okhttp3.MediaType.parse("multipart/form-data"), file);
            mImageFileOthers = MultipartBody.Part.createFormData("OTHER", file.getName(), requestBody);
        }

        double totalAmt = 0.0;

        if (!dataBinding.etTravelAmount.getText().toString().equalsIgnoreCase("")) {
            totalAmt += Double.parseDouble(dataBinding.etTravelAmount.getText().toString());
        }

        if (!dataBinding.etFoodAmount.getText().toString().equalsIgnoreCase("")) {
            totalAmt += Double.parseDouble(dataBinding.etFoodAmount.getText().toString());
        }

        if (!dataBinding.etSampleAmount.getText().toString().equalsIgnoreCase("")) {
            totalAmt += Double.parseDouble(dataBinding.etSampleAmount.getText().toString());
        }

        if (!dataBinding.etLodgingAmount.getText().toString().equalsIgnoreCase("")) {
            totalAmt += Double.parseDouble(dataBinding.etLodgingAmount.getText().toString());
        }

        if (!dataBinding.etCourierAmount.getText().toString().equalsIgnoreCase("")) {
            totalAmt += Double.parseDouble(dataBinding.etCourierAmount.getText().toString());
        }

        if (!dataBinding.etFuelAmount.getText().toString().equalsIgnoreCase("")) {
            totalAmt += Double.parseDouble(dataBinding.etFuelAmount.getText().toString());
        }

        if (!dataBinding.etOtherAmount.getText().toString().equalsIgnoreCase("")) {
            totalAmt += Double.parseDouble(dataBinding.etOtherAmount.getText().toString());
        }

        if (totalAmt <= 0) {
            showSnackBar("Please add one expenses entry");
        } else {
            addExpense();
        }

       /* if (dataBinding.etTravelAmount.getText().toString().equalsIgnoreCase("")) {
            showSnackBar("Please enter travel amount", getResources().getColor(R.color.red));
        } else if (pathTravel == null) {
            showSnackBar("Please add travel attachment", getResources().getColor(R.color.red));
        } else if (dataBinding.etFoodAmount.getText().toString().equalsIgnoreCase("")) {
            showSnackBar("Please enter food amount", getResources().getColor(R.color.red));
        } else if (pathFood == null) {
            showSnackBar("Please add food attachment", getResources().getColor(R.color.red));
        } else if (dataBinding.etSampleAmount.getText().toString().equalsIgnoreCase("")) {
            showSnackBar("Please enter sample amount", getResources().getColor(R.color.red));
        } else if (pathSample == null) {
            showSnackBar("Please add sample attachment", getResources().getColor(R.color.red));
        } else if (dataBinding.etLodgingAmount.getText().toString().equalsIgnoreCase("")) {
            showSnackBar("Please enter lodging amount", getResources().getColor(R.color.red));
        } else if (pathLodging == null) {
            showSnackBar("Please add lodging attachment", getResources().getColor(R.color.red));
        } else if (dataBinding.etCourierAmount.getText().toString().equalsIgnoreCase("")) {
            showSnackBar("Please enter courier amount", getResources().getColor(R.color.red));
        } else if (pathCourier == null) {
            showSnackBar("Please add courier attachment", getResources().getColor(R.color.red));
        } else if (dataBinding.etFuelAmount.getText().toString().equalsIgnoreCase("")) {
            showSnackBar("Please enter fuel amount", getResources().getColor(R.color.red));
        } else if (pathFuel == null) {
            showSnackBar("Please add fuel attachment", getResources().getColor(R.color.red));
        } else if (dataBinding.etOtherAmount.getText().toString().equalsIgnoreCase("")) {
            showSnackBar("Please enter other amount", getResources().getColor(R.color.red));
        } else if (pathOthers == null) {
            showSnackBar("Please add other attachment", getResources().getColor(R.color.red));
        } */
    }


    private void addExpense() {
        String empCode = viewModel.empCode();

        if (!dataBinding.etTravelAmount.getText().toString().equalsIgnoreCase("")) {
            details.add(new PostExpense.Detail(Integer.parseInt(dataBinding.etTravelAmount.getText().toString()), typeName,
                    DateUtils.convertDateFormat10(dataBinding.date1.getText().toString()), typeCode));
        }

        if (!dataBinding.etFoodAmount.getText().toString().equalsIgnoreCase("")) {
            details.add(new PostExpense.Detail(Integer.parseInt(dataBinding.etFoodAmount.getText().toString()), typeName2,
                    DateUtils.convertDateFormat10(dataBinding.date2.getText().toString()), typeCode2));
        }

        if (!dataBinding.etSampleAmount.getText().toString().equalsIgnoreCase("")) {
            details.add(new PostExpense.Detail(Integer.parseInt(dataBinding.etSampleAmount.getText().toString()), typeName3,
                    DateUtils.convertDateFormat10(dataBinding.date3.getText().toString()), typeCode3));
        }

        if (!dataBinding.etLodgingAmount.getText().toString().equalsIgnoreCase("")) {
            details.add(new PostExpense.Detail(Integer.parseInt(dataBinding.etLodgingAmount.getText().toString()), typeName4,
                    DateUtils.convertDateFormat10(dataBinding.date4.getText().toString()), typeCode4));
        }

        if (!dataBinding.etCourierAmount.getText().toString().equalsIgnoreCase("")) {
            details.add(new PostExpense.Detail(Integer.parseInt(dataBinding.etCourierAmount.getText().toString()), typeName5,
                    DateUtils.convertDateFormat10(dataBinding.date5.getText().toString()), typeCode5));
        }

        if (!dataBinding.etFuelAmount.getText().toString().equalsIgnoreCase("")) {
            details.add(new PostExpense.Detail(Integer.parseInt(dataBinding.etFuelAmount.getText().toString()), typeName6,
                    DateUtils.convertDateFormat10(dataBinding.date6.getText().toString()), typeCode6));
        }

        if (!dataBinding.etOtherAmount.getText().toString().equalsIgnoreCase("")) {
            details.add(new PostExpense.Detail(Integer.parseInt(dataBinding.etOtherAmount.getText().toString()), typeName7,
                    DateUtils.convertDateFormat10(dataBinding.date7.getText().toString()), typeCode7));
        }

        PostExpense postExpense = new PostExpense(details, empCode);

        viewModel.addExpense(postExpense, mImageFileTravel, mImageFileFood, mImageFileSample,
                mImageFileLodging, mImageFileCourier, mImageFileFuel, mImageFileOthers).observe(getViewLifecycleOwner(), basePostResponseResource -> {
            switch (basePostResponseResource.status) {
                case LOADING:
                    showLoading();
                    break;
                case SUCCESS:
                    hideLoading();
                    refresh();
                    showSnackBar("Success");
                    break;
                case ERROR:
                    hideLoading();
                    Toast.makeText(getActivity(), basePostResponseResource.getMessage(), Toast.LENGTH_SHORT).show();
                    showSnackBar(basePostResponseResource.getMessage());
                    break;
                default:
                    break;
            }
        });
    }


    @Override
    public void onPrepareOptionsMenu(@NonNull Menu menu) {
        MenuItem item = menu.findItem(R.id.action_cart);

        if (item != null)
            item.setVisible(false);
    }

    @Override
    public void setDate1(String date) {
        dataBinding.date1.setText(date);
    }

    @Override
    public void setDate2(String date) {
        dataBinding.date2.setText(date);
    }

    @Override
    public void setDate3(String date) {
        dataBinding.date3.setText(date);
    }

    @Override
    public void setDate4(String date) {
        dataBinding.date4.setText(date);
    }

    @Override
    public void setDate5(String date) {
        dataBinding.date5.setText(date);
    }

    @Override
    public void setDate6(String date) {
        dataBinding.date6.setText(date);
    }

    @Override
    public void setDate7(String date) {
        dataBinding.date7.setText(date);
    }


    private void refresh() {
        final Handler handler = new Handler(Looper.getMainLooper());
        handler.postDelayed(() -> {
            HomeFragment fragment = new HomeFragment();
            FragmentManager fragmentManager = getFragmentManager();
            FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();
            fragmentTransaction.replace(R.id.nav_host_fragment, fragment);
            fragmentTransaction.addToBackStack("Home");
            fragmentTransaction.commit();
            getActivity().overridePendingTransition(R.anim.slide_out_to_left, R.anim.slide_out_to_right);
        }, 2000);
    }

}