// Generated by Dagger (https://google.github.io/dagger).
package com.cbs.snb.ui.leads.customer;

import com.cbs.snb.data.database.AppDatabase;
import com.cbs.snb.data.network.repository.Repository;
import com.cbs.snb.data.preferences.PreferenceHelper;
import dagger.internal.Factory;
import javax.inject.Provider;

public final class CustomerDetailsViewModel_Factory implements Factory<CustomerDetailsViewModel> {
  private final Provider<Repository> repositoryProvider;

  private final Provider<PreferenceHelper> preferenceHelperProvider;

  private final Provider<AppDatabase> databaseProvider;

  public CustomerDetailsViewModel_Factory(
      Provider<Repository> repositoryProvider,
      Provider<PreferenceHelper> preferenceHelperProvider,
      Provider<AppDatabase> databaseProvider) {
    this.repositoryProvider = repositoryProvider;
    this.preferenceHelperProvider = preferenceHelperProvider;
    this.databaseProvider = databaseProvider;
  }

  @Override
  public CustomerDetailsViewModel get() {
    return new CustomerDetailsViewModel(
        repositoryProvider.get(), preferenceHelperProvider.get(), databaseProvider.get());
  }

  public static CustomerDetailsViewModel_Factory create(
      Provider<Repository> repositoryProvider,
      Provider<PreferenceHelper> preferenceHelperProvider,
      Provider<AppDatabase> databaseProvider) {
    return new CustomerDetailsViewModel_Factory(
        repositoryProvider, preferenceHelperProvider, databaseProvider);
  }

  public static CustomerDetailsViewModel newInstance(
      Repository repository, PreferenceHelper preferenceHelper, AppDatabase database) {
    return new CustomerDetailsViewModel(repository, preferenceHelper, database);
  }
}
