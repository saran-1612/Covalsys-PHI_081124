package com.cbs.snb.ui.customerhistory.addcustomer;

import android.Manifest;
import android.annotation.TargetApi;
import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.provider.MediaStore;
import android.view.View;
import android.widget.AdapterView;
import android.widget.LinearLayout;

import androidx.annotation.NonNull;
import androidx.annotation.RequiresApi;
import androidx.core.app.ActivityCompat;
import androidx.lifecycle.ViewModelProvider;

import com.bumptech.glide.Glide;
import com.cbs.snb.BR;
import com.cbs.snb.R;
import com.cbs.snb.data.network.models.get.GstTypeModel;
import com.cbs.snb.data.network.models.get.PaymentTermsModel;
import com.cbs.snb.data.network.models.get.StateModel;
import com.cbs.snb.ui.leads.GstTypeAdapter;
import com.cbs.snb.ui.leads.StateAdapter;
import com.cbs.snb.service.LocationService;
import com.cbs.snb.data.network.models.get.CustomerGroupModel;
import com.cbs.snb.data.network.models.post.CustomerCreationModel;
import com.cbs.snb.databinding.ActivityAddCustomerBinding;
import com.cbs.snb.ui.ViewModelProviderFactory;
import com.cbs.snb.ui.base.BaseActivity;
import com.cbs.snb.utils.DateUtils;
import com.cbs.snb.utils.ImageInputHelper;
import com.cbs.snb.utils.PhotoFullPopupWindow;
import com.cbs.snb.utils.RealPathUtils;
import com.cbs.snb.utils.getAddressByLatLng;
import com.google.android.material.bottomsheet.BottomSheetDialog;
import com.karumi.dexter.Dexter;
import com.karumi.dexter.MultiplePermissionsReport;
import com.karumi.dexter.PermissionToken;
import com.karumi.dexter.listener.PermissionRequest;
import com.karumi.dexter.listener.multi.MultiplePermissionsListener;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import javax.inject.Inject;

import okhttp3.MultipartBody;
import okhttp3.RequestBody;

import static android.Manifest.permission.CAMERA;
import static android.Manifest.permission.READ_EXTERNAL_STORAGE;
import static android.Manifest.permission.WRITE_EXTERNAL_STORAGE;
import static com.cbs.snb.utils.Constants.PERMISSION_LOCATION_REQUEST_CODE;

public class AddCustomerActivity extends BaseActivity<AddCustomerViewModel, ActivityAddCustomerBinding>
        implements AddCustomerNavigator,ImageInputHelper.ImageActionListener {

    @Inject
    ViewModelProviderFactory factory;

    @Inject
    LocationService locationService;

    private AddCustomerViewModel mAddCustomerViewModel;

    private String groupName,paymentGroupName,selectedType,customerCode,customerName,stateCode,stateName;
    private int groupCode,paymentGroupCode;
    private String gstCode, gstName;
    private List<CustomerCreationModel.Addres> address;

    private List<CustomerCreationModel> customerCreation;

    private String path;
    private ImageInputHelper mImageInputHelper;
    private static final long DOUBLE_CLICK_TIME_DELTA = 300;//milliseconds
    long lastClickTime = 0;

    public static Intent newIntent(Context context) {
        Intent intent = new Intent(context, AddCustomerActivity.class);
        return intent;
    }

    public static Intent getStartIntent(Context context, Bundle bundle) {
        Intent intent = new Intent(context, AddCustomerActivity.class);
        intent.putExtras(bundle);
        return intent;
    }

    @Override
    public int getBindingVariable() {
        return BR.addCustomerViewModel;
    }

    @Override
    protected int getLayoutRes() {
        return R.layout.activity_add_customer;
    }

    @Override
    protected AddCustomerViewModel getViewModel() {
        mAddCustomerViewModel = new ViewModelProvider(this, factory).get(AddCustomerViewModel.class);
        return mAddCustomerViewModel;
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        mAddCustomerViewModel.setNavigator(this);
        setUp();
    }

    public void setUp() {
        setSupportActionBar(dataBinding.toolbar);
        if (getSupportActionBar() != null) {
            getSupportActionBar().setTitle("Add Customer");
            getSupportActionBar().setDisplayHomeAsUpEnabled(true);
            getSupportActionBar().setDisplayShowHomeEnabled(true);
        }

        dataBinding.toolbar.setNavigationIcon(R.drawable.ic_arrow_back_black_24dp);
        dataBinding.toolbar.setNavigationOnClickListener(v -> onBackPressed());

        showPermissionDialog();

        dataBinding.etLocation.setOnClickListener(v -> subscribeToLocationUpdate());

        subscribeToLocationUpdate();

        mImageInputHelper = new ImageInputHelper(AddCustomerActivity.this);
        mImageInputHelper.setImageActionListener(this);

        address = new ArrayList<>();
        customerCreation = new ArrayList<>();

        isLoading();

        getCustomerCode();

        getPaymentTerms();

        getGstType();

        getState();

        dataBinding.addImage.setOnClickListener(v -> pickImage());

        dataBinding.submit.setOnClickListener(v ->{
                    if (dataBinding.etCustomerName.getText().toString().isEmpty()){
                        showSnackBar("Please enter customer name",getResources().getColor(R.color.red));
                    }else if (dataBinding.etOwnerName.getText().toString().isEmpty()){
                        showSnackBar("Please enter owner name",getResources().getColor(R.color.red));
                    }/*else if (dataBinding.etCreditLimit.getText().toString().isEmpty()){
                        showSnackBar("Please enter credit limit",getResources().getColor(R.color.red));
                    }else if (dataBinding.etMobileNo.getText().toString().isEmpty()){
                        showSnackBar("Please enter mobile number",getResources().getColor(R.color.red));
                    }else if (dataBinding.etEmailId.getText().toString().isEmpty()){
                        showSnackBar("Please enter email id",getResources().getColor(R.color.red));
                    }else if (dataBinding.etBlock.getText().toString().isEmpty()){
                        showSnackBar("Please enter block",getResources().getColor(R.color.red));
                    }else if (dataBinding.etStreet.getText().toString().isEmpty()){
                        showSnackBar("Please enter street name",getResources().getColor(R.color.red));
                    }else if (dataBinding.etAddress1.getText().toString().isEmpty()){
                        showSnackBar("Please enter address 1",getResources().getColor(R.color.red));
                    }else if (dataBinding.etAddress2.getText().toString().isEmpty()){
                        showSnackBar("Please enter address 2",getResources().getColor(R.color.red));
                    }else if (dataBinding.etState.getText().toString().isEmpty()){
                        showSnackBar("Please enter state",getResources().getColor(R.color.red));
                    }else if (dataBinding.etCountry.getText().toString().isEmpty()){
                        showSnackBar("Please enter country",getResources().getColor(R.color.red));
                    }else if (dataBinding.etPinCode.getText().toString().isEmpty()){
                        showSnackBar("Please enter pincode",getResources().getColor(R.color.red));
                    }*/else if (dataBinding.etGstInNo.getText().toString().isEmpty()){
                        showSnackBar("Please enter GSTN number",getResources().getColor(R.color.red));
                    }else if (dataBinding.etAdharNo.getText().toString().isEmpty()){
                        showSnackBar("Please enter adhar number",getResources().getColor(R.color.red));
                    }else if (dataBinding.etPanNo.getText().toString().isEmpty()){
                        showSnackBar("Please enter PAN number",getResources().getColor(R.color.red));
                    }/*else if (dataBinding.etRemarks.getText().toString().isEmpty()){
                        showSnackBar("Please enter remarks",getResources().getColor(R.color.red));
                    }*/
                    else {
                        hideKeyboard();
                        addCustomer();
                    }
                });

    }

    private void isLoading(){
        mAddCustomerViewModel.isLoading().observe(this,aBoolean ->  {
           if (aBoolean){
               showLoading();
           }else {
               hideLoading();
           }

        });
    }

    private void getGstType(){
        mAddCustomerViewModel.getGstType().observe(this,gstTypeModelResource -> {
            switch (gstTypeModelResource.status){
                case LOADING:
                    showLoading();
                    break;
                case SUCCESS:
                    hideLoading();
                    setGstType(gstTypeModelResource.data.getResponseObject());
                    break;
                case ERROR:
                    hideLoading();
                    showSnackBar(gstTypeModelResource.getMessage(),getResources().getColor(R.color.red));
                    break;
                default:
                    break;
            }
        });
    }


  private void getState(){
        mAddCustomerViewModel.getState().observe(this,stateModelResource -> {
            switch (stateModelResource.status){
                case LOADING:
                    showLoading();
                    break;
                case SUCCESS:
                    hideLoading();
                    setState(stateModelResource.data.getResponseObject());
                    break;
                case ERROR:
                    hideLoading();
                    showSnackBar(stateModelResource.getMessage(),getResources().getColor(R.color.red));
                    break;
                default:
                    break;
            }
        });
  }

    private void getCustomerCode(){

        mAddCustomerViewModel.getCustomerCode().observe(this,customerGroupModelResource -> {
            switch (customerGroupModelResource.status){
                case LOADING:
                    showLoading();
                    break;
                case SUCCESS:
                    hideLoading();
                    setCustomerCode(customerGroupModelResource.data.getResponseObject());
                    break;
                case ERROR:
                    hideLoading();
                    showSnackBar(customerGroupModelResource.getMessage(),getResources().getColor(R.color.red));
                    break;
                default:
                    break;
            }
        });

    }

    private void getPaymentTerms(){
        mAddCustomerViewModel.getPaymentTerms().observe(this,paymentTermsModelResource -> {
            switch (paymentTermsModelResource.status){
                case LOADING:
                    showLoading();
                    break;
                case SUCCESS:
                    hideLoading();
                    setPaymentTerms(paymentTermsModelResource.data.getResponseObject());
                    break;
                case ERROR:
                    hideLoading();
                    showSnackBar(paymentTermsModelResource.getMessage(),getResources().getColor(R.color.red));
                    break;
                default:
                    break;
            }
        });

    }

    private void setState(List<StateModel.ResponseObject> state){
        dataBinding.spState.setTitle("State");
        StateAdapter adapter = new StateAdapter(this, state);
        dataBinding.spState.setAdapter(adapter);

        dataBinding.spState.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                stateCode = state.get(position).getCode();
                stateName = state.get(position).getName();
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {

            }
        });

    }

   /* private void setData(List<CustomerDetailsModel.ResponseObject> responseObjects) {
        dataBinding.dealerSp.setTitle("Customers");
        DealersAdapter adapter = new DealersAdapter(this, responseObjects);
        dataBinding.dealerSp.setAdapter(adapter);

        dataBinding.dealerSp.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                customerCode = responseObjects.get(position).getCardCode();
                customerName = responseObjects.get(position).getCardName();
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {

            }
        });

    }
*/

    private void addCustomer(){
        String empCode = mAddCustomerViewModel.empCode();
       // Log.e("ddd",empCode);
        address.add(new CustomerCreationModel.Addres(dataBinding.etAddress1.getText().toString(),
                dataBinding.etAddress2.getText().toString(),1,
                "","",dataBinding.etBlock.getText().toString(),"","IN",stateCode,
                dataBinding.etStreet.getText().toString(),dataBinding.etPinCode.getText().toString()));
        CustomerCreationModel  customerCreationModel = new CustomerCreationModel(dataBinding.etAdharNo.getText().toString(),address,"",
                Integer.parseInt(dataBinding.etCreditLimit.getText().toString()),dataBinding.etCustomerName.getText().toString(), String.valueOf(groupCode),
                dataBinding.etCustomerName.getText().toString(), DateUtils.currentDateYYYY(),dataBinding.etEmailId.getText().toString(),
                dataBinding.etGstInNo.getText().toString(), gstCode, locationService.getLatitude()+","+ locationService.getLongitude(),
                dataBinding.etMobileNo.getText().toString(), dataBinding.etOwnerName.getText().toString(), dataBinding.etPanNo.getText().toString(),
                String.valueOf(paymentGroupCode), dataBinding.etRemarks.getText().toString(),empCode,"C");

        MultipartBody.Part mImageFile = null;

        if (path != null) {
            File file = new File(path);
            RequestBody requestBody = RequestBody.create(okhttp3.MediaType.parse("multipart/form-data"), file);
            mImageFile = MultipartBody.Part.createFormData("image", file.getName(), requestBody);
        }

        mAddCustomerViewModel.addCustomer(customerCreationModel,mImageFile).observe(this,basePostResponseResource -> {
            switch (basePostResponseResource.status){
                case LOADING:
                    showLoading();
                    break;
                case SUCCESS:
                    hideLoading();
                    refresh();
                    showSnackBar("Success",getResources().getColor(R.color.green));
                    break;
                case ERROR:
                    hideLoading();
                    showSnackBar(basePostResponseResource.getMessage(),getResources().getColor(R.color.red));
                    break;
                default:
                    break;
            }
        });

    }

    private void setCustomerCode(List<CustomerGroupModel.ResponseObject> customerCodeList){
        dataBinding.spGroup.setTitle("Customer Group");
        CustomerGroupAdapter adapter = new CustomerGroupAdapter(AddCustomerActivity.this, customerCodeList);
        dataBinding.spGroup.setAdapter(adapter);

        dataBinding.spGroup.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                groupCode = customerCodeList.get(position).getGroupCode();
                groupName = customerCodeList.get(position).getGroupName();
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {

            }
        });
    }

    private void setPaymentTerms(List<PaymentTermsModel.ResponseObject> paymentTerms){
        dataBinding.spPayTerms.setTitle("Customer Group");
        PaymentTermsAdapter adapter = new PaymentTermsAdapter(AddCustomerActivity.this, paymentTerms);
        dataBinding.spPayTerms.setAdapter(adapter);

        dataBinding.spPayTerms.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                paymentGroupCode = paymentTerms.get(position).getGroupNum();
                paymentGroupName = paymentTerms.get(position).getPymntGroup();
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {

            }
        });
    }

    private void setGstType(List<GstTypeModel.ResponseObject> gstType){
        dataBinding.spGstType.setTitle("GST Type");
        GstTypeAdapter adapter = new GstTypeAdapter(this, gstType);
        dataBinding.spGstType.setAdapter(adapter);

        dataBinding.spGstType.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                gstCode = gstType.get(position).getCode();
                gstName = gstType.get(position).getName();
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {

            }
        });
    }


    public void pickImage() {
        BottomSheetDialog mBottomSheetDialog = new BottomSheetDialog(AddCustomerActivity.this);
        View sheetView = AddCustomerActivity.this.getLayoutInflater().inflate(R.layout.layout_take_images, null);
        mBottomSheetDialog.setContentView(sheetView);
        mBottomSheetDialog.show();

        LinearLayout camera = sheetView.findViewById(R.id.take_photo);
        LinearLayout gallery = sheetView.findViewById(R.id.pick_gallery);

        camera.setOnClickListener(v -> {
            if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
                mImageInputHelper.takePhotoWithCamera();
            } else {
                initCameraPermission();
            }
            mBottomSheetDialog.dismiss();
        });

        gallery.setOnClickListener(v -> {
            if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
                mImageInputHelper.selectImageFromGallery();
            } else {
                initGalleryPermission();
            }
            mBottomSheetDialog.dismiss();
        });

    }

    @TargetApi(Build.VERSION_CODES.M)
    private void initCameraPermission() {
        Dexter.withActivity(AddCustomerActivity.this)
                .withPermissions(CAMERA)
                .withListener(new MultiplePermissionsListener() {
                    @Override
                    public void onPermissionsChecked(MultiplePermissionsReport report) {
                        if (report.areAllPermissionsGranted()) {
                            mImageInputHelper.takePhotoWithCamera();
                        }
                    }

                    @Override
                    public void onPermissionRationaleShouldBeShown(List<PermissionRequest> permissions, PermissionToken token) {
                        token.continuePermissionRequest();
                    }
                }).check();
    }

    @TargetApi(Build.VERSION_CODES.M)
    private void initGalleryPermission() {
        Dexter.withActivity(AddCustomerActivity.this)
                .withPermissions(WRITE_EXTERNAL_STORAGE,
                        READ_EXTERNAL_STORAGE)
                .withListener(new MultiplePermissionsListener() {
                    @Override
                    public void onPermissionsChecked(MultiplePermissionsReport report) {
                        if (report.areAllPermissionsGranted()) {
                            mImageInputHelper.selectImageFromGallery();
                        }
                    }

                    @Override
                    public void onPermissionRationaleShouldBeShown(List<PermissionRequest> permissions, PermissionToken token) {
                        token.continuePermissionRequest();
                    }
                }).check();

    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        mImageInputHelper.onActivityResult(requestCode, resultCode, data);
    }

    @Override
    public void onImageSelectedFromGallery(Uri uri, File imageFile) {
        displayImage(uri);
    }

    @Override
    public void onImageTakenFromCamera(Uri uri, File imageFile) {
        displayImage(uri);
    }

    @Override
    public void onImageCropped(Uri uri, File imageFile) {
        displayImage(uri);
    }


    @RequiresApi(api = Build.VERSION_CODES.KITKAT)
    public void displayImage(Uri uri) {
        Bitmap bitmap = null;
        try {
            bitmap = MediaStore.Images.Media.getBitmap(this.getContentResolver(), uri);
            path = RealPathUtils.getRealPathFromURI(Objects.requireNonNull(AddCustomerActivity.this), bitmap);
            dataBinding.imageView.setClipToOutline(true);
            Glide.with(AddCustomerActivity.this)
                    .load(path)
                    .into(dataBinding.imageView);

            if (!path.equalsIgnoreCase("")) {
                dataBinding.imageView.setOnClickListener(v -> {
                    // Code to show image in full screen:
                    new PhotoFullPopupWindow(AddCustomerActivity.this, R.layout.popup_photo_full, v, path, null);
                });
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }


    private void showPermissionDialog() {
        if (!LocationService.checkPermission(AddCustomerActivity.this)) {
            ActivityCompat.requestPermissions(AddCustomerActivity.this,
                    new String[]{Manifest.permission.ACCESS_COARSE_LOCATION, Manifest.permission.ACCESS_FINE_LOCATION},
                    PERMISSION_LOCATION_REQUEST_CODE);
        }
    }

    private void subscribeToLocationUpdate() {
        String address = getAddressByLatLng.getAddress(locationService.getLatitude(), locationService.getLongitude(), AddCustomerActivity.this);
        dataBinding.etLocation.setText(address);
    }


    private void refresh(){
        dataBinding.spType.setSelection(0);
        dataBinding.etCustomerName.setText("");
        dataBinding.etOwnerName.setText("");
        dataBinding.spGroup.setSelection(0);
        dataBinding.spPayTerms.setSelection(0);
        dataBinding.etCreditLimit.setText("");
        dataBinding.etMobileNo.setText("");
        dataBinding.etEmailId.setText("");
        dataBinding.etBlock.setText("");
        dataBinding.etStreet.setText("");
        dataBinding.etAddress1.setText("");
        dataBinding.etAddress2.setText("");
        //dataBinding.etState.setText("");
        dataBinding.etCountry.setText("");
        dataBinding.etPinCode.setText("");
        dataBinding.etLocation.setText("");
        dataBinding.spGstType.setSelection(0);
        dataBinding.etGstInNo.setText("");
        dataBinding.etAdharNo.setText("");
        dataBinding.etPanNo.setText("");
        dataBinding.etRemarks.setText("");
        dataBinding.imageView.setImageDrawable(getResources().getDrawable(R.drawable.add_image));
    }
}