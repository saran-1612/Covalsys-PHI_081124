package com.cbs.snb.ui.payment;

import android.app.Dialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.res.Resources;
import android.content.res.TypedArray;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.inputmethod.InputMethodManager;
import android.widget.AdapterView;
import android.widget.RadioButton;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.databinding.DataBindingUtil;

import com.cbs.snb.R;
import com.cbs.snb.data.network.ApiService;
import com.cbs.snb.data.network.models.get.BanksModel;
import com.cbs.snb.data.network.models.get.PaymentDetailsModel;
import com.cbs.snb.data.network.models.get.PaymentTermsModel;
import com.cbs.snb.data.network.models.post.BasePostResponse;
import com.cbs.snb.data.network.models.post.PostPaymentModel;
import com.cbs.snb.databinding.LayoutBottomSheetPaymentBinding;
import com.cbs.snb.ui.payment.adapter.BanksAdapter;
import com.cbs.snb.utils.ApiClient;
import com.cbs.snb.utils.CommonUtils;
import com.google.android.material.bottomsheet.BottomSheetBehavior;
import com.google.android.material.bottomsheet.BottomSheetDialog;
import com.google.android.material.bottomsheet.BottomSheetDialogFragment;

import org.jetbrains.annotations.NotNull;

import java.util.ArrayList;
import java.util.List;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

/**
 * Created by Venkatesh on 15-07-2020.
 */
public class PaymentBottomSheet extends BottomSheetDialogFragment {

    BottomSheetBehavior bottomSheetBehavior;
    LayoutBottomSheetPaymentBinding bi;
    PaymentDetailsModel.ResponseObject model;
    List<PaymentTermsModel.ResponseObject> responseObjects;
    List<BanksModel.ResponseObject> banks;
    String paymentGroupName, bankCode, banksName;
    int paymentGroupCode;
    String checkNum, paymentType, remarks, paymentMode, customerCode, num, entry, openAmount, amount,paymentName,paymentCode;
    List<PostPaymentModel.Invoice> invoice;

    ApiService apiService;
    RadioButton checked;

    @NonNull
    @Override
    public Dialog onCreateDialog(Bundle savedInstanceState) {
        BottomSheetDialog bottomSheet = (BottomSheetDialog) super.onCreateDialog(savedInstanceState);

        //inflating layout
        View view = View.inflate(getContext(), R.layout.layout_bottom_sheet_payment, null);

        //bin ding views to data binding.
        bi = DataBindingUtil.bind(view);

        //setting layout with bottom sheet
        bottomSheet.setContentView(view);

        bottomSheetBehavior = BottomSheetBehavior.from((View) (view.getParent()));

        //setting Peek at the 16:9 ratio keyline of its parent.
        bottomSheetBehavior.setPeekHeight(BottomSheetBehavior.PEEK_HEIGHT_AUTO);
        apiService = ApiClient.getClient(getActivity()).create(ApiService.class);
        responseObjects = new ArrayList<>();
        banks = new ArrayList<>();
        invoice = new ArrayList<>();


        Bundle mArgs = getArguments();
        String docDate = mArgs.getString("docDate");
        String dueDate = mArgs.getString("dueDate");
        amount = mArgs.getString("amount");
        openAmount = mArgs.getString("openAmount");
        String status = mArgs.getString("status");
        num = mArgs.getString("num");
        entry = mArgs.getString("entry");
        customerCode = mArgs.getString("code");
        paymentName = mArgs.getString("paymentName");
        paymentCode = mArgs.getString("paymentCode");

        //getPaymentTerms();

        getBanks();
        //setting max height of bottom sheet
        bi.extraSpace.setMinimumHeight((Resources.getSystem().getDisplayMetrics().heightPixels) / 2);

        bottomSheetBehavior.setBottomSheetCallback(new BottomSheetBehavior.BottomSheetCallback() {
            @Override
            public void onStateChanged(@NonNull View bottomSheet, int i) {
                if (BottomSheetBehavior.STATE_EXPANDED == i) {
                    showView(bi.appBarLayout, getActionBarSize());
                    hideAppBar(bi.profileLayout);

                }
                if (BottomSheetBehavior.STATE_COLLAPSED == i) {
                    hideAppBar(bi.appBarLayout);
                    showView(bi.profileLayout, getActionBarSize());
                }

                if (BottomSheetBehavior.STATE_HIDDEN == i) {
                    dismiss();
                }
            }

            @Override
            public void onSlide(@NonNull View bottomSheet, float slideOffset) {

            }
        });


        //hiding app bar at the start
        hideAppBar(bi.appBarLayout);

        setUp();

        return bottomSheet;

    }

    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        return super.onCreateView(inflater, container, savedInstanceState);
    }


    private void setUp() {
        bi.invoiceNo.setText(num);
        bi.invoiceAmt.setText("₹ " + amount);
        bi.outstandingAmt.setText("₹ " + openAmount);
        bi.dueAmt.setText("₹ " + amount);
        bi.collectAmt.setText("₹ " + amount);
        bi.paymentTerms.setText(paymentName);
        //aap bar cancel button clicked
        bi.cancelBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                dismiss();
            }
        });

        bi.radioGroup1.setOnCheckedChangeListener((group, checkedId) -> {
            RadioButton checked = (RadioButton) group.findViewById(checkedId);
            if (checked.getText().toString().equalsIgnoreCase("Full")) {
                paymentMode = "Full";
            } else {
                paymentMode = "Partial";
            }

        });

        bi.radioCash.setChecked(true);
        bi.cashLayout.setVisibility(View.VISIBLE);
        bi.neftLayout.setVisibility(View.GONE);
        bi.chequeLayout.setVisibility(View.GONE);
        checkNum = "0";
        paymentType = "CASH";
        remarks = bi.remarks.getText().toString();

        bi.radioGroup.setOnCheckedChangeListener((group, checkedId) -> {
            checked = (RadioButton) group.findViewById(checkedId);
            Log.e("ccc", String.valueOf(checked.getText().toString()));
            if (checked.getText().toString().equalsIgnoreCase("Cash")) {
                bi.cashLayout.setVisibility(View.VISIBLE);
                bi.neftLayout.setVisibility(View.GONE);
                bi.chequeLayout.setVisibility(View.GONE);
                checkNum = "0";
                paymentType = "CASH";
                remarks = bi.remarks.getText().toString();
            } else if (checked.getText().toString().equalsIgnoreCase("NEFT")) {
                bi.neftLayout.setVisibility(View.VISIBLE);
                bi.cashLayout.setVisibility(View.GONE);
                bi.chequeLayout.setVisibility(View.GONE);
                checkNum = bi.refNo.getText().toString();
                paymentType = "NEFT-RTGS";
                remarks = bi.neftRemarks.getText().toString();
            } else {
                bi.chequeLayout.setVisibility(View.VISIBLE);
                bi.cashLayout.setVisibility(View.GONE);
                bi.neftLayout.setVisibility(View.GONE);
                checkNum = bi.chequeNo.getText().toString();
                paymentType = "CHEQUE-DD";
                remarks = bi.chequeRemarks.getText().toString();
            }
        });

        //aap bar edit button clicked
        bi.paymentSubmit.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                hideKeyboard();
                if (bi.radioCash.isChecked()) {
                    if (bi.amount.getText().toString().isEmpty()) {
                        Toast.makeText(getActivity(), "Please enter amount", Toast.LENGTH_SHORT).show();
                    } else if (bi.remarks.getText().toString().isEmpty()) {
                        Toast.makeText(getActivity(), "Please enter remarks", Toast.LENGTH_SHORT).show();
                    } else {
                        if (checkNum.equals("")) {
                            checkNum = "0";
                        }

                        invoice.add(new PostPaymentModel.Invoice(Integer.parseInt(entry), paymentCode));
                        Log.e("check", checkNum);
                        PostPaymentModel postPaymentModel = new PostPaymentModel(bi.amount.getText().toString().trim(), bankCode,
                                Integer.parseInt(checkNum), customerCode, invoice, "", paymentType, bi.remarks.getText().toString());
                        doPayment(postPaymentModel);
                    }
                } else if (bi.radioNeft.isChecked()) {
                    if (bi.neftAmount.getText().toString().isEmpty()) {
                        Toast.makeText(getActivity(), "Please enter amount", Toast.LENGTH_SHORT).show();
                    } else if (bi.refNo.getText().toString().isEmpty()) {
                        Toast.makeText(getActivity(), "Please enter reference number", Toast.LENGTH_SHORT).show();
                    } else if (bi.neftRemarks.getText().toString().isEmpty()) {
                        Toast.makeText(getActivity(), "Please enter remarks", Toast.LENGTH_SHORT).show();
                    } else {
                        if (bi.refNo.getText().toString().trim().equals("")) {
                            checkNum = "0";
                        }else{
                            checkNum = bi.refNo.getText().toString().trim();
                        }

                        invoice.add(new PostPaymentModel.Invoice(Integer.parseInt(entry), paymentCode));
                        Log.e("check", checkNum);
                        PostPaymentModel postPaymentModel = new PostPaymentModel(bi.neftAmount.getText().toString().trim(), bankCode,
                                Integer.parseInt(checkNum), customerCode, invoice, "", paymentType, bi.neftRemarks.getText().toString().trim());
                        doPayment(postPaymentModel);
                    }
                } else {
                    if (bi.chequeAmount.getText().toString().isEmpty()) {
                        Toast.makeText(getActivity(), "Please enter amount", Toast.LENGTH_SHORT).show();
                    } else if (bi.chequeNo.getText().toString().isEmpty()) {
                        Toast.makeText(getActivity(), "Please enter cheque number", Toast.LENGTH_SHORT).show();
                    } else if (bi.chequeRemarks.getText().toString().isEmpty()) {
                        Toast.makeText(getActivity(), "Please enter remarks", Toast.LENGTH_SHORT).show();
                    } else {
                        if (bi.chequeNo.getText().toString().trim().equals("")) {
                            checkNum = "0";
                        }else{
                            checkNum = bi.chequeNo.getText().toString().trim();
                        }

                        invoice.add(new PostPaymentModel.Invoice(Integer.parseInt(entry), paymentCode));
                        Log.e("check", checkNum);
                        PostPaymentModel postPaymentModel = new PostPaymentModel(bi.chequeAmount.getText().toString().trim(), bankCode,
                                Integer.parseInt(checkNum), customerCode, invoice, "", paymentType, bi.chequeRemarks.getText().toString().trim());
                        doPayment(postPaymentModel);
                    }
                }
            }
        });
    }

    public void hideKeyboard() {
        View view = getActivity().getCurrentFocus();
        if (view != null) {
            InputMethodManager imm = (InputMethodManager) getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
            if (imm != null) {
                imm.hideSoftInputFromWindow(view.getWindowToken(), 0);
            }
        }
    }

    @Override
    public void onStart() {
        super.onStart();
        bottomSheetBehavior.setState(BottomSheetBehavior.STATE_COLLAPSED);
    }

    private void hideAppBar(View view) {
        ViewGroup.LayoutParams params = view.getLayoutParams();
        params.height = 0;
        view.setLayoutParams(params);

    }

    private void showView(View view, int size) {
        ViewGroup.LayoutParams params = view.getLayoutParams();
        params.height = size;
        view.setLayoutParams(params);
    }

    private int getActionBarSize() {
        final TypedArray array = getContext().getTheme().obtainStyledAttributes(new int[]{android.R.attr.actionBarSize});
        int size = (int) array.getDimension(0, 0);
        return size;
    }

    private void getPaymentTerms() {
        apiService.getPaymentTerms().enqueue(new Callback<PaymentTermsModel>() {
            @Override
            public void onResponse(@NotNull Call<PaymentTermsModel> call, @NotNull Response<PaymentTermsModel> response) {
                if (response.isSuccessful()) {
                    if (response.body() != null) {
                        if (response.body().getStatusCode() == 0) {
                            List<PaymentTermsModel.ResponseObject> list = response.body().getResponseObject();
                            for (int i = 0; i < list.size(); i++) {
                                responseObjects.add(new PaymentTermsModel.ResponseObject(list.get(i).getGroupNum(), list.get(i).getPymntGroup()));
                            }
                          //  setUpTerms(responseObjects);

                        } else {
                            Toast.makeText(getActivity(), response.body().getStatusMessage(), Toast.LENGTH_SHORT).show();
                        }
                    }
                } else {
                    Toast.makeText(getActivity(), response.message(), Toast.LENGTH_SHORT).show();
                }
            }

            @Override
            public void onFailure(@NotNull Call<PaymentTermsModel> call, @NotNull Throwable t) {
                Toast.makeText(getActivity(), t.getMessage(), Toast.LENGTH_SHORT).show();
            }
        });
    }

   /* private void setUpTerms(List<PaymentTermsModel.ResponseObject> paymentTerms) {
        bi.termsSp.setTitle("Payment Terms");
        PaymentTermsAdapter adapter = new PaymentTermsAdapter(getActivity(), paymentTerms);
        bi.termsSp.setAdapter(adapter);

        bi.termsSp.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                paymentGroupCode = paymentTerms.get(position).getGroupNum();
                paymentGroupName = paymentTerms.get(position).getPymntGroup();

            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {

            }
        });
    }*/

    private void getBanks() {
        apiService.getBanks().enqueue(new Callback<BanksModel>() {
            @Override
            public void onResponse(@NotNull Call<BanksModel> call, @NotNull Response<BanksModel> response) {
                if (response.isSuccessful()) {
                    if (response.body() != null) {
                        if (response.body().getStatusCode() == 0) {
                            List<BanksModel.ResponseObject> list = response.body().getResponseObject();
                            for (int i = 0; i < list.size(); i++) {
                                banks.add(new BanksModel.ResponseObject(list.get(i).getBankCode(), list.get(i).getBankName()));
                            }
                            setUpBanks(banks);

                        } else {
                            Toast.makeText(getActivity(), response.body().getStatusMessage(), Toast.LENGTH_SHORT).show();
                        }
                    }
                } else {
                    Toast.makeText(getActivity(), response.message(), Toast.LENGTH_SHORT).show();
                }
            }

            @Override
            public void onFailure(@NotNull Call<BanksModel> call, @NotNull Throwable t) {
                Toast.makeText(getActivity(), t.getMessage(), Toast.LENGTH_SHORT).show();
            }
        });
    }

    private void setUpBanks(List<BanksModel.ResponseObject> banks) {
        bi.bankSp.setTitle("Payment Terms");
        BanksAdapter adapter = new BanksAdapter(getActivity(), banks);
        bi.bankSp.setAdapter(adapter);

        bi.bankSp.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                bankCode = banks.get(position).getBankCode();
                banksName = banks.get(position).getBankName();
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {

            }
        });
    }

    private void doPayment(PostPaymentModel postPaymentModel) {
        ProgressDialog progressDialog = CommonUtils.showLoadingDialog(getActivity());
        progressDialog.show();
        apiService.doPayment(postPaymentModel).enqueue(new Callback<BasePostResponse>() {
            @Override
            public void onResponse(@NotNull Call<BasePostResponse> call, @NotNull Response<BasePostResponse> response) {
                progressDialog.dismiss();
                if (response.isSuccessful()) {
                    if (response.body() != null) {
                        if (response.body().getStatusCode() == 0) {
                            Toast.makeText(getActivity(), response.body().getStatusMessage(), Toast.LENGTH_SHORT).show();
                            final Handler handler = new Handler(Looper.getMainLooper());
                            handler.postDelayed(() -> {
                                        bottomSheetBehavior.setHideable(true);
                                        bottomSheetBehavior.setState(BottomSheetBehavior.STATE_HIDDEN);
                                    }
                                    , 2000);
                        } else {
                            Toast.makeText(getActivity(), response.body().getStatusMessage(), Toast.LENGTH_SHORT).show();
                        }
                    }
                } else {
                    Toast.makeText(getActivity(), response.message(), Toast.LENGTH_SHORT).show();
                }
            }

            @Override
            public void onFailure(@NotNull Call<BasePostResponse> call, @NotNull Throwable t) {
                progressDialog.dismiss();
                Toast.makeText(getActivity(), t.getMessage(), Toast.LENGTH_SHORT).show();
            }
        });
    }
}
