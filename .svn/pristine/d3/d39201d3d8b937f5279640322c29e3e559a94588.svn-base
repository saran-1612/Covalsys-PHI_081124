package com.cbs.snb.ui.inventory;

import android.os.Bundle;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.DefaultItemAnimator;
import androidx.recyclerview.widget.LinearLayoutManager;

import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;

import com.cbs.snb.BR;
import com.cbs.snb.R;
import com.cbs.snb.data.network.models.get.InventoryModel;
import com.cbs.snb.data.network.models.get.WarehouseModel;
import com.cbs.snb.databinding.FragmentInventoryBinding;
import com.cbs.snb.ui.base.BaseFragment;

import java.util.List;

/**
 * A simple {@link Fragment} subclass.
 * Use the {@link InventoryFragment#newInstance} factory method to
 * create an instance of this fragment.
 */
public class InventoryFragment extends BaseFragment<InventoryViewModel, FragmentInventoryBinding> implements InventoryNavigator {

    public static InventoryFragment newInstance() {
        InventoryFragment fragment = new InventoryFragment();
        Bundle args = new Bundle();
        fragment.setArguments(args);
        return fragment;
    }

    private String wCode,wName;

    @Override
    public int getBindingVariable() {
        return BR.inventoryViewModel;
    }

    @Override
    public int getLayoutRes() {
        return R.layout.fragment_inventory;
    }

    @Override
    protected Class<InventoryViewModel> getViewModel() {
        return InventoryViewModel.class;
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
    }

    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, Bundle savedInstanceState) {
        super.onCreateView(inflater, container, savedInstanceState);
        setHasOptionsMenu(true);
        viewModel.setNavigator(this);
        setUp();
        return dataBinding.getRoot();
    }

    public void setUp(){

        isLoading();

        getWareHouse();

        getInventory(wCode);

    }

    private void isLoading(){
        viewModel.isLoading().observe(getViewLifecycleOwner(),aBoolean -> {
            if (aBoolean){
                showLoading();
            }else{
                hideLoading();
            }
        });
    }

    public void getWareHouse(){
        viewModel.getWareHouseLiveData().observe(getViewLifecycleOwner(),warehouseModelResource -> {
            switch (warehouseModelResource.status){
                case LOADING:
                    showLoading();
                    break;
                case SUCCESS:
                    hideLoading();
                    setData(warehouseModelResource.data.getResponseObject());
                    break;
                case ERROR:
                    hideLoading();
                    showSnackBar(warehouseModelResource.getMessage(),getResources().getColor(R.color.red));
                    break;
                default:
                    break;
            }
        });
    }


    private void setData(List<WarehouseModel.ResponseObject> whs){
        dataBinding.spWarehouse.setTitle("Warehouse");
        WareHouseAdapter adapter = new WareHouseAdapter(getActivity(), whs);
        dataBinding.spWarehouse.setAdapter(adapter);

        dataBinding.spWarehouse.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                wCode = whs.get(position).getWhsCode();
                wName = whs.get(position).getWhsName();
                getInventory(wCode);
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {

            }
        });
    }

    private void getInventory(String wCode){
        viewModel.getInventory(wCode).observe(getViewLifecycleOwner(),inventoryModelResource -> {
            switch (inventoryModelResource.status){
                case LOADING:
                    showLoading();
                    break;
                case SUCCESS:
                    hideLoading();
                    setInventory(inventoryModelResource.data.getResponseObject());
                    break;
                case ERROR:
                    hideLoading();
                    showSnackBar(inventoryModelResource.getMessage(),getResources().getColor(R.color.red));
                    break;
                default:
                    break;
            }
        });
    }

   /* private void getInventory(){
        viewModel.getInventory().observe(getViewLifecycleOwner(),inventoryModelResource -> {
            switch (inventoryModelResource.status){
                case LOADING:
                    showLoading();
                    break;
                case SUCCESS:
                    hideLoading();
                    setInventory(inventoryModelResource.data.getResponseObject());
                    break;
                case ERROR:
                    hideLoading();
                    showSnackBar(inventoryModelResource.getMessage(),getResources().getColor(R.color.red));
                    break;
                default:
                    break;
            }
        });
    }*/


    private void setInventory(List<InventoryModel.ResponseObject> list){
        LinearLayoutManager linearLayoutManager = new LinearLayoutManager(getActivity());
        linearLayoutManager.setOrientation(LinearLayoutManager.VERTICAL);
        dataBinding.inventoryRecyclerView.setLayoutManager(linearLayoutManager);
        dataBinding.inventoryRecyclerView.setItemAnimator(new DefaultItemAnimator());
        dataBinding.inventoryRecyclerView.setAdapter(new InventoryAdapter(list,getActivity()));
    }

    @Override
    public void onPrepareOptionsMenu(@NonNull Menu menu) {
        MenuItem item = menu.findItem(R.id.action_cart);

        if (item != null)
            item.setVisible(false);

    }
}