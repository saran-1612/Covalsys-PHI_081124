package com.cbs.snb.ui.orders;

import android.app.DatePickerDialog;
import android.content.Context;

import androidx.lifecycle.LiveData;
import androidx.lifecycle.MutableLiveData;

import com.cbs.snb.R;
import com.cbs.snb.data.database.AppDatabase;
import com.cbs.snb.data.network.ApiService;
import com.cbs.snb.data.network.Resource;
import com.cbs.snb.data.network.models.get.MyOrdersModel;
import com.cbs.snb.data.network.models.get.ProductsListModel;
import com.cbs.snb.data.network.repository.Repository;
import com.cbs.snb.data.preferences.PreferenceHelper;
import com.cbs.snb.ui.base.BaseViewModel;
import com.cbs.snb.utils.DateUtils;
import com.cbs.snb.utils.rx.SchedulerProvider;

import java.util.Calendar;

import javax.inject.Inject;

/**
 * Created by Venkatesh on 19-08-2020.
 */
public class MyOrdersViewModel extends BaseViewModel<MyOrdersNavigator> {

    public MutableLiveData<Resource<MyOrdersModel>> myOrders;
    public MutableLiveData<Boolean> progressBar;
    public MutableLiveData<String> fromDate;
    public MutableLiveData<String> toDate;


    @Inject
    public MyOrdersViewModel(Repository repository, SchedulerProvider schedulerProvider,
                             PreferenceHelper preferenceHelper, AppDatabase database, ApiService service) {
        super(repository, schedulerProvider, preferenceHelper, database, service);
        myOrders = new MutableLiveData<>();
        progressBar = new MutableLiveData<>();
        fromDate = new MutableLiveData<>();
        toDate = new MutableLiveData<>();
        //init();
    }

    public void setFromDate(String date) {
        fromDate.setValue(date);
    }

    public void setToDate(String date) {
        toDate.setValue(date);
        init();
    }

    private void init() {
        myOrders();
    }

    public LiveData<Resource<MyOrdersModel>> getMyOrders() {
        return myOrders;
    }

    private void myOrders() {
        progressBar.setValue(true);
        getCompositeDisposable().add(getApiService()
                .getOrders(getPreferenceHelper().getSalesEmpCode(), fromDate.getValue(), toDate.getValue())
                .subscribeOn(getSchedulerProvider().io())
                .observeOn(getSchedulerProvider().ui())
                .subscribe(ordersModel -> {
                    progressBar.setValue(false);
                    if (ordersModel.getStatusCode() == 0) {
                        myOrders.postValue(Resource.success(ordersModel));
                    } else {
                        myOrders.postValue(Resource.error(ordersModel.getStatusMessage(), null));
                    }
                }, throwable -> {
                    progressBar.setValue(false);
                    myOrders.postValue(Resource.error(throwable.toString(), null));
                }));
    }


    public void fromDate(Context context) {
        Calendar myCalendar = Calendar.getInstance();
        DatePickerDialog.OnDateSetListener date = (view, year, month, dayOfMonth) -> {
            myCalendar.set(Calendar.YEAR, year);
            myCalendar.set(Calendar.MONTH, month);
            myCalendar.set(Calendar.DAY_OF_MONTH, dayOfMonth);
            getNavigator().fromDate(DateUtils.dateFormat().format(myCalendar.getTime()));
        };

        DatePickerDialog datePicker = new DatePickerDialog(context, R.style.DialogTheme, date, myCalendar
                .get(Calendar.YEAR), myCalendar.get(Calendar.MONTH),
                myCalendar.get(Calendar.DAY_OF_MONTH));
        // datePicker.getDatePicker().setMinDate(System.currentTimeMillis());
        datePicker.show();
    }

    public void toDate(Context context) {
        Calendar myCalendar = Calendar.getInstance();
        DatePickerDialog.OnDateSetListener date = (view, year, month, dayOfMonth) -> {
            myCalendar.set(Calendar.YEAR, year);
            myCalendar.set(Calendar.MONTH, month);
            myCalendar.set(Calendar.DAY_OF_MONTH, dayOfMonth);
            getNavigator().toDate(DateUtils.dateFormat().format(myCalendar.getTime()));
        };

        DatePickerDialog datePicker = new DatePickerDialog(context, R.style.DialogTheme, date, myCalendar
                .get(Calendar.YEAR), myCalendar.get(Calendar.MONTH),
                myCalendar.get(Calendar.DAY_OF_MONTH));
        // datePicker.getDatePicker().setMinDate(System.currentTimeMillis());
        datePicker.show();
    }

}
