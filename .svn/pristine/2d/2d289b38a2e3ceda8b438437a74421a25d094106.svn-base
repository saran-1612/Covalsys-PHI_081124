// Generated by Dagger (https://google.github.io/dagger).
package com.cbs.snb.di.module;

import com.cbs.snb.data.network.ApiService;
import com.cbs.snb.data.network.repository.Repository;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class AppModule_ProvidesRepositoryFactory implements Factory<Repository> {
  private final AppModule module;

  private final Provider<ApiService> apiServiceProvider;

  public AppModule_ProvidesRepositoryFactory(
      AppModule module, Provider<ApiService> apiServiceProvider) {
    this.module = module;
    this.apiServiceProvider = apiServiceProvider;
  }

  @Override
  public Repository get() {
    return providesRepository(module, apiServiceProvider.get());
  }

  public static AppModule_ProvidesRepositoryFactory create(
      AppModule module, Provider<ApiService> apiServiceProvider) {
    return new AppModule_ProvidesRepositoryFactory(module, apiServiceProvider);
  }

  public static Repository providesRepository(AppModule instance, ApiService apiService) {
    return Preconditions.checkNotNull(
        instance.providesRepository(apiService),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
