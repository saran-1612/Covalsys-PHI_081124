package com.cbs.snb.ui.customerhistory.addcustomer;

import androidx.lifecycle.LiveData;
import androidx.lifecycle.MutableLiveData;

import com.cbs.snb.data.database.AppDatabase;
import com.cbs.snb.data.network.ApiService;
import com.cbs.snb.data.network.Resource;
import com.cbs.snb.data.network.models.get.CustomerDetailsModel;
import com.cbs.snb.data.network.models.get.CustomerGroupModel;
import com.cbs.snb.data.network.models.get.GstTypeModel;
import com.cbs.snb.data.network.models.get.PaymentTermsModel;
import com.cbs.snb.data.network.models.get.StateModel;
import com.cbs.snb.data.network.models.post.BasePostResponse;
import com.cbs.snb.data.network.models.post.CustomerCreationModel;
import com.cbs.snb.data.network.repository.Repository;
import com.cbs.snb.data.preferences.PreferenceHelper;
import com.cbs.snb.ui.base.BaseViewModel;
import com.cbs.snb.utils.rx.SchedulerProvider;

import javax.inject.Inject;

import okhttp3.MultipartBody;

/**
 * Created by Venkatesh on 15-07-2020.
 */
public class AddCustomerViewModel extends BaseViewModel<AddCustomerNavigator> {

    public MutableLiveData<Resource<CustomerGroupModel>> customerModel;
    public MutableLiveData<Resource<PaymentTermsModel>> paymentTerms;
    public MutableLiveData<Resource<GstTypeModel>> gstType;
    public MutableLiveData<Resource<StateModel>> states;
    public LiveData<Resource<CustomerCreationModel>> customerCreation;
    public MutableLiveData<Boolean> progressBar;
    public MutableLiveData<Resource<CustomerDetailsModel>> customerDetailsModel;

    @Inject
    public AddCustomerViewModel(Repository repository, SchedulerProvider schedulerProvider,
                                PreferenceHelper preferenceHelper, AppDatabase database, ApiService service) {
        super(repository, schedulerProvider, preferenceHelper, database, service);
        progressBar = new MutableLiveData<>();
        customerModel = new MutableLiveData<>();
        paymentTerms = new MutableLiveData<>();
        gstType = new MutableLiveData<>();
        states = new MutableLiveData<>();
        customerDetailsModel = new MutableLiveData<>();
        progressBar = new MutableLiveData<>();
        init();
    }

    private void init(){
        getCustomersDetails();
        getCustomerGroup();
        getPaymentTermsApi();
        getGstTypeApi();
        getStatesApi();
    }


    public LiveData<Resource<CustomerGroupModel>> getCustomerCode(){
        return customerModel;
    }

    public LiveData<Resource<PaymentTermsModel>> getPaymentTerms(){
        return paymentTerms;
    }

    public LiveData<Resource<GstTypeModel>> getGstType(){
        return gstType;
    }

    public LiveData<Resource<CustomerDetailsModel>> getCustomers() {
        return customerDetailsModel;
    }

    public LiveData<Resource<StateModel>> getState(){
        return states;
    }

    public LiveData<Boolean> isLoading(){
        return getRepository().getIsLoading();
    }

    public LiveData<Resource<BasePostResponse>> addCustomer(CustomerCreationModel customerCreationModel, MultipartBody.Part mImageFile){
        return getRepository().addCustomers(customerCreationModel,mImageFile);
    }

    public String empCode(){
        return getPreferenceHelper().getSalesEmpCode();
    }


    private void getCustomersDetails() {
        progressBar.setValue(true);
        getCompositeDisposable().add(getApiService()
                .getCustomer("C", getPreferenceHelper().getSalesEmpCode(),getPreferenceHelper().getEmpTypeCode())
                .subscribeOn(getSchedulerProvider().io())
                .observeOn(getSchedulerProvider().ui())
                .subscribe(customerDetailsModel1 -> {
                    progressBar.setValue(false);
                    if (customerDetailsModel1.getStatusCode() == 0){
                        customerDetailsModel.postValue(Resource.success(customerDetailsModel1));
                    }else {
                        customerDetailsModel.postValue(Resource.error(customerDetailsModel1.getStatusMessage(),null));
                    }
                }, throwable -> {
                    progressBar.setValue(false);
                    customerDetailsModel.postValue(Resource.error(throwable.toString(),null));
                }));
    }


    private void getCustomerGroup() {
        progressBar.setValue(true);
        getCompositeDisposable().add(getApiService()
                .getCustomerGroup()
                .subscribeOn(getSchedulerProvider().io())
                .observeOn(getSchedulerProvider().ui())
                .subscribe(customerGroupModel -> {
                    progressBar.setValue(false);
                    if (customerGroupModel.getStatusCode() == 0) {
                        customerModel.postValue(Resource.success(customerGroupModel));
                    } else {
                        customerModel.postValue(Resource.error(customerGroupModel.getStatusMessage(), null));
                    }
                }, throwable -> {
                    progressBar.setValue(false);
                    customerModel.postValue(Resource.error(throwable.toString(), null));
                }));
    }

    private void getPaymentTermsApi() {
        progressBar.setValue(true);
        getCompositeDisposable().add(getApiService()
                .getPaymentTerms()
                .subscribeOn(getSchedulerProvider().io())
                .observeOn(getSchedulerProvider().ui())
                .subscribe(paymentTermsModel -> {
                    progressBar.setValue(false);
                    if (paymentTermsModel.getStatusCode() == 0) {
                        paymentTerms.postValue(Resource.success(paymentTermsModel));
                    } else {
                        paymentTerms.postValue(Resource.error(paymentTermsModel.getStatusMessage(), null));
                    }
                }, throwable -> {
                    progressBar.setValue(false);
                    paymentTerms.postValue(Resource.error(throwable.toString(), null));
                }));
    }

    private void getGstTypeApi() {
        progressBar.setValue(true);
        getCompositeDisposable().add(getApiService()
                .getGstType()
                .subscribeOn(getSchedulerProvider().io())
                .observeOn(getSchedulerProvider().ui())
                .subscribe(gstTypeModel -> {
                    progressBar.setValue(false);
                    if (gstTypeModel.getStatusCode() == 0) {
                        gstType.postValue(Resource.success(gstTypeModel));
                    } else {
                        gstType.postValue(Resource.error(gstTypeModel.getStatusMessage(), null));
                    }
                }, throwable -> {
                    progressBar.setValue(false);
                    gstType.postValue(Resource.error(throwable.toString(), null));
                }));
    }

    private void getStatesApi() {
        progressBar.setValue(true);
        getCompositeDisposable().add(getApiService()
                .getState()
                .subscribeOn(getSchedulerProvider().io())
                .observeOn(getSchedulerProvider().ui())
                .subscribe(stateModel -> {
                    progressBar.setValue(false);
                    if (stateModel.getStatusCode() == 0) {
                        states.postValue(Resource.success(stateModel));
                    } else {
                        states.postValue(Resource.error(stateModel.getStatusMessage(), null));
                    }
                }, throwable -> {
                    progressBar.setValue(false);
                    states.postValue(Resource.error(throwable.toString(), null));
                }));
    }

}
