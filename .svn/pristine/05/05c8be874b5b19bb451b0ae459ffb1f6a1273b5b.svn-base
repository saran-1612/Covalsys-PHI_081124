package com.cbs.snb.ui.activity;

import android.Manifest;
import android.annotation.SuppressLint;
import android.annotation.TargetApi;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.annotation.RequiresApi;
import androidx.core.app.ActivityCompat;
import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentManager;
import androidx.fragment.app.FragmentTransaction;
import androidx.navigation.Navigation;

import android.os.Handler;
import android.os.Looper;
import android.provider.MediaStore;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.RadioGroup;

import com.bumptech.glide.Glide;
import com.cbs.snb.BR;
import com.cbs.snb.R;
import com.cbs.snb.data.network.models.get.ActivityTypeModel;
import com.cbs.snb.data.network.models.get.CustomerDetailsModel;
import com.cbs.snb.ui.home.HomeFragment;
import com.cbs.snb.service.LocationService;
import com.cbs.snb.data.network.models.post.CreateActivityModel;
import com.cbs.snb.databinding.FragmentCreateActivityBinding;
import com.cbs.snb.ui.base.BaseFragment;
import com.cbs.snb.ui.leads.LeadFragment;
import com.cbs.snb.utils.DateUtils;
import com.cbs.snb.utils.ImageInputHelper;
import com.cbs.snb.utils.PhotoFullPopupWindow;
import com.cbs.snb.utils.RealPathUtils;
import com.cbs.snb.utils.getAddressByLatLng;
import com.google.android.material.bottomsheet.BottomSheetDialog;
import com.karumi.dexter.Dexter;
import com.karumi.dexter.MultiplePermissionsReport;
import com.karumi.dexter.PermissionToken;
import com.karumi.dexter.listener.PermissionRequest;
import com.karumi.dexter.listener.multi.MultiplePermissionsListener;

import org.jetbrains.annotations.NotNull;

import java.io.File;
import java.io.IOException;
import java.util.List;

import javax.inject.Inject;

import okhttp3.MultipartBody;
import okhttp3.RequestBody;

import static android.Manifest.permission.CAMERA;
import static android.Manifest.permission.READ_EXTERNAL_STORAGE;
import static android.Manifest.permission.WRITE_EXTERNAL_STORAGE;
import static com.cbs.snb.utils.Constants.PERMISSION_LOCATION_REQUEST_CODE;

/**
 * A simple {@link Fragment} subclass.
 * Use the {@link CreateActivityFragment#newInstance} factory method to
 * create an instance of this fragment.
 */
public class CreateActivityFragment extends BaseFragment<CreateActivityViewModel, FragmentCreateActivityBinding>
        implements CreateActivityNavigator, ImageInputHelper.ImageActionListener {

    @Inject
    LocationService locationService;

    private String dealerName, typeName, typeCode, geoLocation, priorityName, priorityCode;
    private String dealerCode;
    private String customerType = "P";
    private double latitude, longitude;
    Drawable mWaveDrawable;
    private static CreateActivityFragment instance = null;
    private ImageInputHelper mImageInputHelper;
    private String path;

    public static CreateActivityFragment newInstance() {
        CreateActivityFragment fragment = new CreateActivityFragment();
        Bundle args = new Bundle();
        fragment.setArguments(args);
        return fragment;
    }

    @Override
    public int getBindingVariable() {
        return BR.createActivityViewModel;
    }

    @Override
    public int getLayoutRes() {
        return R.layout.fragment_create_activity;
    }

    @Override
    protected Class<CreateActivityViewModel> getViewModel() {
        return CreateActivityViewModel.class;
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        instance = this;
    }

    @Override
    public View onCreateView(@NotNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        super.onCreateView(inflater, container, savedInstanceState);
        // Inflate the layout for this fragment
        setHasOptionsMenu(true);
        viewModel.setNavigator(this);
        setUp();
        return dataBinding.getRoot();
    }

    public void setUp() {
        mImageInputHelper = new ImageInputHelper(instance);
        mImageInputHelper.setImageActionListener(this);

        viewModel.setContext(getActivity());

        dataBinding.etDate.setText(DateUtils.currentDate());
        dataBinding.etTime.setText(DateUtils.currentTime());

        showPermissionDialog();

        dataBinding.etMeetingLocation.setOnClickListener(v -> getLocation());

        dataBinding.radioGroup.setOnCheckedChangeListener((RadioGroup.OnCheckedChangeListener) (group, checkedId) -> {
            RadioButton rb = (RadioButton) requireActivity().findViewById(checkedId);
            if (rb.getText().toString().equalsIgnoreCase("Primary")) {
                customerType = "P";
                getObservables();
            } else {
                customerType = "S";
                getObservables();
            }
        });


        getLocation();

        getObservables();

        dataBinding.addImage.setOnClickListener(v -> pickImage());

        //getPostObservables();

        dataBinding.addActivityBtn.setOnClickListener(v -> {
            if (typeName == null) {
                showSnackBar("Please select activity type");
            } else if (dataBinding.etContactPerson.getText().toString().isEmpty()) {
                showSnackBar("Please enter contact person");
            } else if (dataBinding.etMobileNo.getText().toString().isEmpty()) {
                showSnackBar("Please enter mobile number");
            } else if (!dataBinding.etNextVisitDate.getText().toString().isEmpty()) {
                if (dataBinding.etNextVisitTime.getText().toString().isEmpty()) {
                    showSnackBar("Please select next visit time");
                } else if (priorityName == null) {
                    showSnackBar("Please select priority");
                } else {
                    hideKeyboard();
                    getPostObservables();
                }
            } else if (priorityName == null) {
                showSnackBar("Please select priority");
            } else {
                hideKeyboard();
                getPostObservables();
            }
        });

    }


    private void getLocation() {
        latitude = locationService.getLatitude();
        longitude = locationService.getLongitude();
        geoLocation = getAddressByLatLng.getAddress(locationService.getLatitude(), locationService.getLongitude(), requireActivity());
        dataBinding.etMeetingLocation.setText(geoLocation);
    }

    private void showPermissionDialog() {
        if (!LocationService.checkPermission(requireActivity())) {
            ActivityCompat.requestPermissions(requireActivity(),
                    new String[]{Manifest.permission.ACCESS_COARSE_LOCATION, Manifest.permission.ACCESS_FINE_LOCATION},
                    PERMISSION_LOCATION_REQUEST_CODE);
        }
    }

    private void getObservables() {

        viewModel.setType(customerType);

        viewModel.progressBar.observe(getViewLifecycleOwner(), aBoolean -> {
            if (aBoolean) {
                showLoading();
            } else {
                hideLoading();
            }
        });

        viewModel.getPCustomers().observe(getViewLifecycleOwner(), customerDetailsModelResource -> {
            switch (customerDetailsModelResource.status) {
                case LOADING:
                    showLoading();
                    break;
                case SUCCESS:
                    hideLoading();
                    assert customerDetailsModelResource.data != null;
                    setPData(customerDetailsModelResource.data.getResponseObject());
                    break;
                case ERROR:
                    hideLoading();
                    showSnackBar(customerDetailsModelResource.getMessage());
                    break;
                default:
                    break;
            }
        });

        viewModel.getSCustomers().observe(getViewLifecycleOwner(), customerDetailsModelResource -> {
            switch (customerDetailsModelResource.status) {
                case LOADING:
                    showLoading();
                    break;
                case SUCCESS:
                    hideLoading();
                    assert customerDetailsModelResource.data != null;
                    setSData(customerDetailsModelResource.data.getResponseObject());
                    break;
                case ERROR:
                    hideLoading();
                    showSnackBar(customerDetailsModelResource.getMessage());
                    break;
                default:
                    break;
            }
        });


        viewModel.getType().observe(getViewLifecycleOwner(), this::setType);

        viewModel.getPriorityData().observe(getViewLifecycleOwner(), this::setPriority);


        viewModel.nextDate().observe(getViewLifecycleOwner(), s -> {
            dataBinding.etNextVisitDate.setText(s);
        });

        viewModel.nextTime().observe(getViewLifecycleOwner(), s -> {
            dataBinding.etNextVisitTime.setText(s);
        });


    }

    private void setPData(List<CustomerDetailsModel.ResponseObject> responseObjects) {
        dataBinding.dealerSp.setTitle("Dealers");
        DealersAdapter adapter = new DealersAdapter(requireActivity(), responseObjects);
        dataBinding.dealerSp.setAdapter(adapter);

        dataBinding.dealerSp.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                dealerCode = responseObjects.get(position).getCardCode();
                dealerName = responseObjects.get(position).getCardName();
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {

            }
        });

    }


    private void setSData(List<CustomerDetailsModel.ResponseObject> responseObjects) {
        dataBinding.dealerSp.setTitle("Dealers");
        DealersAdapter adapter = new DealersAdapter(requireActivity(), responseObjects);
        dataBinding.dealerSp.setAdapter(adapter);

        dataBinding.dealerSp.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                dealerCode = responseObjects.get(position).getCardCode();
                dealerName = responseObjects.get(position).getCardName();
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {

            }
        });

    }

    private void setType(List<String> type) {
        ArrayAdapter<String> sts = new ArrayAdapter<String>(getActivity(), android.R.layout.simple_spinner_item, type);
        sts.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        dataBinding.spType.setAdapter(sts);

        dataBinding.spType.setOnSpinnerItemSelectedListener((parent, view, position, id) -> {
            typeName = dataBinding.spType.getSelectedItem().toString();
        });

       /* dataBinding.typeSp.setTitle("Type");
        TypeAdapter adapter = new TypeAdapter(requireActivity(), type);
        dataBinding.typeSp.setAdapter(adapter);

        dataBinding.typeSp.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                typeCode = type.get(position).getCode();
                typeName = type.get(position).getName();

            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {

            }
        });*/
    }


    private void setPriority(List<String> type) {
        ArrayAdapter<String> sts = new ArrayAdapter<String>(getActivity(), android.R.layout.simple_spinner_item, type);
        sts.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        dataBinding.spPriority.setAdapter(sts);

        dataBinding.spPriority.setOnSpinnerItemSelectedListener((parent, view, position, id) -> {
            priorityName = dataBinding.spPriority.getSelectedItem().toString();
        });

    }

    private void getPostObservables() {

        MultipartBody.Part mImageFile = null;

        if (path != null) {
            File file = new File(path);
            RequestBody requestBody = RequestBody.create(file, okhttp3.MediaType.parse("multipart/form-data"));
            mImageFile = MultipartBody.Part.createFormData("image", file.getName(), requestBody);
        }

        if (typeName.equalsIgnoreCase("Phone Call")) {
            typeCode = "P";
        } else if (typeName.equalsIgnoreCase("Meeting")) {
            typeCode = "M";
        } else if (typeName.equalsIgnoreCase("Task")) {
            typeCode = "T";
        } else if (typeName.equalsIgnoreCase("Note")) {
            typeCode = "N";
        } else if (typeName.equalsIgnoreCase("Campaign")) {
            typeCode = "C";
        } else {
            typeCode = "O";
        }


        if (priorityName.equalsIgnoreCase("High")) {
            priorityCode = "H";
        } else if (priorityName.equalsIgnoreCase("Normal")) {
            priorityCode = "N";
        } else {
            priorityCode = "L";
        }

        CreateActivityModel model = new CreateActivityModel(customerType, dealerCode, typeCode, DateUtils.convertDateFormat10(dataBinding.etDate.getText().toString()),
                dataBinding.etTime.getText().toString(), String.valueOf(latitude), String.valueOf(longitude), geoLocation, dataBinding.etContactPerson.getText().toString(),
                dataBinding.etMobileNo.getText().toString(), dataBinding.etEmailId.getText().toString(),
                DateUtils.convertDateFormat10(dataBinding.etNextVisitDate.getText().toString()), dataBinding.etNextVisitTime.getText().toString(),
                priorityCode, DateUtils.currentTime(), dataBinding.etRemarksCode.getText().toString());


        viewModel.isLoading().observe(getViewLifecycleOwner(), aBoolean -> {
            if (aBoolean) {
                showLoading();
            } else {
                hideLoading();
            }
        });

        viewModel.addActivity(model, mImageFile).observe(getViewLifecycleOwner(), basePostResponseResource -> {
            switch (basePostResponseResource.status) {
                case LOADING:
                    showLoading();
                    break;
                case SUCCESS:
                    hideLoading();
                    showSnackBar("Success");
                    refresh();
                    break;
                case ERROR:
                    hideLoading();
                    showSnackBar(basePostResponseResource.getMessage());
                    break;
                default:
                    break;
            }
        });
    }


    public void addCustomerScreen() {
        LeadFragment fragment = new LeadFragment();
        Bundle bundle = new Bundle();
        bundle.putInt("code", 1);
        fragment.setArguments(bundle);
        FragmentManager fragmentManager = getChildFragmentManager();
        FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();
        fragmentTransaction.replace(R.id.nav_host_fragment, fragment);
        fragmentTransaction.addToBackStack("Leads");
        fragmentTransaction.commit();
        requireActivity().overridePendingTransition(R.anim.slide_out_to_left, R.anim.slide_out_to_right);

    }

    public void pickImage() {
        BottomSheetDialog mBottomSheetDialog = new BottomSheetDialog(requireActivity());
        View sheetView = requireActivity().getLayoutInflater().inflate(R.layout.layout_take_images, null);
        mBottomSheetDialog.setContentView(sheetView);
        mBottomSheetDialog.show();

        LinearLayout camera = sheetView.findViewById(R.id.take_photo);
        LinearLayout gallery = sheetView.findViewById(R.id.pick_gallery);

        camera.setOnClickListener(v -> {
            if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
                mImageInputHelper.takePhotoWithCamera();
            } else {
                initCameraPermission();
            }
            mBottomSheetDialog.dismiss();
        });

        gallery.setOnClickListener(v -> {
            if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
                mImageInputHelper.selectImageFromGallery();
            } else {
                initGalleryPermission();
            }
            mBottomSheetDialog.dismiss();
        });
    }

    @TargetApi(Build.VERSION_CODES.M)
    private void initCameraPermission() {
        Dexter.withContext(requireContext())
                .withPermissions(CAMERA, WRITE_EXTERNAL_STORAGE)
                .withListener(new MultiplePermissionsListener() {
                    @Override
                    public void onPermissionsChecked(MultiplePermissionsReport report) {
                        if (report.areAllPermissionsGranted()) {
                            mImageInputHelper.takePhotoWithCamera();
                        }
                    }

                    @Override
                    public void onPermissionRationaleShouldBeShown(List<PermissionRequest> permissions, PermissionToken token) {
                        token.continuePermissionRequest();
                    }
                }).check();
    }

    @TargetApi(Build.VERSION_CODES.M)
    private void initGalleryPermission() {
        Dexter.withContext(requireContext())
                .withPermissions(WRITE_EXTERNAL_STORAGE,
                        READ_EXTERNAL_STORAGE)
                .withListener(new MultiplePermissionsListener() {
                    @Override
                    public void onPermissionsChecked(MultiplePermissionsReport report) {
                        if (report.areAllPermissionsGranted()) {
                            mImageInputHelper.selectImageFromGallery();
                        }
                    }

                    @Override
                    public void onPermissionRationaleShouldBeShown(List<PermissionRequest> permissions, PermissionToken token) {
                        token.continuePermissionRequest();
                    }
                }).check();

    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        mImageInputHelper.onActivityResult(requestCode, resultCode, data);
    }

    @Override
    public void onImageSelectedFromGallery(Uri uri, File imageFile) {
        displayImage(uri);
    }

    @Override
    public void onImageTakenFromCamera(Uri uri, File imageFile) {
        displayImage(uri);
    }

    @Override
    public void onImageCropped(Uri uri, File imageFile) {
        displayImage(uri);
    }

    @RequiresApi(api = Build.VERSION_CODES.KITKAT)
    public void displayImage(Uri uri) {
        Bitmap bitmap = null;
        try {
            bitmap = MediaStore.Images.Media.getBitmap(requireActivity().getContentResolver(), uri);
            path = RealPathUtils.getRealPathFromURI(requireActivity(), bitmap);
            dataBinding.imageView.setClipToOutline(true);
            Glide.with(requireActivity())
                    .load(path)
                    .into(dataBinding.imageView);
            if (!path.equalsIgnoreCase("")) {
                dataBinding.imageView.setOnClickListener(v -> {
                    // Code to show image in full screen:
                    new PhotoFullPopupWindow(requireActivity(), R.layout.popup_photo_full, v, path, null);
                });
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void refresh() {
        final Handler handler = new Handler(Looper.getMainLooper());
        handler.postDelayed(() -> {
            Navigation.findNavController(requireActivity(), R.id.nav_host_fragment).navigate(R.id.action_nav_activity_to_nav_home);
            requireActivity().overridePendingTransition(R.anim.slide_out_to_left, R.anim.slide_out_to_right);
        }, 2000);

    }

}