package com.cbs.snb.ui.payment.adapter;

import android.content.Context;
import android.view.LayoutInflater;
import android.view.ViewGroup;
import android.widget.Filter;
import android.widget.Filterable;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;

import com.cbs.snb.data.network.models.get.PaymentDetailsModel;
import com.cbs.snb.databinding.PaymentOutstandingAdapterLayoutBinding;
import com.cbs.snb.ui.base.BaseViewHolder;

import java.util.ArrayList;
import java.util.List;

/**
 * Created by Venkatesh on 15-07-2020.
 */
public class PaymentOutstandingAdapter extends RecyclerView.Adapter<BaseViewHolder> implements Filterable {

    private List<PaymentDetailsModel.ResponseObject> mInvoiceModels;
    private List<PaymentDetailsModel.ResponseObject> mFilterdInvoiceModels;
    private Context mContext;

    private Callback mCallback;

    public interface Callback {
        void onClick(int position ,PaymentDetailsModel.ResponseObject models);
    }

    public PaymentOutstandingAdapter(List<PaymentDetailsModel.ResponseObject> invoiceModels, Context mContext) {
        this.mInvoiceModels = invoiceModels;
        this.mContext = mContext;
        this.mFilterdInvoiceModels = invoiceModels;
    }

    @NonNull
    @Override
    public BaseViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        PaymentOutstandingAdapterLayoutBinding viewBinding = PaymentOutstandingAdapterLayoutBinding.inflate(
                LayoutInflater.from(parent.getContext()),parent,false);
        return new PaymentViewHolder(viewBinding);
    }

    @Override
    public void onBindViewHolder(@NonNull BaseViewHolder holder, int position) {
        holder.onBind(position);
    }

    @Override
    public int getItemCount() {
        return mFilterdInvoiceModels.size();
    }

    public void addInvoices(List<PaymentDetailsModel.ResponseObject> list) {
        mInvoiceModels.addAll(list);
        notifyDataSetChanged();
    }

    public void clearList() {
        mFilterdInvoiceModels.clear();
    }

    @Override
    public Filter getFilter() {
        return new Filter() {
            @Override
            protected FilterResults performFiltering(CharSequence constraint) {
                String charString = constraint.toString();
                if (charString.isEmpty()) {
                    mFilterdInvoiceModels = mInvoiceModels;
                } else {
                    List<PaymentDetailsModel.ResponseObject> filteredList = new ArrayList<>();
                    for (PaymentDetailsModel.ResponseObject row : mInvoiceModels) {
                        // name match condition. this might differ depending on your requirement
                        // here we are looking for CardName or CardCode match
                        if (row.getCardName().toLowerCase().contains(charString.toLowerCase()) ||
                                row.getCardCode().contains(constraint)) {
                            filteredList.add(row);
                        }
                    }
                    mFilterdInvoiceModels = filteredList;
                }

                FilterResults filterResults = new FilterResults();
                filterResults.values = mFilterdInvoiceModels;
                return filterResults;
            }

            @Override
            protected void publishResults(CharSequence constraint, FilterResults results) {
                mFilterdInvoiceModels = (List<PaymentDetailsModel.ResponseObject>) results.values;
                notifyDataSetChanged();
            }
        };
    }

    public class PaymentViewHolder extends BaseViewHolder {

        PaymentOutstandingAdapterLayoutBinding binding;

        public PaymentViewHolder(@NonNull PaymentOutstandingAdapterLayoutBinding layoutBinding) {
            super(layoutBinding.getRoot());
            this.binding = layoutBinding;
        }

        @Override
        public void onBind(int position) {
            PaymentDetailsModel.ResponseObject model = mFilterdInvoiceModels.get(position);
            binding.invoiceNo.setText(model.getCardName());
            binding.cardCode.setText(model.getCardCode());
            binding.invoiceAmt.setText(String.valueOf("â‚¹ " + model.getOutStandinAmount()));
            binding.paymentGroup.setText(model.getPymntGroup());
            binding.invoiceCardView.setOnClickListener(v -> {
                mCallback.onClick(position,model);

            });
        }
    }

    public void setOnClick(Callback onClick) {
        this.mCallback = onClick;
    }
}
