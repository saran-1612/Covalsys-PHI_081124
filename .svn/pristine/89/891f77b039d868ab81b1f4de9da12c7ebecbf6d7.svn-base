package com.cbs.snb.ui;

import androidx.annotation.NonNull;
import androidx.lifecycle.ViewModel;
import androidx.lifecycle.ViewModelProvider;

import com.cbs.snb.data.database.AppDatabase;
import com.cbs.snb.data.network.ApiService;
import com.cbs.snb.data.network.repository.Repository;
import com.cbs.snb.data.preferences.PreferenceHelper;
import com.cbs.snb.ui.activity.CreateActivityViewModel;
import com.cbs.snb.ui.attendance.UserCheckOutViewModel;
import com.cbs.snb.ui.attendance.checkin.CheckInViewModel;
import com.cbs.snb.ui.cart.CartViewModel;
import com.cbs.snb.ui.changepassword.ChangePasswordViewModel;
import com.cbs.snb.ui.checkout.CheckOutViewModel;
import com.cbs.snb.ui.complaints.ComplaintViewModel;
import com.cbs.snb.ui.customerhistory.addcustomer.AddCustomerViewModel;
import com.cbs.snb.ui.customerhistory.viewcustomer.CustomerHistoryViewModel;
import com.cbs.snb.ui.customers.CustomerViewModel;
import com.cbs.snb.ui.expense.ExpenseViewModel;
import com.cbs.snb.ui.feedback.FeedbackViewModel;
import com.cbs.snb.ui.forgotpassword.ForgotPasswordViewModel;
import com.cbs.snb.ui.home.HomeViewModel;
import com.cbs.snb.ui.inventory.InventoryViewModel;
import com.cbs.snb.ui.orders.orderdetails.OrderItemViewModel;
import com.cbs.snb.ui.pdf_viwer.report_list.ReportListViewModel;
import com.cbs.snb.ui.productlist.ProductsListViewModel;
import com.cbs.snb.ui.productdetails.ProductDetailsViewModel;
import com.cbs.snb.ui.leads.LeadsViewModel;
import com.cbs.snb.ui.leads.address.AddressDetailsViewModel;
import com.cbs.snb.ui.leads.customer.CustomerDetailsViewModel;
import com.cbs.snb.ui.leads.manager.PurchaseManagerViewModel;
import com.cbs.snb.ui.leads.owner.OwnerDetailsViewModel;
import com.cbs.snb.ui.login.LoginViewModel;
import com.cbs.snb.ui.main.MainViewModel;
import com.cbs.snb.ui.notification.NotificationViewModel;
import com.cbs.snb.ui.orders.MyOrdersViewModel;
import com.cbs.snb.ui.payment.PaymentViewModel;
import com.cbs.snb.ui.payment.invoices.InvoiceViewModel;
import com.cbs.snb.ui.products.ProductsViewModel;
import com.cbs.snb.ui.region.RegionViewModel;
import com.cbs.snb.ui.reports.activity.ActivityReportViewModel;
import com.cbs.snb.ui.reports.complaints.ComplaintsReportViewModel;
import com.cbs.snb.ui.reports.customeroutstanding.CustomerOutstandingViewModel;
import com.cbs.snb.ui.reports.expense.ExpenseReportViewModel;
import com.cbs.snb.ui.reports.inventory.InventoryReportViewModel;
import com.cbs.snb.ui.reports.salesanalysis.SalesAnalysisViewModel;
import com.cbs.snb.ui.settings.SettingsViewModel;
import com.cbs.snb.ui.splash.SplashScreenViewModel;
import com.cbs.snb.utils.rx.SchedulerProvider;

import javax.inject.Inject;
import javax.inject.Singleton;

@Singleton
public class ViewModelProviderFactory extends ViewModelProvider.NewInstanceFactory {

    private final Repository mRepository;
    private final PreferenceHelper mPreferenceHelper;
    private final AppDatabase mDatabase;
    private final ApiService mApiService;
    private final SchedulerProvider mSchedulerProvider;

    @Inject
    public ViewModelProviderFactory(Repository repository, SchedulerProvider schedulerProvider,
                                    PreferenceHelper preferenceHelper, AppDatabase database, ApiService service) {
        this.mRepository = repository;
        this.mPreferenceHelper = preferenceHelper;
        this.mDatabase = database;
        this.mApiService = service;
        this.mSchedulerProvider = schedulerProvider;
    }

    @NonNull
    @Override
    public <T extends ViewModel> T create(@NonNull Class<T> modelClass) {
        if (modelClass.isAssignableFrom(HomeViewModel.class)){
            //noinspection unchecked
            return (T) new HomeViewModel(mRepository,mSchedulerProvider,mPreferenceHelper,mDatabase,mApiService);
        }else if (modelClass.isAssignableFrom(LoginViewModel.class)){
            //noinspection unchecked
            return (T) new LoginViewModel(mRepository,mSchedulerProvider,mPreferenceHelper,mDatabase,mApiService);
        }else if (modelClass.isAssignableFrom(MainViewModel.class)){
            //noinspection unchecked
            return (T) new MainViewModel(mRepository,mSchedulerProvider,mPreferenceHelper,mDatabase,mApiService);
        } else if (modelClass.isAssignableFrom(SplashScreenViewModel.class)){
            //noinspection unchecked
            return (T) new SplashScreenViewModel(mRepository,mSchedulerProvider,mPreferenceHelper,mDatabase,mApiService);
        }else if (modelClass.isAssignableFrom(ForgotPasswordViewModel.class)){
            //noinspection unchecked
            return (T) new ForgotPasswordViewModel(mRepository,mSchedulerProvider,mPreferenceHelper,mDatabase,mApiService);
        }else if (modelClass.isAssignableFrom(SettingsViewModel.class)){
            //noinspection unchecked
            return (T) new SettingsViewModel(mRepository,mSchedulerProvider,mPreferenceHelper,mDatabase,mApiService);
        } else if (modelClass.isAssignableFrom(RegionViewModel.class)){
            //noinspection unchecked
            return (T) new RegionViewModel(mRepository,mSchedulerProvider,mPreferenceHelper,mDatabase,mApiService);
        }else if (modelClass.isAssignableFrom(ProductDetailsViewModel.class)){
            //noinspection unchecked
            return (T) new ProductDetailsViewModel(mRepository,mSchedulerProvider,mPreferenceHelper,mDatabase,mApiService);
        }else if (modelClass.isAssignableFrom(ChangePasswordViewModel.class)){
            //noinspection unchecked
            return (T) new ChangePasswordViewModel(mRepository,mSchedulerProvider,mPreferenceHelper,mDatabase,mApiService);
        }else if (modelClass.isAssignableFrom(CartViewModel.class)){
            //noinspection unchecked
            return (T) new CartViewModel(mRepository,mSchedulerProvider,mPreferenceHelper,mDatabase,mApiService);
        }else if (modelClass.isAssignableFrom(CheckOutViewModel.class)){
            //noinspection unchecked
            return (T) new CheckOutViewModel(mRepository,mSchedulerProvider,mPreferenceHelper,mDatabase,mApiService);
        }else if (modelClass.isAssignableFrom(ComplaintViewModel.class)){
            //noinspection unchecked
            return (T) new ComplaintViewModel(mRepository,mSchedulerProvider,mPreferenceHelper,mDatabase,mApiService);
        }else if (modelClass.isAssignableFrom(FeedbackViewModel.class)){
            //noinspection unchecked
            return (T) new FeedbackViewModel(mRepository,mSchedulerProvider,mPreferenceHelper,mDatabase,mApiService);
        }else if (modelClass.isAssignableFrom(SalesAnalysisViewModel.class)){
            //noinspection unchecked
            return (T) new SalesAnalysisViewModel(mRepository,mSchedulerProvider,mPreferenceHelper,mDatabase,mApiService);
        }else if (modelClass.isAssignableFrom(InventoryReportViewModel.class)){
            //noinspection unchecked
            return (T) new InventoryReportViewModel(mRepository,mSchedulerProvider,mPreferenceHelper,mDatabase,mApiService);
        } else if (modelClass.isAssignableFrom(ExpenseReportViewModel.class)){
            //noinspection unchecked
            return (T) new ExpenseReportViewModel(mRepository,mSchedulerProvider,mPreferenceHelper,mDatabase,mApiService);
        }else if (modelClass.isAssignableFrom(ComplaintsReportViewModel.class)){
            //noinspection unchecked
            return (T) new ComplaintsReportViewModel(mRepository,mSchedulerProvider,mPreferenceHelper,mDatabase,mApiService);
        } else if (modelClass.isAssignableFrom(CustomerOutstandingViewModel.class)){
            //noinspection unchecked
            return (T) new CustomerOutstandingViewModel(mRepository,mSchedulerProvider,mPreferenceHelper,mDatabase,mApiService);
        }else if (modelClass.isAssignableFrom(CustomerDetailsViewModel.class)){
            //noinspection unchecked
            return (T) new CustomerDetailsViewModel(mRepository,mSchedulerProvider,mPreferenceHelper,mDatabase,mApiService);
        }else if (modelClass.isAssignableFrom(AddressDetailsViewModel.class)){
            //noinspection unchecked
            return (T) new AddressDetailsViewModel(mRepository,mSchedulerProvider,mPreferenceHelper,mDatabase,mApiService);
        }else if (modelClass.isAssignableFrom(PurchaseManagerViewModel.class)){
            //noinspection unchecked
            return (T) new PurchaseManagerViewModel(mRepository,mSchedulerProvider,mPreferenceHelper,mDatabase,mApiService);
        }else if (modelClass.isAssignableFrom(OwnerDetailsViewModel.class)){
            //noinspection unchecked
            return (T) new OwnerDetailsViewModel(mRepository,mSchedulerProvider,mPreferenceHelper,mDatabase,mApiService);
        }else if (modelClass.isAssignableFrom(LeadsViewModel.class)){
            //noinspection unchecked
            return (T) new LeadsViewModel(mRepository,mSchedulerProvider,mPreferenceHelper,mDatabase,mApiService);
        }else if (modelClass.isAssignableFrom(InventoryViewModel.class)){
            //noinspection unchecked
            return (T) new InventoryViewModel(mRepository,mSchedulerProvider,mPreferenceHelper,mDatabase,mApiService);
        }else if (modelClass.isAssignableFrom(CustomerHistoryViewModel.class)){
            //noinspection unchecked
            return (T) new CustomerHistoryViewModel(mRepository,mSchedulerProvider,mPreferenceHelper,mDatabase,mApiService);
        }else if (modelClass.isAssignableFrom(AddCustomerViewModel.class)){
            //noinspection unchecked
            return (T) new AddCustomerViewModel(mRepository,mSchedulerProvider,mPreferenceHelper,mDatabase,mApiService);
        }else if (modelClass.isAssignableFrom(PaymentViewModel.class)){
            //noinspection unchecked
            return (T) new PaymentViewModel(mRepository,mSchedulerProvider,mPreferenceHelper,mDatabase,mApiService);
        }else if (modelClass.isAssignableFrom(ExpenseViewModel.class)){
            //noinspection unchecked
            return (T) new ExpenseViewModel(mRepository,mSchedulerProvider,mPreferenceHelper,mDatabase,mApiService);
        }else if (modelClass.isAssignableFrom(UserCheckOutViewModel.class)){
            //noinspection unchecked
            return (T) new UserCheckOutViewModel(mRepository,mSchedulerProvider,mPreferenceHelper,mDatabase,mApiService);
        }else if (modelClass.isAssignableFrom(CheckInViewModel.class)){
            //noinspection unchecked
            return (T) new CheckInViewModel(mRepository,mSchedulerProvider,mPreferenceHelper,mDatabase,mApiService);
        }else if (modelClass.isAssignableFrom(NotificationViewModel.class)){
            //noinspection unchecked
            return (T) new NotificationViewModel(mRepository,mSchedulerProvider,mPreferenceHelper,mDatabase,mApiService);
        }else if (modelClass.isAssignableFrom(ProductsViewModel.class)){
            //noinspection unchecked
            return (T) new ProductsViewModel(mRepository,mSchedulerProvider,mPreferenceHelper,mDatabase,mApiService);
        }else if (modelClass.isAssignableFrom(ProductsListViewModel.class)){
            //noinspection unchecked
            return (T) new ProductsListViewModel(mRepository,mSchedulerProvider,mPreferenceHelper,mDatabase,mApiService);
        }else if (modelClass.isAssignableFrom(OrderItemViewModel.class)){
            //noinspection unchecked
            return (T) new OrderItemViewModel(mRepository,mSchedulerProvider,mPreferenceHelper,mDatabase,mApiService);
        }else if (modelClass.isAssignableFrom(MyOrdersViewModel.class)){
            //noinspection unchecked
            return (T) new MyOrdersViewModel(mRepository,mSchedulerProvider,mPreferenceHelper,mDatabase,mApiService);
        }else if (modelClass.isAssignableFrom(CreateActivityViewModel.class)){
            //noinspection unchecked
            return (T) new CreateActivityViewModel(mRepository,mSchedulerProvider,mPreferenceHelper,mDatabase,mApiService);
        }else if (modelClass.isAssignableFrom(InvoiceViewModel.class)){
            //noinspection unchecked
            return (T) new InvoiceViewModel(mRepository,mSchedulerProvider,mPreferenceHelper,mDatabase,mApiService);
        }else if (modelClass.isAssignableFrom(ActivityReportViewModel.class)){
            //noinspection unchecked
            return (T) new ActivityReportViewModel(mRepository,mSchedulerProvider,mPreferenceHelper,mDatabase,mApiService);
        }else if (modelClass.isAssignableFrom(ReportListViewModel.class)){
            //noinspection unchecked
            return (T) new ReportListViewModel(mRepository,mSchedulerProvider,mPreferenceHelper,mDatabase,mApiService);
        }else if (modelClass.isAssignableFrom(CustomerViewModel.class)){
            //noinspection unchecked
            return (T) new CustomerViewModel(mRepository,mSchedulerProvider,mPreferenceHelper,mDatabase,mApiService);
        }

        throw new IllegalArgumentException("Unknown ViewModel class: " + modelClass.getName());
    }
}
