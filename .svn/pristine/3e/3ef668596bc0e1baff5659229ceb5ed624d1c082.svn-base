package com.cbs.snb.data.database.dao;

import android.database.Cursor;
import androidx.lifecycle.LiveData;
import androidx.room.EntityInsertionAdapter;
import androidx.room.RoomDatabase;
import androidx.room.RoomSQLiteQuery;
import androidx.room.SharedSQLiteStatement;
import androidx.room.util.CursorUtil;
import androidx.room.util.DBUtil;
import androidx.room.util.StringUtil;
import androidx.sqlite.db.SupportSQLiteStatement;
import com.cbs.snb.data.database.entities.ProductDetails;
import java.lang.Double;
import java.lang.Exception;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.lang.SuppressWarnings;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Callable;

@SuppressWarnings({"unchecked", "deprecation"})
public final class ProductDetailsDao_Impl implements ProductDetailsDao {
  private final RoomDatabase __db;

  private final EntityInsertionAdapter<ProductDetails> __insertionAdapterOfProductDetails;

  private final SharedSQLiteStatement __preparedStmtOfDeleteAll;

  public ProductDetailsDao_Impl(RoomDatabase __db) {
    this.__db = __db;
    this.__insertionAdapterOfProductDetails = new EntityInsertionAdapter<ProductDetails>(__db) {
      @Override
      public String createQuery() {
        return "INSERT OR REPLACE INTO `ProductDetails` (`itemName`,`itemCode`,`price`,`inStock`,`imageUrl`,`invntryUom`,`qty`,`totalQty`,`totalPrice`) VALUES (?,?,?,?,?,?,?,?,?)";
      }

      @Override
      public void bind(SupportSQLiteStatement stmt, ProductDetails value) {
        if (value.getItemName() == null) {
          stmt.bindNull(1);
        } else {
          stmt.bindString(1, value.getItemName());
        }
        if (value.getItemCode() == null) {
          stmt.bindNull(2);
        } else {
          stmt.bindString(2, value.getItemCode());
        }
        if (value.getPrice() == null) {
          stmt.bindNull(3);
        } else {
          stmt.bindDouble(3, value.getPrice());
        }
        if (value.getInStock() == null) {
          stmt.bindNull(4);
        } else {
          stmt.bindDouble(4, value.getInStock());
        }
        if (value.getImageUrl() == null) {
          stmt.bindNull(5);
        } else {
          stmt.bindString(5, value.getImageUrl());
        }
        if (value.getInvntryUom() == null) {
          stmt.bindNull(6);
        } else {
          stmt.bindString(6, value.getInvntryUom());
        }
        if (value.getQty() == null) {
          stmt.bindNull(7);
        } else {
          stmt.bindLong(7, value.getQty());
        }
        if (value.getTotalQty() == null) {
          stmt.bindNull(8);
        } else {
          stmt.bindLong(8, value.getTotalQty());
        }
        if (value.getTotalPrice() == null) {
          stmt.bindNull(9);
        } else {
          stmt.bindDouble(9, value.getTotalPrice());
        }
      }
    };
    this.__preparedStmtOfDeleteAll = new SharedSQLiteStatement(__db) {
      @Override
      public String createQuery() {
        final String _query = "DELETE FROM productdetails";
        return _query;
      }
    };
  }

  @Override
  public void save(final List<ProductDetails> productDetails) {
    __db.assertNotSuspendingTransaction();
    __db.beginTransaction();
    try {
      __insertionAdapterOfProductDetails.insert(productDetails);
      __db.setTransactionSuccessful();
    } finally {
      __db.endTransaction();
    }
  }

  @Override
  public void save(final ProductDetails productDetails) {
    __db.assertNotSuspendingTransaction();
    __db.beginTransaction();
    try {
      __insertionAdapterOfProductDetails.insert(productDetails);
      __db.setTransactionSuccessful();
    } finally {
      __db.endTransaction();
    }
  }

  @Override
  public void deleteAll() {
    __db.assertNotSuspendingTransaction();
    final SupportSQLiteStatement _stmt = __preparedStmtOfDeleteAll.acquire();
    __db.beginTransaction();
    try {
      _stmt.executeUpdateDelete();
      __db.setTransactionSuccessful();
    } finally {
      __db.endTransaction();
      __preparedStmtOfDeleteAll.release(_stmt);
    }
  }

  @Override
  public LiveData<List<ProductDetails>> getProductsByPrice() {
    final String _sql = "SELECT * FROM productdetails ORDER BY price ASC";
    final RoomSQLiteQuery _statement = RoomSQLiteQuery.acquire(_sql, 0);
    return __db.getInvalidationTracker().createLiveData(new String[]{"productdetails"}, false, new Callable<List<ProductDetails>>() {
      @Override
      public List<ProductDetails> call() throws Exception {
        final Cursor _cursor = DBUtil.query(__db, _statement, false, null);
        try {
          final int _cursorIndexOfItemName = CursorUtil.getColumnIndexOrThrow(_cursor, "itemName");
          final int _cursorIndexOfItemCode = CursorUtil.getColumnIndexOrThrow(_cursor, "itemCode");
          final int _cursorIndexOfPrice = CursorUtil.getColumnIndexOrThrow(_cursor, "price");
          final int _cursorIndexOfInStock = CursorUtil.getColumnIndexOrThrow(_cursor, "inStock");
          final int _cursorIndexOfImageUrl = CursorUtil.getColumnIndexOrThrow(_cursor, "imageUrl");
          final int _cursorIndexOfInvntryUom = CursorUtil.getColumnIndexOrThrow(_cursor, "invntryUom");
          final int _cursorIndexOfQty = CursorUtil.getColumnIndexOrThrow(_cursor, "qty");
          final int _cursorIndexOfTotalQty = CursorUtil.getColumnIndexOrThrow(_cursor, "totalQty");
          final int _cursorIndexOfTotalPrice = CursorUtil.getColumnIndexOrThrow(_cursor, "totalPrice");
          final List<ProductDetails> _result = new ArrayList<ProductDetails>(_cursor.getCount());
          while(_cursor.moveToNext()) {
            final ProductDetails _item;
            final String _tmpItemName;
            _tmpItemName = _cursor.getString(_cursorIndexOfItemName);
            final String _tmpItemCode;
            _tmpItemCode = _cursor.getString(_cursorIndexOfItemCode);
            final Double _tmpPrice;
            if (_cursor.isNull(_cursorIndexOfPrice)) {
              _tmpPrice = null;
            } else {
              _tmpPrice = _cursor.getDouble(_cursorIndexOfPrice);
            }
            final Double _tmpInStock;
            if (_cursor.isNull(_cursorIndexOfInStock)) {
              _tmpInStock = null;
            } else {
              _tmpInStock = _cursor.getDouble(_cursorIndexOfInStock);
            }
            final String _tmpImageUrl;
            _tmpImageUrl = _cursor.getString(_cursorIndexOfImageUrl);
            final String _tmpInvntryUom;
            _tmpInvntryUom = _cursor.getString(_cursorIndexOfInvntryUom);
            final Integer _tmpQty;
            if (_cursor.isNull(_cursorIndexOfQty)) {
              _tmpQty = null;
            } else {
              _tmpQty = _cursor.getInt(_cursorIndexOfQty);
            }
            final Integer _tmpTotalQty;
            if (_cursor.isNull(_cursorIndexOfTotalQty)) {
              _tmpTotalQty = null;
            } else {
              _tmpTotalQty = _cursor.getInt(_cursorIndexOfTotalQty);
            }
            final Double _tmpTotalPrice;
            if (_cursor.isNull(_cursorIndexOfTotalPrice)) {
              _tmpTotalPrice = null;
            } else {
              _tmpTotalPrice = _cursor.getDouble(_cursorIndexOfTotalPrice);
            }
            _item = new ProductDetails(_tmpItemName,_tmpItemCode,_tmpPrice,_tmpInStock,_tmpImageUrl,_tmpInvntryUom,_tmpQty,_tmpTotalQty,_tmpTotalPrice);
            _result.add(_item);
          }
          return _result;
        } finally {
          _cursor.close();
        }
      }

      @Override
      protected void finalize() {
        _statement.release();
      }
    });
  }

  @Override
  public LiveData<List<ProductDetails>> getProductsAll() {
    final String _sql = "SELECT * FROM productdetails";
    final RoomSQLiteQuery _statement = RoomSQLiteQuery.acquire(_sql, 0);
    return __db.getInvalidationTracker().createLiveData(new String[]{"productdetails"}, false, new Callable<List<ProductDetails>>() {
      @Override
      public List<ProductDetails> call() throws Exception {
        final Cursor _cursor = DBUtil.query(__db, _statement, false, null);
        try {
          final int _cursorIndexOfItemName = CursorUtil.getColumnIndexOrThrow(_cursor, "itemName");
          final int _cursorIndexOfItemCode = CursorUtil.getColumnIndexOrThrow(_cursor, "itemCode");
          final int _cursorIndexOfPrice = CursorUtil.getColumnIndexOrThrow(_cursor, "price");
          final int _cursorIndexOfInStock = CursorUtil.getColumnIndexOrThrow(_cursor, "inStock");
          final int _cursorIndexOfImageUrl = CursorUtil.getColumnIndexOrThrow(_cursor, "imageUrl");
          final int _cursorIndexOfInvntryUom = CursorUtil.getColumnIndexOrThrow(_cursor, "invntryUom");
          final int _cursorIndexOfQty = CursorUtil.getColumnIndexOrThrow(_cursor, "qty");
          final int _cursorIndexOfTotalQty = CursorUtil.getColumnIndexOrThrow(_cursor, "totalQty");
          final int _cursorIndexOfTotalPrice = CursorUtil.getColumnIndexOrThrow(_cursor, "totalPrice");
          final List<ProductDetails> _result = new ArrayList<ProductDetails>(_cursor.getCount());
          while(_cursor.moveToNext()) {
            final ProductDetails _item;
            final String _tmpItemName;
            _tmpItemName = _cursor.getString(_cursorIndexOfItemName);
            final String _tmpItemCode;
            _tmpItemCode = _cursor.getString(_cursorIndexOfItemCode);
            final Double _tmpPrice;
            if (_cursor.isNull(_cursorIndexOfPrice)) {
              _tmpPrice = null;
            } else {
              _tmpPrice = _cursor.getDouble(_cursorIndexOfPrice);
            }
            final Double _tmpInStock;
            if (_cursor.isNull(_cursorIndexOfInStock)) {
              _tmpInStock = null;
            } else {
              _tmpInStock = _cursor.getDouble(_cursorIndexOfInStock);
            }
            final String _tmpImageUrl;
            _tmpImageUrl = _cursor.getString(_cursorIndexOfImageUrl);
            final String _tmpInvntryUom;
            _tmpInvntryUom = _cursor.getString(_cursorIndexOfInvntryUom);
            final Integer _tmpQty;
            if (_cursor.isNull(_cursorIndexOfQty)) {
              _tmpQty = null;
            } else {
              _tmpQty = _cursor.getInt(_cursorIndexOfQty);
            }
            final Integer _tmpTotalQty;
            if (_cursor.isNull(_cursorIndexOfTotalQty)) {
              _tmpTotalQty = null;
            } else {
              _tmpTotalQty = _cursor.getInt(_cursorIndexOfTotalQty);
            }
            final Double _tmpTotalPrice;
            if (_cursor.isNull(_cursorIndexOfTotalPrice)) {
              _tmpTotalPrice = null;
            } else {
              _tmpTotalPrice = _cursor.getDouble(_cursorIndexOfTotalPrice);
            }
            _item = new ProductDetails(_tmpItemName,_tmpItemCode,_tmpPrice,_tmpInStock,_tmpImageUrl,_tmpInvntryUom,_tmpQty,_tmpTotalQty,_tmpTotalPrice);
            _result.add(_item);
          }
          return _result;
        } finally {
          _cursor.close();
        }
      }

      @Override
      protected void finalize() {
        _statement.release();
      }
    });
  }

  @Override
  public LiveData<Integer> getCount() {
    final String _sql = "SELECT COUNT(*) FROM productdetails";
    final RoomSQLiteQuery _statement = RoomSQLiteQuery.acquire(_sql, 0);
    return __db.getInvalidationTracker().createLiveData(new String[]{"productdetails"}, false, new Callable<Integer>() {
      @Override
      public Integer call() throws Exception {
        final Cursor _cursor = DBUtil.query(__db, _statement, false, null);
        try {
          final Integer _result;
          if(_cursor.moveToFirst()) {
            final Integer _tmp;
            if (_cursor.isNull(0)) {
              _tmp = null;
            } else {
              _tmp = _cursor.getInt(0);
            }
            _result = _tmp;
          } else {
            _result = null;
          }
          return _result;
        } finally {
          _cursor.close();
        }
      }

      @Override
      protected void finalize() {
        _statement.release();
      }
    });
  }

  @Override
  public LiveData<Integer> getItemCount(final int selectedCode) {
    final String _sql = "SELECT COUNT(*) FROM productdetails WHERE itemCode = ?";
    final RoomSQLiteQuery _statement = RoomSQLiteQuery.acquire(_sql, 1);
    int _argIndex = 1;
    _statement.bindLong(_argIndex, selectedCode);
    return __db.getInvalidationTracker().createLiveData(new String[]{"productdetails"}, false, new Callable<Integer>() {
      @Override
      public Integer call() throws Exception {
        final Cursor _cursor = DBUtil.query(__db, _statement, false, null);
        try {
          final Integer _result;
          if(_cursor.moveToFirst()) {
            final Integer _tmp;
            if (_cursor.isNull(0)) {
              _tmp = null;
            } else {
              _tmp = _cursor.getInt(0);
            }
            _result = _tmp;
          } else {
            _result = null;
          }
          return _result;
        } finally {
          _cursor.close();
        }
      }

      @Override
      protected void finalize() {
        _statement.release();
      }
    });
  }

  @Override
  public LiveData<ProductDetails> getProducts(final String name) {
    final String _sql = "SELECT * FROM productdetails WHERE itemName = ?";
    final RoomSQLiteQuery _statement = RoomSQLiteQuery.acquire(_sql, 1);
    int _argIndex = 1;
    if (name == null) {
      _statement.bindNull(_argIndex);
    } else {
      _statement.bindString(_argIndex, name);
    }
    return __db.getInvalidationTracker().createLiveData(new String[]{"productdetails"}, false, new Callable<ProductDetails>() {
      @Override
      public ProductDetails call() throws Exception {
        final Cursor _cursor = DBUtil.query(__db, _statement, false, null);
        try {
          final int _cursorIndexOfItemName = CursorUtil.getColumnIndexOrThrow(_cursor, "itemName");
          final int _cursorIndexOfItemCode = CursorUtil.getColumnIndexOrThrow(_cursor, "itemCode");
          final int _cursorIndexOfPrice = CursorUtil.getColumnIndexOrThrow(_cursor, "price");
          final int _cursorIndexOfInStock = CursorUtil.getColumnIndexOrThrow(_cursor, "inStock");
          final int _cursorIndexOfImageUrl = CursorUtil.getColumnIndexOrThrow(_cursor, "imageUrl");
          final int _cursorIndexOfInvntryUom = CursorUtil.getColumnIndexOrThrow(_cursor, "invntryUom");
          final int _cursorIndexOfQty = CursorUtil.getColumnIndexOrThrow(_cursor, "qty");
          final int _cursorIndexOfTotalQty = CursorUtil.getColumnIndexOrThrow(_cursor, "totalQty");
          final int _cursorIndexOfTotalPrice = CursorUtil.getColumnIndexOrThrow(_cursor, "totalPrice");
          final ProductDetails _result;
          if(_cursor.moveToFirst()) {
            final String _tmpItemName;
            _tmpItemName = _cursor.getString(_cursorIndexOfItemName);
            final String _tmpItemCode;
            _tmpItemCode = _cursor.getString(_cursorIndexOfItemCode);
            final Double _tmpPrice;
            if (_cursor.isNull(_cursorIndexOfPrice)) {
              _tmpPrice = null;
            } else {
              _tmpPrice = _cursor.getDouble(_cursorIndexOfPrice);
            }
            final Double _tmpInStock;
            if (_cursor.isNull(_cursorIndexOfInStock)) {
              _tmpInStock = null;
            } else {
              _tmpInStock = _cursor.getDouble(_cursorIndexOfInStock);
            }
            final String _tmpImageUrl;
            _tmpImageUrl = _cursor.getString(_cursorIndexOfImageUrl);
            final String _tmpInvntryUom;
            _tmpInvntryUom = _cursor.getString(_cursorIndexOfInvntryUom);
            final Integer _tmpQty;
            if (_cursor.isNull(_cursorIndexOfQty)) {
              _tmpQty = null;
            } else {
              _tmpQty = _cursor.getInt(_cursorIndexOfQty);
            }
            final Integer _tmpTotalQty;
            if (_cursor.isNull(_cursorIndexOfTotalQty)) {
              _tmpTotalQty = null;
            } else {
              _tmpTotalQty = _cursor.getInt(_cursorIndexOfTotalQty);
            }
            final Double _tmpTotalPrice;
            if (_cursor.isNull(_cursorIndexOfTotalPrice)) {
              _tmpTotalPrice = null;
            } else {
              _tmpTotalPrice = _cursor.getDouble(_cursorIndexOfTotalPrice);
            }
            _result = new ProductDetails(_tmpItemName,_tmpItemCode,_tmpPrice,_tmpInStock,_tmpImageUrl,_tmpInvntryUom,_tmpQty,_tmpTotalQty,_tmpTotalPrice);
          } else {
            _result = null;
          }
          return _result;
        } finally {
          _cursor.close();
        }
      }

      @Override
      protected void finalize() {
        _statement.release();
      }
    });
  }

  @Override
  public void deleteOtherProducts(final List<String> nameList) {
    __db.assertNotSuspendingTransaction();
    StringBuilder _stringBuilder = StringUtil.newStringBuilder();
    _stringBuilder.append("DELETE FROM productdetails WHERE itemName NOT IN (");
    final int _inputSize = nameList.size();
    StringUtil.appendPlaceholders(_stringBuilder, _inputSize);
    _stringBuilder.append(")");
    final String _sql = _stringBuilder.toString();
    final SupportSQLiteStatement _stmt = __db.compileStatement(_sql);
    int _argIndex = 1;
    for (String _item : nameList) {
      if (_item == null) {
        _stmt.bindNull(_argIndex);
      } else {
        _stmt.bindString(_argIndex, _item);
      }
      _argIndex ++;
    }
    __db.beginTransaction();
    try {
      _stmt.executeUpdateDelete();
      __db.setTransactionSuccessful();
    } finally {
      __db.endTransaction();
    }
  }
}
