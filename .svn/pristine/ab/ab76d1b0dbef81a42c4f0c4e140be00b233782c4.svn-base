package com.cbs.snb.ui.activity;

import android.Manifest;
import android.annotation.TargetApi;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.annotation.RequiresApi;
import androidx.core.app.ActivityCompat;
import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentManager;
import androidx.fragment.app.FragmentTransaction;

import android.os.Handler;
import android.os.Looper;
import android.provider.MediaStore;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.LinearLayout;

import com.bumptech.glide.Glide;
import com.cbs.snb.BR;
import com.cbs.snb.R;
import com.cbs.snb.data.network.models.get.ActivityTypeModel;
import com.cbs.snb.data.network.models.get.CustomerDetailsModel;
import com.cbs.snb.ui.home.HomeFragment;
import com.cbs.snb.service.LocationService;
import com.cbs.snb.data.network.models.post.CreateActivityModel;
import com.cbs.snb.databinding.FragmentCreateActivityBinding;
import com.cbs.snb.ui.base.BaseFragment;
import com.cbs.snb.ui.leads.LeadFragment;
import com.cbs.snb.utils.DateUtils;
import com.cbs.snb.utils.ImageInputHelper;
import com.cbs.snb.utils.PhotoFullPopupWindow;
import com.cbs.snb.utils.RealPathUtils;
import com.cbs.snb.utils.getAddressByLatLng;
import com.google.android.material.bottomsheet.BottomSheetDialog;
import com.karumi.dexter.Dexter;
import com.karumi.dexter.MultiplePermissionsReport;
import com.karumi.dexter.PermissionToken;
import com.karumi.dexter.listener.PermissionRequest;
import com.karumi.dexter.listener.multi.MultiplePermissionsListener;
import java.io.File;
import java.io.IOException;
import java.util.List;

import javax.inject.Inject;

import okhttp3.MultipartBody;
import okhttp3.RequestBody;

import static android.Manifest.permission.CAMERA;
import static android.Manifest.permission.READ_EXTERNAL_STORAGE;
import static android.Manifest.permission.WRITE_EXTERNAL_STORAGE;
import static com.cbs.snb.utils.Constants.PERMISSION_LOCATION_REQUEST_CODE;

/**
 * A simple {@link Fragment} subclass.
 * Use the {@link CreateActivityFragment#newInstance} factory method to
 * create an instance of this fragment.
 */
public class CreateActivityFragment extends BaseFragment<CreateActivityViewModel, FragmentCreateActivityBinding>
        implements CreateActivityNavigator, ImageInputHelper.ImageActionListener {

    @Inject
    LocationService locationService;

    private String dealerCode, dealerName, typeName, geoLaction;
    private int typeCode;
    private double latitude, longitude;
    Drawable mWaveDrawable;
    private static CreateActivityFragment instance = null;
    private ImageInputHelper mImageInputHelper;
    private String path;

    public static CreateActivityFragment newInstance() {
        CreateActivityFragment fragment = new CreateActivityFragment();
        Bundle args = new Bundle();
        fragment.setArguments(args);
        return fragment;
    }

    @Override
    public int getBindingVariable() {
        return BR.createActivityViewModel;
    }

    @Override
    public int getLayoutRes() {
        return R.layout.fragment_create_activity;
    }

    @Override
    protected Class<CreateActivityViewModel> getViewModel() {
        return CreateActivityViewModel.class;
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        instance = this;
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        super.onCreateView(inflater, container, savedInstanceState);
        // Inflate the layout for this fragment
        setHasOptionsMenu(true);
        viewModel.setNavigator(this);
        setUp();
        return dataBinding.getRoot();
    }

    public void setUp() {

        mImageInputHelper = new ImageInputHelper(instance);
        mImageInputHelper.setImageActionListener(this);

        dataBinding.etDate.setText(DateUtils.currentDate());

        /*dataBinding.etDate.setOnClickListener(v -> viewModel.dateSelection(getActivity()));*/

        showPermissionDialog();

        dataBinding.etMeetingLocation.setOnClickListener(v -> getLocation());

        getLocation();

        getDealer();

        getType();

        dataBinding.addImage.setOnClickListener(v -> pickImage());

        dataBinding.addCustomerNew.setOnClickListener(v -> addCustomerScreen());

        dataBinding.addActivityBtn.setOnClickListener(v ->{
            if (dataBinding.etDate.getText().toString().isEmpty()){
                showSnackBar("Please select date",getResources().getColor(R.color.red));
            }else if (dataBinding.etRemarksCode.getText().toString().isEmpty()){
                showSnackBar("Please enter remarks",getResources().getColor(R.color.red));
            } else {
                hideKeyboard();
                addActivity();
            }
        });
    }

    @Override
    public void setDate(String date) {
        dataBinding.etDate.setText(date);

    }

    private void getLocation() {
        latitude = locationService.getLatitude();
        longitude = locationService.getLongitude();
        geoLaction = getAddressByLatLng.getAddress(locationService.getLatitude(), locationService.getLongitude(), getActivity());
        dataBinding.etMeetingLocation.setText(geoLaction);
    }

    private void showPermissionDialog() {
        if (!LocationService.checkPermission(getActivity())) {
            ActivityCompat.requestPermissions(getActivity(),
                    new String[]{Manifest.permission.ACCESS_COARSE_LOCATION, Manifest.permission.ACCESS_FINE_LOCATION},
                    PERMISSION_LOCATION_REQUEST_CODE);
        }
    }

    private void getDealer() {

        viewModel.isLoading().observe(getViewLifecycleOwner(), aBoolean -> {
            if (aBoolean) {
                showLoading();
            } else {
                hideLoading();
            }
        });

        viewModel.getCustomers("C").observe(getViewLifecycleOwner(), customerDetailsModelResource -> {
            switch (customerDetailsModelResource.status) {
                case LOADING:
                    // mWaveDrawable.canApplyTheme();
                    showLoading();
                    break;
                case SUCCESS:
                    hideLoading();
                    setData(customerDetailsModelResource.data.getResponseObject());
                    break;
                case ERROR:
                    hideLoading();
                    showSnackBar(customerDetailsModelResource.getMessage(), getResources().getColor(R.color.red));
                    //Log.e("eeerror",customerDetailsModelResource.getMessage());
                    break;
                default:
                    break;
            }
        });
    }

    private void getType() {
        viewModel.getType().observe(getViewLifecycleOwner(), activityTypeModelResource -> {
            switch (activityTypeModelResource.status) {
                case LOADING:
                    showLoading();
                    break;
                case SUCCESS:
                    hideLoading();
                    setType(activityTypeModelResource.data.getResponseObject());
                    //Log.e("ddd", String.valueOf(activityTypeModelResource.data.getResponseObject().size()));
                    break;
                case ERROR:
                    hideLoading();
                    showSnackBar(activityTypeModelResource.getMessage(), getResources().getColor(R.color.red));
                   // Log.e("eeerror",activityTypeModelResource.getMessage());
                    break;
                default:
                    break;
            }
        });
    }


    private void setData(List<CustomerDetailsModel.ResponseObject> responseObjects) {
        dataBinding.dealerSp.setTitle("Dealers");
        DealersAdapter adapter = new DealersAdapter(getActivity(), responseObjects);
        dataBinding.dealerSp.setAdapter(adapter);

        dataBinding.dealerSp.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                dealerCode = responseObjects.get(position).getCardCode();
                dealerName = responseObjects.get(position).getCardName();
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {

            }
        });

    }

    private void setType(List<ActivityTypeModel.ResponseObject> type) {
        dataBinding.typeSp.setTitle("Type");
        TypeAdapter adapter = new TypeAdapter(getActivity(), type);
        dataBinding.typeSp.setAdapter(adapter);

        dataBinding.typeSp.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                typeCode = type.get(position).getCode();
                typeName = type.get(position).getName();
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {

            }
        });
    }

    public void addCustomerScreen() {

        LeadFragment fragment = new LeadFragment();
        Bundle bundle = new Bundle();
        bundle.putInt("code",1);
        fragment.setArguments(bundle);
        FragmentManager fragmentManager = getFragmentManager();
        FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();
        fragmentTransaction.replace(R.id.nav_host_fragment, fragment);
        fragmentTransaction.addToBackStack("Leads");
        fragmentTransaction.commit();
        getActivity().overridePendingTransition(R.anim.slide_out_to_left, R.anim.slide_out_to_right);

    }

    public void pickImage() {
        BottomSheetDialog mBottomSheetDialog = new BottomSheetDialog(getActivity());
        View sheetView = getActivity().getLayoutInflater().inflate(R.layout.layout_take_images, null);
        mBottomSheetDialog.setContentView(sheetView);
        mBottomSheetDialog.show();

        LinearLayout camera = sheetView.findViewById(R.id.take_photo);
        LinearLayout gallery = sheetView.findViewById(R.id.pick_gallery);

        camera.setOnClickListener(v -> {
            if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
                mImageInputHelper.takePhotoWithCamera();
            } else {
                initCameraPermission();
            }
            mBottomSheetDialog.dismiss();
        });

        gallery.setOnClickListener(v -> {
            if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
                mImageInputHelper.selectImageFromGallery();
            } else {
                initGalleryPermission();
            }
            mBottomSheetDialog.dismiss();
        });
    }

    @TargetApi(Build.VERSION_CODES.M)
    private void initCameraPermission() {
        Dexter.withActivity(getActivity())
                .withPermissions(CAMERA,WRITE_EXTERNAL_STORAGE)
                .withListener(new MultiplePermissionsListener() {
                    @Override
                    public void onPermissionsChecked(MultiplePermissionsReport report) {
                        if (report.areAllPermissionsGranted()) {
                            mImageInputHelper.takePhotoWithCamera();
                        }
                    }

                    @Override
                    public void onPermissionRationaleShouldBeShown(List<PermissionRequest> permissions, PermissionToken token) {
                        token.continuePermissionRequest();
                    }
                }).check();
    }

    @TargetApi(Build.VERSION_CODES.M)
    private void initGalleryPermission() {
        Dexter.withActivity(getActivity())
                .withPermissions(WRITE_EXTERNAL_STORAGE,
                        READ_EXTERNAL_STORAGE)
                .withListener(new MultiplePermissionsListener() {
                    @Override
                    public void onPermissionsChecked(MultiplePermissionsReport report) {
                        if (report.areAllPermissionsGranted()) {
                            mImageInputHelper.selectImageFromGallery();
                        }
                    }

                    @Override
                    public void onPermissionRationaleShouldBeShown(List<PermissionRequest> permissions, PermissionToken token) {
                        token.continuePermissionRequest();
                    }
                }).check();

    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        mImageInputHelper.onActivityResult(requestCode, resultCode, data);
    }

    @Override
    public void onImageSelectedFromGallery(Uri uri, File imageFile) {
        displayImage(uri);
    }

    @Override
    public void onImageTakenFromCamera(Uri uri, File imageFile) {
        displayImage(uri);
    }

    @Override
    public void onImageCropped(Uri uri, File imageFile) {
        displayImage(uri);
    }

    @RequiresApi(api = Build.VERSION_CODES.KITKAT)
    public void displayImage(Uri uri) {
        Bitmap bitmap = null;
        try {
            bitmap = MediaStore.Images.Media.getBitmap(requireActivity().getContentResolver(), uri);
            path = RealPathUtils.getRealPathFromURI(getActivity(), bitmap);
            dataBinding.imageView.setClipToOutline(true);
            Glide.with(getActivity())
                    .load(path)
                    .into(dataBinding.imageView);
            if (!path.equalsIgnoreCase("")) {
                dataBinding.imageView.setOnClickListener(v -> {
                    // Code to show image in full screen:
                    new PhotoFullPopupWindow(getActivity(), R.layout.popup_photo_full, v, path, null);
                });
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }


    public void addActivity() {
        MultipartBody.Part mImageFile = null;

        if (path != null) {
            File file = new File(path);
            RequestBody requestBody = RequestBody.create(okhttp3.MediaType.parse("multipart/form-data"), file);
            mImageFile = MultipartBody.Part.createFormData("image", file.getName(), requestBody);
        }

        viewModel.addActivity(new CreateActivityModel(dealerCode, String.valueOf(typeCode), DateUtils.convertDateFormat10(dataBinding.etDate.getText().toString()),
                geoLaction, String.valueOf(longitude), String.valueOf(latitude), dataBinding.etRemarksCode.getText().toString()),mImageFile)
                .observe(getViewLifecycleOwner(), basePostResponseResource -> {
                    switch (basePostResponseResource.status) {
                        case LOADING:
                            showLoading();
                            break;
                        case SUCCESS:
                            hideLoading();
                            refresh();
                            showSnackBar("Success", getResources().getColor(R.color.green));
                            break;
                        case ERROR:
                            hideLoading();
                            showSnackBar(basePostResponseResource.getMessage(), getResources().getColor(R.color.red));
                            break;
                        default:
                            break;
                    }
                });
    }

    private void refresh() {
        final Handler handler = new Handler(Looper.getMainLooper());
        handler.postDelayed(() ->   {
            HomeFragment fragment = new HomeFragment();
            FragmentManager fragmentManager = getFragmentManager();
            FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();
            fragmentTransaction.replace(R.id.nav_host_fragment, fragment);
            fragmentTransaction.addToBackStack("Home");
            fragmentTransaction.commit();
            getActivity().overridePendingTransition(R.anim.slide_out_to_left, R.anim.slide_out_to_right);
        }, 2000);

        /*dataBinding.etDate.setText("");
        dataBinding.etMeetingLocation.setText("");
        dataBinding.etRemarksCode.setText("");
        dataBinding.typeSp.setSelection(0);
        dataBinding.dealerSp.setSelection(0);*/
    }

}