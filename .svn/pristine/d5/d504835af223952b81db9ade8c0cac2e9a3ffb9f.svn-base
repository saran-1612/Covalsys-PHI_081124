// Generated by Dagger (https://google.github.io/dagger).
package com.cbs.snb.di.component;

import android.app.Activity;
import android.app.Application;
import android.content.Context;
import androidx.fragment.app.Fragment;
import com.cbs.snb.MyApplication;
import com.cbs.snb.MyApplication_MembersInjector;
import com.cbs.snb.data.database.AppDatabase;
import com.cbs.snb.data.network.ApiService;
import com.cbs.snb.data.network.repository.Repository;
import com.cbs.snb.data.preferences.PreferenceHelper;
import com.cbs.snb.data.preferences.PreferencesManager;
import com.cbs.snb.data.preferences.PreferencesManager_Factory;
import com.cbs.snb.di.builder.ActivityBuilder_ActivityReportActivity;
import com.cbs.snb.di.builder.ActivityBuilder_AddCustomerActivity;
import com.cbs.snb.di.builder.ActivityBuilder_CartActivity;
import com.cbs.snb.di.builder.ActivityBuilder_CheckInActivity;
import com.cbs.snb.di.builder.ActivityBuilder_CheckOutActivity;
import com.cbs.snb.di.builder.ActivityBuilder_ComplaintsReportActivity;
import com.cbs.snb.di.builder.ActivityBuilder_CustomerOutstandingActivity;
import com.cbs.snb.di.builder.ActivityBuilder_ExpenseReportActivity;
import com.cbs.snb.di.builder.ActivityBuilder_ForgotPasswordActivity;
import com.cbs.snb.di.builder.ActivityBuilder_InventoryReportActivity;
import com.cbs.snb.di.builder.ActivityBuilder_InvoiceListActivity;
import com.cbs.snb.di.builder.ActivityBuilder_ItemDetailsActivity;
import com.cbs.snb.di.builder.ActivityBuilder_LoginActivity;
import com.cbs.snb.di.builder.ActivityBuilder_MainActivity;
import com.cbs.snb.di.builder.ActivityBuilder_NotificationActivity;
import com.cbs.snb.di.builder.ActivityBuilder_OrderItemListActivity;
import com.cbs.snb.di.builder.ActivityBuilder_ProductsActivity;
import com.cbs.snb.di.builder.ActivityBuilder_ProductsListActivity;
import com.cbs.snb.di.builder.ActivityBuilder_RegionActivity;
import com.cbs.snb.di.builder.ActivityBuilder_SalesAnalysisActivity;
import com.cbs.snb.di.builder.ActivityBuilder_SettingsActivity;
import com.cbs.snb.di.builder.ActivityBuilder_SplashScreenActivity;
import com.cbs.snb.di.builder.FragmentBuilder_ContributeAddressDetailsFragment;
import com.cbs.snb.di.builder.FragmentBuilder_ContributeChangePasswordFragment;
import com.cbs.snb.di.builder.FragmentBuilder_ContributeComplaintFragment;
import com.cbs.snb.di.builder.FragmentBuilder_ContributeCreateActivityFragment;
import com.cbs.snb.di.builder.FragmentBuilder_ContributeCustomerDetailsFragment;
import com.cbs.snb.di.builder.FragmentBuilder_ContributeCustomerFragment;
import com.cbs.snb.di.builder.FragmentBuilder_ContributeCustomerHistoryFragment;
import com.cbs.snb.di.builder.FragmentBuilder_ContributeExpenseFragment;
import com.cbs.snb.di.builder.FragmentBuilder_ContributeFeedbackFragment;
import com.cbs.snb.di.builder.FragmentBuilder_ContributeHomeFragment;
import com.cbs.snb.di.builder.FragmentBuilder_ContributeInventoryFragment;
import com.cbs.snb.di.builder.FragmentBuilder_ContributeLeadFragment;
import com.cbs.snb.di.builder.FragmentBuilder_ContributeMyOrdersFragment;
import com.cbs.snb.di.builder.FragmentBuilder_ContributeOwnerDetailsFragment;
import com.cbs.snb.di.builder.FragmentBuilder_ContributePaymentFragment;
import com.cbs.snb.di.builder.FragmentBuilder_ContributePurchaseManageFragment;
import com.cbs.snb.di.builder.FragmentBuilder_ContributeUserCheckOutFragment;
import com.cbs.snb.di.builder.FragmentBuilder_ReportListFragment;
import com.cbs.snb.di.module.AppModule;
import com.cbs.snb.di.module.AppModule_ProvideAppDatabaseFactory;
import com.cbs.snb.di.module.AppModule_ProvideCartAdapterFactory;
import com.cbs.snb.di.module.AppModule_ProvideContextFactory;
import com.cbs.snb.di.module.AppModule_ProvideCustomerHistoryAdapterFactory;
import com.cbs.snb.di.module.AppModule_ProvideInvoiceListAdapterrFactory;
import com.cbs.snb.di.module.AppModule_ProvideLocationServiceFactory;
import com.cbs.snb.di.module.AppModule_ProvideOkHttpClientFactory;
import com.cbs.snb.di.module.AppModule_ProvideOrderItemListAdapterFactory;
import com.cbs.snb.di.module.AppModule_ProvideOutstandingAdapterFactory;
import com.cbs.snb.di.module.AppModule_ProvidePreferenceNameFactory;
import com.cbs.snb.di.module.AppModule_ProvidePreferencesHelperFactory;
import com.cbs.snb.di.module.AppModule_ProvideProductAdapterFactory;
import com.cbs.snb.di.module.AppModule_ProvideProductsListAdapterFactory;
import com.cbs.snb.di.module.AppModule_ProvideRetrofitFactory;
import com.cbs.snb.di.module.AppModule_ProvidesCustomerAdapterFactory;
import com.cbs.snb.di.module.AppModule_ProvidesHomeCustomerAdapterFactory;
import com.cbs.snb.di.module.AppModule_ProvidesRepositoryFactory;
import com.cbs.snb.service.LocationService;
import com.cbs.snb.ui.ViewModelProviderFactory;
import com.cbs.snb.ui.ViewModelProviderFactory_Factory;
import com.cbs.snb.ui.activity.CreateActivityFragment;
import com.cbs.snb.ui.activity.CreateActivityFragment_MembersInjector;
import com.cbs.snb.ui.attendance.UserCheckOutFragment;
import com.cbs.snb.ui.attendance.checkin.CheckInActivity;
import com.cbs.snb.ui.attendance.checkin.CheckInActivity_MembersInjector;
import com.cbs.snb.ui.base.BaseActivity_MembersInjector;
import com.cbs.snb.ui.base.BaseFragment_MembersInjector;
import com.cbs.snb.ui.cart.CartActivity;
import com.cbs.snb.ui.cart.CartActivity_MembersInjector;
import com.cbs.snb.ui.cart.CartAdapter;
import com.cbs.snb.ui.changepassword.ChangePasswordFragment;
import com.cbs.snb.ui.checkout.CheckOutActivity;
import com.cbs.snb.ui.checkout.CheckOutActivity_MembersInjector;
import com.cbs.snb.ui.complaints.ComplaintFragment;
import com.cbs.snb.ui.customerhistory.addcustomer.AddCustomerActivity;
import com.cbs.snb.ui.customerhistory.addcustomer.AddCustomerActivity_MembersInjector;
import com.cbs.snb.ui.customerhistory.viewcustomer.CustomerHistoryAdapter;
import com.cbs.snb.ui.customerhistory.viewcustomer.CustomerHistoryFragment;
import com.cbs.snb.ui.customerhistory.viewcustomer.CustomerHistoryFragment_MembersInjector;
import com.cbs.snb.ui.customers.CustomerAdapter;
import com.cbs.snb.ui.customers.CustomerFragment;
import com.cbs.snb.ui.customers.CustomerFragment_MembersInjector;
import com.cbs.snb.ui.expense.ExpenseFragment;
import com.cbs.snb.ui.feedback.FeedbackFragment;
import com.cbs.snb.ui.forgotpassword.ForgotPasswordActivity;
import com.cbs.snb.ui.forgotpassword.ForgotPasswordActivity_MembersInjector;
import com.cbs.snb.ui.home.HomeFragment;
import com.cbs.snb.ui.home.HomeFragment_MembersInjector;
import com.cbs.snb.ui.home.adapter.HomeCustomerAdapter;
import com.cbs.snb.ui.inventory.InventoryFragment;
import com.cbs.snb.ui.leads.LeadFragment;
import com.cbs.snb.ui.leads.LeadFragment_MembersInjector;
import com.cbs.snb.ui.leads.address.AddressDetailsFragment;
import com.cbs.snb.ui.leads.customer.CustomerDetailsFragment;
import com.cbs.snb.ui.leads.manager.PurchaseManagerFragment;
import com.cbs.snb.ui.leads.owner.OwnerDetailsFragment;
import com.cbs.snb.ui.login.LoginActivity;
import com.cbs.snb.ui.login.LoginActivity_MembersInjector;
import com.cbs.snb.ui.main.MainActivity;
import com.cbs.snb.ui.main.MainActivity_MembersInjector;
import com.cbs.snb.ui.notification.NotificationActivity;
import com.cbs.snb.ui.notification.NotificationActivity_MembersInjector;
import com.cbs.snb.ui.orders.MyOrdersFragment;
import com.cbs.snb.ui.orders.order_details.OrderItemListActivity;
import com.cbs.snb.ui.orders.order_details.OrderItemListActivity_MembersInjector;
import com.cbs.snb.ui.orders.order_details.OrderItemListAdapter;
import com.cbs.snb.ui.payment.PaymentFragment;
import com.cbs.snb.ui.payment.PaymentFragment_MembersInjector;
import com.cbs.snb.ui.payment.adapter.PaymentOutstandingAdapter;
import com.cbs.snb.ui.payment.invoices.InvoiceListActivity;
import com.cbs.snb.ui.payment.invoices.InvoiceListActivity_MembersInjector;
import com.cbs.snb.ui.payment.invoices.InvoiceListAdapter;
import com.cbs.snb.ui.pdf_viwer.report_list.ReportListFragment;
import com.cbs.snb.ui.product_list.ProductsListActivity;
import com.cbs.snb.ui.product_list.ProductsListActivity_MembersInjector;
import com.cbs.snb.ui.product_list.ProductsListAdapter;
import com.cbs.snb.ui.productdetails.ProductDetailsActivity;
import com.cbs.snb.ui.productdetails.ProductDetailsActivity_MembersInjector;
import com.cbs.snb.ui.products.ProductsActivity;
import com.cbs.snb.ui.products.ProductsActivity_MembersInjector;
import com.cbs.snb.ui.products.ProductsAdapter;
import com.cbs.snb.ui.region.RegionActivity;
import com.cbs.snb.ui.region.RegionActivity_MembersInjector;
import com.cbs.snb.ui.reports.activity.ActivityReportActivity;
import com.cbs.snb.ui.reports.activity.ActivityReportActivity_MembersInjector;
import com.cbs.snb.ui.reports.complaints.ComplaintsReportActivity;
import com.cbs.snb.ui.reports.complaints.ComplaintsReportActivity_MembersInjector;
import com.cbs.snb.ui.reports.customeroutstanding.CustomerOutstandingActivity;
import com.cbs.snb.ui.reports.customeroutstanding.CustomerOutstandingActivity_MembersInjector;
import com.cbs.snb.ui.reports.expense.ExpenseReportActivity;
import com.cbs.snb.ui.reports.expense.ExpenseReportActivity_MembersInjector;
import com.cbs.snb.ui.reports.inventory.InventoryReportActivity;
import com.cbs.snb.ui.reports.inventory.InventoryReportActivity_MembersInjector;
import com.cbs.snb.ui.reports.salesanalysis.SalesAnalysisActivity;
import com.cbs.snb.ui.reports.salesanalysis.SalesAnalysisActivity_MembersInjector;
import com.cbs.snb.ui.settings.SettingsActivity;
import com.cbs.snb.ui.settings.SettingsActivity_MembersInjector;
import com.cbs.snb.ui.splash.SplashScreenActivity;
import com.cbs.snb.ui.splash.SplashScreenActivity_MembersInjector;
import dagger.android.AndroidInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

public final class DaggerAppComponent implements AppComponent {
  private Provider<ActivityBuilder_SplashScreenActivity.SplashScreenActivitySubcomponent.Factory>
      splashScreenActivitySubcomponentFactoryProvider;

  private Provider<ActivityBuilder_LoginActivity.LoginActivitySubcomponent.Factory>
      loginActivitySubcomponentFactoryProvider;

  private Provider<
          ActivityBuilder_ForgotPasswordActivity.ForgotPasswordActivitySubcomponent.Factory>
      forgotPasswordActivitySubcomponentFactoryProvider;

  private Provider<ActivityBuilder_RegionActivity.RegionActivitySubcomponent.Factory>
      regionActivitySubcomponentFactoryProvider;

  private Provider<ActivityBuilder_MainActivity.MainActivitySubcomponent.Factory>
      mainActivitySubcomponentFactoryProvider;

  private Provider<ActivityBuilder_SettingsActivity.SettingsActivitySubcomponent.Factory>
      settingsActivitySubcomponentFactoryProvider;

  private Provider<ActivityBuilder_ItemDetailsActivity.ProductDetailsActivitySubcomponent.Factory>
      productDetailsActivitySubcomponentFactoryProvider;

  private Provider<ActivityBuilder_CartActivity.CartActivitySubcomponent.Factory>
      cartActivitySubcomponentFactoryProvider;

  private Provider<ActivityBuilder_CheckOutActivity.CheckOutActivitySubcomponent.Factory>
      checkOutActivitySubcomponentFactoryProvider;

  private Provider<
          ActivityBuilder_CustomerOutstandingActivity.CustomerOutstandingActivitySubcomponent
              .Factory>
      customerOutstandingActivitySubcomponentFactoryProvider;

  private Provider<ActivityBuilder_ExpenseReportActivity.ExpenseReportActivitySubcomponent.Factory>
      expenseReportActivitySubcomponentFactoryProvider;

  private Provider<ActivityBuilder_SalesAnalysisActivity.SalesAnalysisActivitySubcomponent.Factory>
      salesAnalysisActivitySubcomponentFactoryProvider;

  private Provider<
          ActivityBuilder_InventoryReportActivity.InventoryReportActivitySubcomponent.Factory>
      inventoryReportActivitySubcomponentFactoryProvider;

  private Provider<
          ActivityBuilder_ComplaintsReportActivity.ComplaintsReportActivitySubcomponent.Factory>
      complaintsReportActivitySubcomponentFactoryProvider;

  private Provider<ActivityBuilder_AddCustomerActivity.AddCustomerActivitySubcomponent.Factory>
      addCustomerActivitySubcomponentFactoryProvider;

  private Provider<ActivityBuilder_CheckInActivity.CheckInActivitySubcomponent.Factory>
      checkInActivitySubcomponentFactoryProvider;

  private Provider<ActivityBuilder_NotificationActivity.NotificationActivitySubcomponent.Factory>
      notificationActivitySubcomponentFactoryProvider;

  private Provider<ActivityBuilder_InvoiceListActivity.InvoiceListActivitySubcomponent.Factory>
      invoiceListActivitySubcomponentFactoryProvider;

  private Provider<
          ActivityBuilder_ActivityReportActivity.ActivityReportActivitySubcomponent.Factory>
      activityReportActivitySubcomponentFactoryProvider;

  private Provider<ActivityBuilder_ProductsActivity.ProductsActivitySubcomponent.Factory>
      productsActivitySubcomponentFactoryProvider;

  private Provider<ActivityBuilder_ProductsListActivity.ProductsListActivitySubcomponent.Factory>
      productsListActivitySubcomponentFactoryProvider;

  private Provider<ActivityBuilder_OrderItemListActivity.OrderItemListActivitySubcomponent.Factory>
      orderItemListActivitySubcomponentFactoryProvider;

  private Provider<OkHttpClient> provideOkHttpClientProvider;

  private Provider<ApiService> provideRetrofitProvider;

  private Provider<Repository> providesRepositoryProvider;

  private Provider<Application> applicationProvider;

  private Provider<Context> provideContextProvider;

  private Provider<String> providePreferenceNameProvider;

  private Provider<PreferencesManager> preferencesManagerProvider;

  private Provider<PreferenceHelper> providePreferencesHelperProvider;

  private Provider<AppDatabase> provideAppDatabaseProvider;

  private Provider<ViewModelProviderFactory> viewModelProviderFactoryProvider;

  private Provider<HomeCustomerAdapter> providesHomeCustomerAdapterProvider;

  private Provider<LocationService> provideLocationServiceProvider;

  private Provider<CustomerHistoryAdapter> provideCustomerHistoryAdapterProvider;

  private Provider<PaymentOutstandingAdapter> provideOutstandingAdapterProvider;

  private Provider<CustomerAdapter> providesCustomerAdapterProvider;

  private Provider<CartAdapter> provideCartAdapterProvider;

  private Provider<InvoiceListAdapter> provideInvoiceListAdapterrProvider;

  private Provider<ProductsAdapter> provideProductAdapterProvider;

  private Provider<ProductsListAdapter> provideProductsListAdapterProvider;

  private Provider<OrderItemListAdapter> provideOrderItemListAdapterProvider;

  private DaggerAppComponent(AppModule appModuleParam, Application applicationParam) {

    initialize(appModuleParam, applicationParam);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>>
      getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf() {
    return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(22)
        .put(SplashScreenActivity.class, (Provider) splashScreenActivitySubcomponentFactoryProvider)
        .put(LoginActivity.class, (Provider) loginActivitySubcomponentFactoryProvider)
        .put(
            ForgotPasswordActivity.class,
            (Provider) forgotPasswordActivitySubcomponentFactoryProvider)
        .put(RegionActivity.class, (Provider) regionActivitySubcomponentFactoryProvider)
        .put(MainActivity.class, (Provider) mainActivitySubcomponentFactoryProvider)
        .put(SettingsActivity.class, (Provider) settingsActivitySubcomponentFactoryProvider)
        .put(
            ProductDetailsActivity.class,
            (Provider) productDetailsActivitySubcomponentFactoryProvider)
        .put(CartActivity.class, (Provider) cartActivitySubcomponentFactoryProvider)
        .put(CheckOutActivity.class, (Provider) checkOutActivitySubcomponentFactoryProvider)
        .put(
            CustomerOutstandingActivity.class,
            (Provider) customerOutstandingActivitySubcomponentFactoryProvider)
        .put(
            ExpenseReportActivity.class,
            (Provider) expenseReportActivitySubcomponentFactoryProvider)
        .put(
            SalesAnalysisActivity.class,
            (Provider) salesAnalysisActivitySubcomponentFactoryProvider)
        .put(
            InventoryReportActivity.class,
            (Provider) inventoryReportActivitySubcomponentFactoryProvider)
        .put(
            ComplaintsReportActivity.class,
            (Provider) complaintsReportActivitySubcomponentFactoryProvider)
        .put(AddCustomerActivity.class, (Provider) addCustomerActivitySubcomponentFactoryProvider)
        .put(CheckInActivity.class, (Provider) checkInActivitySubcomponentFactoryProvider)
        .put(NotificationActivity.class, (Provider) notificationActivitySubcomponentFactoryProvider)
        .put(InvoiceListActivity.class, (Provider) invoiceListActivitySubcomponentFactoryProvider)
        .put(
            ActivityReportActivity.class,
            (Provider) activityReportActivitySubcomponentFactoryProvider)
        .put(ProductsActivity.class, (Provider) productsActivitySubcomponentFactoryProvider)
        .put(ProductsListActivity.class, (Provider) productsListActivitySubcomponentFactoryProvider)
        .put(
            OrderItemListActivity.class,
            (Provider) orderItemListActivitySubcomponentFactoryProvider)
        .build();
  }

  private DispatchingAndroidInjector<Activity> getDispatchingAndroidInjectorOfActivity() {
    return DispatchingAndroidInjector_Factory.newInstance(
        getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(),
        Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final AppModule appModuleParam, final Application applicationParam) {
    this.splashScreenActivitySubcomponentFactoryProvider =
        new Provider<
            ActivityBuilder_SplashScreenActivity.SplashScreenActivitySubcomponent.Factory>() {
          @Override
          public ActivityBuilder_SplashScreenActivity.SplashScreenActivitySubcomponent.Factory
              get() {
            return new SplashScreenActivitySubcomponentFactory();
          }
        };
    this.loginActivitySubcomponentFactoryProvider =
        new Provider<ActivityBuilder_LoginActivity.LoginActivitySubcomponent.Factory>() {
          @Override
          public ActivityBuilder_LoginActivity.LoginActivitySubcomponent.Factory get() {
            return new LoginActivitySubcomponentFactory();
          }
        };
    this.forgotPasswordActivitySubcomponentFactoryProvider =
        new Provider<
            ActivityBuilder_ForgotPasswordActivity.ForgotPasswordActivitySubcomponent.Factory>() {
          @Override
          public ActivityBuilder_ForgotPasswordActivity.ForgotPasswordActivitySubcomponent.Factory
              get() {
            return new ForgotPasswordActivitySubcomponentFactory();
          }
        };
    this.regionActivitySubcomponentFactoryProvider =
        new Provider<ActivityBuilder_RegionActivity.RegionActivitySubcomponent.Factory>() {
          @Override
          public ActivityBuilder_RegionActivity.RegionActivitySubcomponent.Factory get() {
            return new RegionActivitySubcomponentFactory();
          }
        };
    this.mainActivitySubcomponentFactoryProvider =
        new Provider<ActivityBuilder_MainActivity.MainActivitySubcomponent.Factory>() {
          @Override
          public ActivityBuilder_MainActivity.MainActivitySubcomponent.Factory get() {
            return new MainActivitySubcomponentFactory();
          }
        };
    this.settingsActivitySubcomponentFactoryProvider =
        new Provider<ActivityBuilder_SettingsActivity.SettingsActivitySubcomponent.Factory>() {
          @Override
          public ActivityBuilder_SettingsActivity.SettingsActivitySubcomponent.Factory get() {
            return new SettingsActivitySubcomponentFactory();
          }
        };
    this.productDetailsActivitySubcomponentFactoryProvider =
        new Provider<
            ActivityBuilder_ItemDetailsActivity.ProductDetailsActivitySubcomponent.Factory>() {
          @Override
          public ActivityBuilder_ItemDetailsActivity.ProductDetailsActivitySubcomponent.Factory
              get() {
            return new ProductDetailsActivitySubcomponentFactory();
          }
        };
    this.cartActivitySubcomponentFactoryProvider =
        new Provider<ActivityBuilder_CartActivity.CartActivitySubcomponent.Factory>() {
          @Override
          public ActivityBuilder_CartActivity.CartActivitySubcomponent.Factory get() {
            return new CartActivitySubcomponentFactory();
          }
        };
    this.checkOutActivitySubcomponentFactoryProvider =
        new Provider<ActivityBuilder_CheckOutActivity.CheckOutActivitySubcomponent.Factory>() {
          @Override
          public ActivityBuilder_CheckOutActivity.CheckOutActivitySubcomponent.Factory get() {
            return new CheckOutActivitySubcomponentFactory();
          }
        };
    this.customerOutstandingActivitySubcomponentFactoryProvider =
        new Provider<
            ActivityBuilder_CustomerOutstandingActivity.CustomerOutstandingActivitySubcomponent
                .Factory>() {
          @Override
          public ActivityBuilder_CustomerOutstandingActivity.CustomerOutstandingActivitySubcomponent
                  .Factory
              get() {
            return new CustomerOutstandingActivitySubcomponentFactory();
          }
        };
    this.expenseReportActivitySubcomponentFactoryProvider =
        new Provider<
            ActivityBuilder_ExpenseReportActivity.ExpenseReportActivitySubcomponent.Factory>() {
          @Override
          public ActivityBuilder_ExpenseReportActivity.ExpenseReportActivitySubcomponent.Factory
              get() {
            return new ExpenseReportActivitySubcomponentFactory();
          }
        };
    this.salesAnalysisActivitySubcomponentFactoryProvider =
        new Provider<
            ActivityBuilder_SalesAnalysisActivity.SalesAnalysisActivitySubcomponent.Factory>() {
          @Override
          public ActivityBuilder_SalesAnalysisActivity.SalesAnalysisActivitySubcomponent.Factory
              get() {
            return new SalesAnalysisActivitySubcomponentFactory();
          }
        };
    this.inventoryReportActivitySubcomponentFactoryProvider =
        new Provider<
            ActivityBuilder_InventoryReportActivity.InventoryReportActivitySubcomponent.Factory>() {
          @Override
          public ActivityBuilder_InventoryReportActivity.InventoryReportActivitySubcomponent.Factory
              get() {
            return new InventoryReportActivitySubcomponentFactory();
          }
        };
    this.complaintsReportActivitySubcomponentFactoryProvider =
        new Provider<
            ActivityBuilder_ComplaintsReportActivity.ComplaintsReportActivitySubcomponent
                .Factory>() {
          @Override
          public ActivityBuilder_ComplaintsReportActivity.ComplaintsReportActivitySubcomponent
                  .Factory
              get() {
            return new ComplaintsReportActivitySubcomponentFactory();
          }
        };
    this.addCustomerActivitySubcomponentFactoryProvider =
        new Provider<
            ActivityBuilder_AddCustomerActivity.AddCustomerActivitySubcomponent.Factory>() {
          @Override
          public ActivityBuilder_AddCustomerActivity.AddCustomerActivitySubcomponent.Factory get() {
            return new AddCustomerActivitySubcomponentFactory();
          }
        };
    this.checkInActivitySubcomponentFactoryProvider =
        new Provider<ActivityBuilder_CheckInActivity.CheckInActivitySubcomponent.Factory>() {
          @Override
          public ActivityBuilder_CheckInActivity.CheckInActivitySubcomponent.Factory get() {
            return new CheckInActivitySubcomponentFactory();
          }
        };
    this.notificationActivitySubcomponentFactoryProvider =
        new Provider<
            ActivityBuilder_NotificationActivity.NotificationActivitySubcomponent.Factory>() {
          @Override
          public ActivityBuilder_NotificationActivity.NotificationActivitySubcomponent.Factory
              get() {
            return new NotificationActivitySubcomponentFactory();
          }
        };
    this.invoiceListActivitySubcomponentFactoryProvider =
        new Provider<
            ActivityBuilder_InvoiceListActivity.InvoiceListActivitySubcomponent.Factory>() {
          @Override
          public ActivityBuilder_InvoiceListActivity.InvoiceListActivitySubcomponent.Factory get() {
            return new InvoiceListActivitySubcomponentFactory();
          }
        };
    this.activityReportActivitySubcomponentFactoryProvider =
        new Provider<
            ActivityBuilder_ActivityReportActivity.ActivityReportActivitySubcomponent.Factory>() {
          @Override
          public ActivityBuilder_ActivityReportActivity.ActivityReportActivitySubcomponent.Factory
              get() {
            return new ActivityReportActivitySubcomponentFactory();
          }
        };
    this.productsActivitySubcomponentFactoryProvider =
        new Provider<ActivityBuilder_ProductsActivity.ProductsActivitySubcomponent.Factory>() {
          @Override
          public ActivityBuilder_ProductsActivity.ProductsActivitySubcomponent.Factory get() {
            return new ProductsActivitySubcomponentFactory();
          }
        };
    this.productsListActivitySubcomponentFactoryProvider =
        new Provider<
            ActivityBuilder_ProductsListActivity.ProductsListActivitySubcomponent.Factory>() {
          @Override
          public ActivityBuilder_ProductsListActivity.ProductsListActivitySubcomponent.Factory
              get() {
            return new ProductsListActivitySubcomponentFactory();
          }
        };
    this.orderItemListActivitySubcomponentFactoryProvider =
        new Provider<
            ActivityBuilder_OrderItemListActivity.OrderItemListActivitySubcomponent.Factory>() {
          @Override
          public ActivityBuilder_OrderItemListActivity.OrderItemListActivitySubcomponent.Factory
              get() {
            return new OrderItemListActivitySubcomponentFactory();
          }
        };
    this.provideOkHttpClientProvider =
        DoubleCheck.provider(AppModule_ProvideOkHttpClientFactory.create(appModuleParam));
    this.provideRetrofitProvider =
        DoubleCheck.provider(
            AppModule_ProvideRetrofitFactory.create(appModuleParam, provideOkHttpClientProvider));
    this.providesRepositoryProvider =
        DoubleCheck.provider(
            AppModule_ProvidesRepositoryFactory.create(appModuleParam, provideRetrofitProvider));
    this.applicationProvider = InstanceFactory.create(applicationParam);
    this.provideContextProvider =
        DoubleCheck.provider(
            AppModule_ProvideContextFactory.create(appModuleParam, applicationProvider));
    this.providePreferenceNameProvider =
        AppModule_ProvidePreferenceNameFactory.create(appModuleParam);
    this.preferencesManagerProvider =
        DoubleCheck.provider(
            PreferencesManager_Factory.create(
                provideContextProvider, providePreferenceNameProvider));
    this.providePreferencesHelperProvider =
        DoubleCheck.provider(
            AppModule_ProvidePreferencesHelperFactory.create(
                appModuleParam, preferencesManagerProvider));
    this.provideAppDatabaseProvider =
        DoubleCheck.provider(
            AppModule_ProvideAppDatabaseFactory.create(appModuleParam, applicationProvider));
    this.viewModelProviderFactoryProvider =
        DoubleCheck.provider(
            ViewModelProviderFactory_Factory.create(
                providesRepositoryProvider,
                providePreferencesHelperProvider,
                provideAppDatabaseProvider));
    this.providesHomeCustomerAdapterProvider =
        DoubleCheck.provider(
            AppModule_ProvidesHomeCustomerAdapterFactory.create(
                appModuleParam, applicationProvider));
    this.provideLocationServiceProvider =
        DoubleCheck.provider(
            AppModule_ProvideLocationServiceFactory.create(appModuleParam, applicationProvider));
    this.provideCustomerHistoryAdapterProvider =
        DoubleCheck.provider(
            AppModule_ProvideCustomerHistoryAdapterFactory.create(
                appModuleParam, applicationProvider));
    this.provideOutstandingAdapterProvider =
        DoubleCheck.provider(
            AppModule_ProvideOutstandingAdapterFactory.create(appModuleParam, applicationProvider));
    this.providesCustomerAdapterProvider =
        DoubleCheck.provider(
            AppModule_ProvidesCustomerAdapterFactory.create(appModuleParam, applicationProvider));
    this.provideCartAdapterProvider =
        DoubleCheck.provider(
            AppModule_ProvideCartAdapterFactory.create(appModuleParam, applicationProvider));
    this.provideInvoiceListAdapterrProvider =
        DoubleCheck.provider(
            AppModule_ProvideInvoiceListAdapterrFactory.create(
                appModuleParam, applicationProvider));
    this.provideProductAdapterProvider =
        DoubleCheck.provider(
            AppModule_ProvideProductAdapterFactory.create(appModuleParam, applicationProvider));
    this.provideProductsListAdapterProvider =
        DoubleCheck.provider(
            AppModule_ProvideProductsListAdapterFactory.create(
                appModuleParam, applicationProvider));
    this.provideOrderItemListAdapterProvider =
        DoubleCheck.provider(
            AppModule_ProvideOrderItemListAdapterFactory.create(
                appModuleParam, applicationProvider));
  }

  @Override
  public void inject(MyApplication myApplication) {
    injectMyApplication(myApplication);
  }

  private MyApplication injectMyApplication(MyApplication instance) {
    MyApplication_MembersInjector.injectActivityDispatchingAndroidInjector(
        instance, getDispatchingAndroidInjectorOfActivity());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private Application application;

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }

    @Override
    public AppComponent build() {
      Preconditions.checkBuilderRequirement(application, Application.class);
      return new DaggerAppComponent(new AppModule(), application);
    }
  }

  private final class SplashScreenActivitySubcomponentFactory
      implements ActivityBuilder_SplashScreenActivity.SplashScreenActivitySubcomponent.Factory {
    @Override
    public ActivityBuilder_SplashScreenActivity.SplashScreenActivitySubcomponent create(
        SplashScreenActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new SplashScreenActivitySubcomponentImpl(arg0);
    }
  }

  private final class SplashScreenActivitySubcomponentImpl
      implements ActivityBuilder_SplashScreenActivity.SplashScreenActivitySubcomponent {
    private SplashScreenActivitySubcomponentImpl(SplashScreenActivity arg0) {}

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newInstance(
          DaggerAppComponent.this.getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    @Override
    public void inject(SplashScreenActivity arg0) {
      injectSplashScreenActivity(arg0);
    }

    private SplashScreenActivity injectSplashScreenActivity(SplashScreenActivity instance) {
      BaseActivity_MembersInjector.injectFragmentAndroidInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      SplashScreenActivity_MembersInjector.injectFactory(
          instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
      return instance;
    }
  }

  private final class LoginActivitySubcomponentFactory
      implements ActivityBuilder_LoginActivity.LoginActivitySubcomponent.Factory {
    @Override
    public ActivityBuilder_LoginActivity.LoginActivitySubcomponent create(LoginActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new LoginActivitySubcomponentImpl(arg0);
    }
  }

  private final class LoginActivitySubcomponentImpl
      implements ActivityBuilder_LoginActivity.LoginActivitySubcomponent {
    private LoginActivitySubcomponentImpl(LoginActivity arg0) {}

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newInstance(
          DaggerAppComponent.this.getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    @Override
    public void inject(LoginActivity arg0) {
      injectLoginActivity(arg0);
    }

    private LoginActivity injectLoginActivity(LoginActivity instance) {
      BaseActivity_MembersInjector.injectFragmentAndroidInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      LoginActivity_MembersInjector.injectFactory(
          instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
      return instance;
    }
  }

  private final class ForgotPasswordActivitySubcomponentFactory
      implements ActivityBuilder_ForgotPasswordActivity.ForgotPasswordActivitySubcomponent.Factory {
    @Override
    public ActivityBuilder_ForgotPasswordActivity.ForgotPasswordActivitySubcomponent create(
        ForgotPasswordActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new ForgotPasswordActivitySubcomponentImpl(arg0);
    }
  }

  private final class ForgotPasswordActivitySubcomponentImpl
      implements ActivityBuilder_ForgotPasswordActivity.ForgotPasswordActivitySubcomponent {
    private ForgotPasswordActivitySubcomponentImpl(ForgotPasswordActivity arg0) {}

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newInstance(
          DaggerAppComponent.this.getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    @Override
    public void inject(ForgotPasswordActivity arg0) {
      injectForgotPasswordActivity(arg0);
    }

    private ForgotPasswordActivity injectForgotPasswordActivity(ForgotPasswordActivity instance) {
      BaseActivity_MembersInjector.injectFragmentAndroidInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      ForgotPasswordActivity_MembersInjector.injectFactory(
          instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
      return instance;
    }
  }

  private final class RegionActivitySubcomponentFactory
      implements ActivityBuilder_RegionActivity.RegionActivitySubcomponent.Factory {
    @Override
    public ActivityBuilder_RegionActivity.RegionActivitySubcomponent create(RegionActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new RegionActivitySubcomponentImpl(arg0);
    }
  }

  private final class RegionActivitySubcomponentImpl
      implements ActivityBuilder_RegionActivity.RegionActivitySubcomponent {
    private RegionActivitySubcomponentImpl(RegionActivity arg0) {}

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newInstance(
          DaggerAppComponent.this.getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    @Override
    public void inject(RegionActivity arg0) {
      injectRegionActivity(arg0);
    }

    private RegionActivity injectRegionActivity(RegionActivity instance) {
      BaseActivity_MembersInjector.injectFragmentAndroidInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      RegionActivity_MembersInjector.injectFactory(
          instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
      return instance;
    }
  }

  private final class MainActivitySubcomponentFactory
      implements ActivityBuilder_MainActivity.MainActivitySubcomponent.Factory {
    @Override
    public ActivityBuilder_MainActivity.MainActivitySubcomponent create(MainActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new MainActivitySubcomponentImpl(arg0);
    }
  }

  private final class MainActivitySubcomponentImpl
      implements ActivityBuilder_MainActivity.MainActivitySubcomponent {
    private Provider<FragmentBuilder_ContributeHomeFragment.HomeFragmentSubcomponent.Factory>
        homeFragmentSubcomponentFactoryProvider;

    private Provider<
            FragmentBuilder_ContributeChangePasswordFragment.ChangePasswordFragmentSubcomponent
                .Factory>
        changePasswordFragmentSubcomponentFactoryProvider;

    private Provider<
            FragmentBuilder_ContributeComplaintFragment.ComplaintFragmentSubcomponent.Factory>
        complaintFragmentSubcomponentFactoryProvider;

    private Provider<
            FragmentBuilder_ContributeFeedbackFragment.FeedbackFragmentSubcomponent.Factory>
        feedbackFragmentSubcomponentFactoryProvider;

    private Provider<
            FragmentBuilder_ContributeCustomerDetailsFragment.CustomerDetailsFragmentSubcomponent
                .Factory>
        customerDetailsFragmentSubcomponentFactoryProvider;

    private Provider<
            FragmentBuilder_ContributeAddressDetailsFragment.AddressDetailsFragmentSubcomponent
                .Factory>
        addressDetailsFragmentSubcomponentFactoryProvider;

    private Provider<
            FragmentBuilder_ContributePurchaseManageFragment.PurchaseManagerFragmentSubcomponent
                .Factory>
        purchaseManagerFragmentSubcomponentFactoryProvider;

    private Provider<
            FragmentBuilder_ContributeOwnerDetailsFragment.OwnerDetailsFragmentSubcomponent.Factory>
        ownerDetailsFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuilder_ContributeLeadFragment.LeadFragmentSubcomponent.Factory>
        leadFragmentSubcomponentFactoryProvider;

    private Provider<
            FragmentBuilder_ContributeInventoryFragment.InventoryFragmentSubcomponent.Factory>
        inventoryFragmentSubcomponentFactoryProvider;

    private Provider<
            FragmentBuilder_ContributeCustomerHistoryFragment.CustomerHistoryFragmentSubcomponent
                .Factory>
        customerHistoryFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuilder_ContributePaymentFragment.PaymentFragmentSubcomponent.Factory>
        paymentFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuilder_ContributeExpenseFragment.ExpenseFragmentSubcomponent.Factory>
        expenseFragmentSubcomponentFactoryProvider;

    private Provider<
            FragmentBuilder_ContributeUserCheckOutFragment.UserCheckOutFragmentSubcomponent.Factory>
        userCheckOutFragmentSubcomponentFactoryProvider;

    private Provider<
            FragmentBuilder_ContributeMyOrdersFragment.MyOrdersFragmentSubcomponent.Factory>
        myOrdersFragmentSubcomponentFactoryProvider;

    private Provider<
            FragmentBuilder_ContributeCreateActivityFragment.CreateActivityFragmentSubcomponent
                .Factory>
        createActivityFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuilder_ReportListFragment.ReportListFragmentSubcomponent.Factory>
        reportListFragmentSubcomponentFactoryProvider;

    private Provider<
            FragmentBuilder_ContributeCustomerFragment.CustomerFragmentSubcomponent.Factory>
        customerFragmentSubcomponentFactoryProvider;

    private MainActivitySubcomponentImpl(MainActivity arg0) {

      initialize(arg0);
    }

    private Map<Class<?>, Provider<AndroidInjector.Factory<?>>>
        getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf() {
      return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(40)
          .put(
              SplashScreenActivity.class,
              (Provider) DaggerAppComponent.this.splashScreenActivitySubcomponentFactoryProvider)
          .put(
              LoginActivity.class,
              (Provider) DaggerAppComponent.this.loginActivitySubcomponentFactoryProvider)
          .put(
              ForgotPasswordActivity.class,
              (Provider) DaggerAppComponent.this.forgotPasswordActivitySubcomponentFactoryProvider)
          .put(
              RegionActivity.class,
              (Provider) DaggerAppComponent.this.regionActivitySubcomponentFactoryProvider)
          .put(
              MainActivity.class,
              (Provider) DaggerAppComponent.this.mainActivitySubcomponentFactoryProvider)
          .put(
              SettingsActivity.class,
              (Provider) DaggerAppComponent.this.settingsActivitySubcomponentFactoryProvider)
          .put(
              ProductDetailsActivity.class,
              (Provider) DaggerAppComponent.this.productDetailsActivitySubcomponentFactoryProvider)
          .put(
              CartActivity.class,
              (Provider) DaggerAppComponent.this.cartActivitySubcomponentFactoryProvider)
          .put(
              CheckOutActivity.class,
              (Provider) DaggerAppComponent.this.checkOutActivitySubcomponentFactoryProvider)
          .put(
              CustomerOutstandingActivity.class,
              (Provider)
                  DaggerAppComponent.this.customerOutstandingActivitySubcomponentFactoryProvider)
          .put(
              ExpenseReportActivity.class,
              (Provider) DaggerAppComponent.this.expenseReportActivitySubcomponentFactoryProvider)
          .put(
              SalesAnalysisActivity.class,
              (Provider) DaggerAppComponent.this.salesAnalysisActivitySubcomponentFactoryProvider)
          .put(
              InventoryReportActivity.class,
              (Provider) DaggerAppComponent.this.inventoryReportActivitySubcomponentFactoryProvider)
          .put(
              ComplaintsReportActivity.class,
              (Provider)
                  DaggerAppComponent.this.complaintsReportActivitySubcomponentFactoryProvider)
          .put(
              AddCustomerActivity.class,
              (Provider) DaggerAppComponent.this.addCustomerActivitySubcomponentFactoryProvider)
          .put(
              CheckInActivity.class,
              (Provider) DaggerAppComponent.this.checkInActivitySubcomponentFactoryProvider)
          .put(
              NotificationActivity.class,
              (Provider) DaggerAppComponent.this.notificationActivitySubcomponentFactoryProvider)
          .put(
              InvoiceListActivity.class,
              (Provider) DaggerAppComponent.this.invoiceListActivitySubcomponentFactoryProvider)
          .put(
              ActivityReportActivity.class,
              (Provider) DaggerAppComponent.this.activityReportActivitySubcomponentFactoryProvider)
          .put(
              ProductsActivity.class,
              (Provider) DaggerAppComponent.this.productsActivitySubcomponentFactoryProvider)
          .put(
              ProductsListActivity.class,
              (Provider) DaggerAppComponent.this.productsListActivitySubcomponentFactoryProvider)
          .put(
              OrderItemListActivity.class,
              (Provider) DaggerAppComponent.this.orderItemListActivitySubcomponentFactoryProvider)
          .put(HomeFragment.class, (Provider) homeFragmentSubcomponentFactoryProvider)
          .put(
              ChangePasswordFragment.class,
              (Provider) changePasswordFragmentSubcomponentFactoryProvider)
          .put(ComplaintFragment.class, (Provider) complaintFragmentSubcomponentFactoryProvider)
          .put(FeedbackFragment.class, (Provider) feedbackFragmentSubcomponentFactoryProvider)
          .put(
              CustomerDetailsFragment.class,
              (Provider) customerDetailsFragmentSubcomponentFactoryProvider)
          .put(
              AddressDetailsFragment.class,
              (Provider) addressDetailsFragmentSubcomponentFactoryProvider)
          .put(
              PurchaseManagerFragment.class,
              (Provider) purchaseManagerFragmentSubcomponentFactoryProvider)
          .put(
              OwnerDetailsFragment.class,
              (Provider) ownerDetailsFragmentSubcomponentFactoryProvider)
          .put(LeadFragment.class, (Provider) leadFragmentSubcomponentFactoryProvider)
          .put(InventoryFragment.class, (Provider) inventoryFragmentSubcomponentFactoryProvider)
          .put(
              CustomerHistoryFragment.class,
              (Provider) customerHistoryFragmentSubcomponentFactoryProvider)
          .put(PaymentFragment.class, (Provider) paymentFragmentSubcomponentFactoryProvider)
          .put(ExpenseFragment.class, (Provider) expenseFragmentSubcomponentFactoryProvider)
          .put(
              UserCheckOutFragment.class,
              (Provider) userCheckOutFragmentSubcomponentFactoryProvider)
          .put(MyOrdersFragment.class, (Provider) myOrdersFragmentSubcomponentFactoryProvider)
          .put(
              CreateActivityFragment.class,
              (Provider) createActivityFragmentSubcomponentFactoryProvider)
          .put(ReportListFragment.class, (Provider) reportListFragmentSubcomponentFactoryProvider)
          .put(CustomerFragment.class, (Provider) customerFragmentSubcomponentFactoryProvider)
          .build();
    }

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newInstance(
          getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MainActivity arg0) {
      this.homeFragmentSubcomponentFactoryProvider =
          new Provider<FragmentBuilder_ContributeHomeFragment.HomeFragmentSubcomponent.Factory>() {
            @Override
            public FragmentBuilder_ContributeHomeFragment.HomeFragmentSubcomponent.Factory get() {
              return new HomeFragmentSubcomponentFactory();
            }
          };
      this.changePasswordFragmentSubcomponentFactoryProvider =
          new Provider<
              FragmentBuilder_ContributeChangePasswordFragment.ChangePasswordFragmentSubcomponent
                  .Factory>() {
            @Override
            public FragmentBuilder_ContributeChangePasswordFragment
                    .ChangePasswordFragmentSubcomponent.Factory
                get() {
              return new ChangePasswordFragmentSubcomponentFactory();
            }
          };
      this.complaintFragmentSubcomponentFactoryProvider =
          new Provider<
              FragmentBuilder_ContributeComplaintFragment.ComplaintFragmentSubcomponent.Factory>() {
            @Override
            public FragmentBuilder_ContributeComplaintFragment.ComplaintFragmentSubcomponent.Factory
                get() {
              return new ComplaintFragmentSubcomponentFactory();
            }
          };
      this.feedbackFragmentSubcomponentFactoryProvider =
          new Provider<
              FragmentBuilder_ContributeFeedbackFragment.FeedbackFragmentSubcomponent.Factory>() {
            @Override
            public FragmentBuilder_ContributeFeedbackFragment.FeedbackFragmentSubcomponent.Factory
                get() {
              return new FeedbackFragmentSubcomponentFactory();
            }
          };
      this.customerDetailsFragmentSubcomponentFactoryProvider =
          new Provider<
              FragmentBuilder_ContributeCustomerDetailsFragment.CustomerDetailsFragmentSubcomponent
                  .Factory>() {
            @Override
            public FragmentBuilder_ContributeCustomerDetailsFragment
                    .CustomerDetailsFragmentSubcomponent.Factory
                get() {
              return new CustomerDetailsFragmentSubcomponentFactory();
            }
          };
      this.addressDetailsFragmentSubcomponentFactoryProvider =
          new Provider<
              FragmentBuilder_ContributeAddressDetailsFragment.AddressDetailsFragmentSubcomponent
                  .Factory>() {
            @Override
            public FragmentBuilder_ContributeAddressDetailsFragment
                    .AddressDetailsFragmentSubcomponent.Factory
                get() {
              return new AddressDetailsFragmentSubcomponentFactory();
            }
          };
      this.purchaseManagerFragmentSubcomponentFactoryProvider =
          new Provider<
              FragmentBuilder_ContributePurchaseManageFragment.PurchaseManagerFragmentSubcomponent
                  .Factory>() {
            @Override
            public FragmentBuilder_ContributePurchaseManageFragment
                    .PurchaseManagerFragmentSubcomponent.Factory
                get() {
              return new PurchaseManagerFragmentSubcomponentFactory();
            }
          };
      this.ownerDetailsFragmentSubcomponentFactoryProvider =
          new Provider<
              FragmentBuilder_ContributeOwnerDetailsFragment.OwnerDetailsFragmentSubcomponent
                  .Factory>() {
            @Override
            public FragmentBuilder_ContributeOwnerDetailsFragment.OwnerDetailsFragmentSubcomponent
                    .Factory
                get() {
              return new OwnerDetailsFragmentSubcomponentFactory();
            }
          };
      this.leadFragmentSubcomponentFactoryProvider =
          new Provider<FragmentBuilder_ContributeLeadFragment.LeadFragmentSubcomponent.Factory>() {
            @Override
            public FragmentBuilder_ContributeLeadFragment.LeadFragmentSubcomponent.Factory get() {
              return new LeadFragmentSubcomponentFactory();
            }
          };
      this.inventoryFragmentSubcomponentFactoryProvider =
          new Provider<
              FragmentBuilder_ContributeInventoryFragment.InventoryFragmentSubcomponent.Factory>() {
            @Override
            public FragmentBuilder_ContributeInventoryFragment.InventoryFragmentSubcomponent.Factory
                get() {
              return new InventoryFragmentSubcomponentFactory();
            }
          };
      this.customerHistoryFragmentSubcomponentFactoryProvider =
          new Provider<
              FragmentBuilder_ContributeCustomerHistoryFragment.CustomerHistoryFragmentSubcomponent
                  .Factory>() {
            @Override
            public FragmentBuilder_ContributeCustomerHistoryFragment
                    .CustomerHistoryFragmentSubcomponent.Factory
                get() {
              return new CustomerHistoryFragmentSubcomponentFactory();
            }
          };
      this.paymentFragmentSubcomponentFactoryProvider =
          new Provider<
              FragmentBuilder_ContributePaymentFragment.PaymentFragmentSubcomponent.Factory>() {
            @Override
            public FragmentBuilder_ContributePaymentFragment.PaymentFragmentSubcomponent.Factory
                get() {
              return new PaymentFragmentSubcomponentFactory();
            }
          };
      this.expenseFragmentSubcomponentFactoryProvider =
          new Provider<
              FragmentBuilder_ContributeExpenseFragment.ExpenseFragmentSubcomponent.Factory>() {
            @Override
            public FragmentBuilder_ContributeExpenseFragment.ExpenseFragmentSubcomponent.Factory
                get() {
              return new ExpenseFragmentSubcomponentFactory();
            }
          };
      this.userCheckOutFragmentSubcomponentFactoryProvider =
          new Provider<
              FragmentBuilder_ContributeUserCheckOutFragment.UserCheckOutFragmentSubcomponent
                  .Factory>() {
            @Override
            public FragmentBuilder_ContributeUserCheckOutFragment.UserCheckOutFragmentSubcomponent
                    .Factory
                get() {
              return new UserCheckOutFragmentSubcomponentFactory();
            }
          };
      this.myOrdersFragmentSubcomponentFactoryProvider =
          new Provider<
              FragmentBuilder_ContributeMyOrdersFragment.MyOrdersFragmentSubcomponent.Factory>() {
            @Override
            public FragmentBuilder_ContributeMyOrdersFragment.MyOrdersFragmentSubcomponent.Factory
                get() {
              return new MyOrdersFragmentSubcomponentFactory();
            }
          };
      this.createActivityFragmentSubcomponentFactoryProvider =
          new Provider<
              FragmentBuilder_ContributeCreateActivityFragment.CreateActivityFragmentSubcomponent
                  .Factory>() {
            @Override
            public FragmentBuilder_ContributeCreateActivityFragment
                    .CreateActivityFragmentSubcomponent.Factory
                get() {
              return new CreateActivityFragmentSubcomponentFactory();
            }
          };
      this.reportListFragmentSubcomponentFactoryProvider =
          new Provider<
              FragmentBuilder_ReportListFragment.ReportListFragmentSubcomponent.Factory>() {
            @Override
            public FragmentBuilder_ReportListFragment.ReportListFragmentSubcomponent.Factory get() {
              return new ReportListFragmentSubcomponentFactory();
            }
          };
      this.customerFragmentSubcomponentFactoryProvider =
          new Provider<
              FragmentBuilder_ContributeCustomerFragment.CustomerFragmentSubcomponent.Factory>() {
            @Override
            public FragmentBuilder_ContributeCustomerFragment.CustomerFragmentSubcomponent.Factory
                get() {
              return new CustomerFragmentSubcomponentFactory();
            }
          };
    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);
    }

    private MainActivity injectMainActivity(MainActivity instance) {
      BaseActivity_MembersInjector.injectFragmentAndroidInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      MainActivity_MembersInjector.injectFactory(
          instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
      return instance;
    }

    private final class HomeFragmentSubcomponentFactory
        implements FragmentBuilder_ContributeHomeFragment.HomeFragmentSubcomponent.Factory {
      @Override
      public FragmentBuilder_ContributeHomeFragment.HomeFragmentSubcomponent create(
          HomeFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new HomeFragmentSubcomponentImpl(arg0);
      }
    }

    private final class HomeFragmentSubcomponentImpl
        implements FragmentBuilder_ContributeHomeFragment.HomeFragmentSubcomponent {
      private HomeFragmentSubcomponentImpl(HomeFragment arg0) {}

      @Override
      public void inject(HomeFragment arg0) {
        injectHomeFragment(arg0);
      }

      private HomeFragment injectHomeFragment(HomeFragment instance) {
        BaseFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
        HomeFragment_MembersInjector.injectMAdapter(
            instance, DaggerAppComponent.this.providesHomeCustomerAdapterProvider.get());
        return instance;
      }
    }

    private final class ChangePasswordFragmentSubcomponentFactory
        implements FragmentBuilder_ContributeChangePasswordFragment
            .ChangePasswordFragmentSubcomponent.Factory {
      @Override
      public FragmentBuilder_ContributeChangePasswordFragment.ChangePasswordFragmentSubcomponent
          create(ChangePasswordFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new ChangePasswordFragmentSubcomponentImpl(arg0);
      }
    }

    private final class ChangePasswordFragmentSubcomponentImpl
        implements FragmentBuilder_ContributeChangePasswordFragment
            .ChangePasswordFragmentSubcomponent {
      private ChangePasswordFragmentSubcomponentImpl(ChangePasswordFragment arg0) {}

      @Override
      public void inject(ChangePasswordFragment arg0) {
        injectChangePasswordFragment(arg0);
      }

      private ChangePasswordFragment injectChangePasswordFragment(ChangePasswordFragment instance) {
        BaseFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
        return instance;
      }
    }

    private final class ComplaintFragmentSubcomponentFactory
        implements FragmentBuilder_ContributeComplaintFragment.ComplaintFragmentSubcomponent
            .Factory {
      @Override
      public FragmentBuilder_ContributeComplaintFragment.ComplaintFragmentSubcomponent create(
          ComplaintFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new ComplaintFragmentSubcomponentImpl(arg0);
      }
    }

    private final class ComplaintFragmentSubcomponentImpl
        implements FragmentBuilder_ContributeComplaintFragment.ComplaintFragmentSubcomponent {
      private ComplaintFragmentSubcomponentImpl(ComplaintFragment arg0) {}

      @Override
      public void inject(ComplaintFragment arg0) {
        injectComplaintFragment(arg0);
      }

      private ComplaintFragment injectComplaintFragment(ComplaintFragment instance) {
        BaseFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
        return instance;
      }
    }

    private final class FeedbackFragmentSubcomponentFactory
        implements FragmentBuilder_ContributeFeedbackFragment.FeedbackFragmentSubcomponent.Factory {
      @Override
      public FragmentBuilder_ContributeFeedbackFragment.FeedbackFragmentSubcomponent create(
          FeedbackFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new FeedbackFragmentSubcomponentImpl(arg0);
      }
    }

    private final class FeedbackFragmentSubcomponentImpl
        implements FragmentBuilder_ContributeFeedbackFragment.FeedbackFragmentSubcomponent {
      private FeedbackFragmentSubcomponentImpl(FeedbackFragment arg0) {}

      @Override
      public void inject(FeedbackFragment arg0) {
        injectFeedbackFragment(arg0);
      }

      private FeedbackFragment injectFeedbackFragment(FeedbackFragment instance) {
        BaseFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
        return instance;
      }
    }

    private final class CustomerDetailsFragmentSubcomponentFactory
        implements FragmentBuilder_ContributeCustomerDetailsFragment
            .CustomerDetailsFragmentSubcomponent.Factory {
      @Override
      public FragmentBuilder_ContributeCustomerDetailsFragment.CustomerDetailsFragmentSubcomponent
          create(CustomerDetailsFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new CustomerDetailsFragmentSubcomponentImpl(arg0);
      }
    }

    private final class CustomerDetailsFragmentSubcomponentImpl
        implements FragmentBuilder_ContributeCustomerDetailsFragment
            .CustomerDetailsFragmentSubcomponent {
      private CustomerDetailsFragmentSubcomponentImpl(CustomerDetailsFragment arg0) {}

      @Override
      public void inject(CustomerDetailsFragment arg0) {
        injectCustomerDetailsFragment(arg0);
      }

      private CustomerDetailsFragment injectCustomerDetailsFragment(
          CustomerDetailsFragment instance) {
        BaseFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
        return instance;
      }
    }

    private final class AddressDetailsFragmentSubcomponentFactory
        implements FragmentBuilder_ContributeAddressDetailsFragment
            .AddressDetailsFragmentSubcomponent.Factory {
      @Override
      public FragmentBuilder_ContributeAddressDetailsFragment.AddressDetailsFragmentSubcomponent
          create(AddressDetailsFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new AddressDetailsFragmentSubcomponentImpl(arg0);
      }
    }

    private final class AddressDetailsFragmentSubcomponentImpl
        implements FragmentBuilder_ContributeAddressDetailsFragment
            .AddressDetailsFragmentSubcomponent {
      private AddressDetailsFragmentSubcomponentImpl(AddressDetailsFragment arg0) {}

      @Override
      public void inject(AddressDetailsFragment arg0) {
        injectAddressDetailsFragment(arg0);
      }

      private AddressDetailsFragment injectAddressDetailsFragment(AddressDetailsFragment instance) {
        BaseFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
        return instance;
      }
    }

    private final class PurchaseManagerFragmentSubcomponentFactory
        implements FragmentBuilder_ContributePurchaseManageFragment
            .PurchaseManagerFragmentSubcomponent.Factory {
      @Override
      public FragmentBuilder_ContributePurchaseManageFragment.PurchaseManagerFragmentSubcomponent
          create(PurchaseManagerFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new PurchaseManagerFragmentSubcomponentImpl(arg0);
      }
    }

    private final class PurchaseManagerFragmentSubcomponentImpl
        implements FragmentBuilder_ContributePurchaseManageFragment
            .PurchaseManagerFragmentSubcomponent {
      private PurchaseManagerFragmentSubcomponentImpl(PurchaseManagerFragment arg0) {}

      @Override
      public void inject(PurchaseManagerFragment arg0) {
        injectPurchaseManagerFragment(arg0);
      }

      private PurchaseManagerFragment injectPurchaseManagerFragment(
          PurchaseManagerFragment instance) {
        BaseFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
        return instance;
      }
    }

    private final class OwnerDetailsFragmentSubcomponentFactory
        implements FragmentBuilder_ContributeOwnerDetailsFragment.OwnerDetailsFragmentSubcomponent
            .Factory {
      @Override
      public FragmentBuilder_ContributeOwnerDetailsFragment.OwnerDetailsFragmentSubcomponent create(
          OwnerDetailsFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new OwnerDetailsFragmentSubcomponentImpl(arg0);
      }
    }

    private final class OwnerDetailsFragmentSubcomponentImpl
        implements FragmentBuilder_ContributeOwnerDetailsFragment.OwnerDetailsFragmentSubcomponent {
      private OwnerDetailsFragmentSubcomponentImpl(OwnerDetailsFragment arg0) {}

      @Override
      public void inject(OwnerDetailsFragment arg0) {
        injectOwnerDetailsFragment(arg0);
      }

      private OwnerDetailsFragment injectOwnerDetailsFragment(OwnerDetailsFragment instance) {
        BaseFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
        return instance;
      }
    }

    private final class LeadFragmentSubcomponentFactory
        implements FragmentBuilder_ContributeLeadFragment.LeadFragmentSubcomponent.Factory {
      @Override
      public FragmentBuilder_ContributeLeadFragment.LeadFragmentSubcomponent create(
          LeadFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new LeadFragmentSubcomponentImpl(arg0);
      }
    }

    private final class LeadFragmentSubcomponentImpl
        implements FragmentBuilder_ContributeLeadFragment.LeadFragmentSubcomponent {
      private LeadFragmentSubcomponentImpl(LeadFragment arg0) {}

      @Override
      public void inject(LeadFragment arg0) {
        injectLeadFragment(arg0);
      }

      private LeadFragment injectLeadFragment(LeadFragment instance) {
        BaseFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
        LeadFragment_MembersInjector.injectLocationService(
            instance, DaggerAppComponent.this.provideLocationServiceProvider.get());
        return instance;
      }
    }

    private final class InventoryFragmentSubcomponentFactory
        implements FragmentBuilder_ContributeInventoryFragment.InventoryFragmentSubcomponent
            .Factory {
      @Override
      public FragmentBuilder_ContributeInventoryFragment.InventoryFragmentSubcomponent create(
          InventoryFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new InventoryFragmentSubcomponentImpl(arg0);
      }
    }

    private final class InventoryFragmentSubcomponentImpl
        implements FragmentBuilder_ContributeInventoryFragment.InventoryFragmentSubcomponent {
      private InventoryFragmentSubcomponentImpl(InventoryFragment arg0) {}

      @Override
      public void inject(InventoryFragment arg0) {
        injectInventoryFragment(arg0);
      }

      private InventoryFragment injectInventoryFragment(InventoryFragment instance) {
        BaseFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
        return instance;
      }
    }

    private final class CustomerHistoryFragmentSubcomponentFactory
        implements FragmentBuilder_ContributeCustomerHistoryFragment
            .CustomerHistoryFragmentSubcomponent.Factory {
      @Override
      public FragmentBuilder_ContributeCustomerHistoryFragment.CustomerHistoryFragmentSubcomponent
          create(CustomerHistoryFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new CustomerHistoryFragmentSubcomponentImpl(arg0);
      }
    }

    private final class CustomerHistoryFragmentSubcomponentImpl
        implements FragmentBuilder_ContributeCustomerHistoryFragment
            .CustomerHistoryFragmentSubcomponent {
      private CustomerHistoryFragmentSubcomponentImpl(CustomerHistoryFragment arg0) {}

      @Override
      public void inject(CustomerHistoryFragment arg0) {
        injectCustomerHistoryFragment(arg0);
      }

      private CustomerHistoryFragment injectCustomerHistoryFragment(
          CustomerHistoryFragment instance) {
        BaseFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
        CustomerHistoryFragment_MembersInjector.injectMAdapter(
            instance, DaggerAppComponent.this.provideCustomerHistoryAdapterProvider.get());
        return instance;
      }
    }

    private final class PaymentFragmentSubcomponentFactory
        implements FragmentBuilder_ContributePaymentFragment.PaymentFragmentSubcomponent.Factory {
      @Override
      public FragmentBuilder_ContributePaymentFragment.PaymentFragmentSubcomponent create(
          PaymentFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new PaymentFragmentSubcomponentImpl(arg0);
      }
    }

    private final class PaymentFragmentSubcomponentImpl
        implements FragmentBuilder_ContributePaymentFragment.PaymentFragmentSubcomponent {
      private PaymentFragmentSubcomponentImpl(PaymentFragment arg0) {}

      @Override
      public void inject(PaymentFragment arg0) {
        injectPaymentFragment(arg0);
      }

      private PaymentFragment injectPaymentFragment(PaymentFragment instance) {
        BaseFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
        PaymentFragment_MembersInjector.injectMAdapter(
            instance, DaggerAppComponent.this.provideOutstandingAdapterProvider.get());
        return instance;
      }
    }

    private final class ExpenseFragmentSubcomponentFactory
        implements FragmentBuilder_ContributeExpenseFragment.ExpenseFragmentSubcomponent.Factory {
      @Override
      public FragmentBuilder_ContributeExpenseFragment.ExpenseFragmentSubcomponent create(
          ExpenseFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new ExpenseFragmentSubcomponentImpl(arg0);
      }
    }

    private final class ExpenseFragmentSubcomponentImpl
        implements FragmentBuilder_ContributeExpenseFragment.ExpenseFragmentSubcomponent {
      private ExpenseFragmentSubcomponentImpl(ExpenseFragment arg0) {}

      @Override
      public void inject(ExpenseFragment arg0) {
        injectExpenseFragment(arg0);
      }

      private ExpenseFragment injectExpenseFragment(ExpenseFragment instance) {
        BaseFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
        return instance;
      }
    }

    private final class UserCheckOutFragmentSubcomponentFactory
        implements FragmentBuilder_ContributeUserCheckOutFragment.UserCheckOutFragmentSubcomponent
            .Factory {
      @Override
      public FragmentBuilder_ContributeUserCheckOutFragment.UserCheckOutFragmentSubcomponent create(
          UserCheckOutFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new UserCheckOutFragmentSubcomponentImpl(arg0);
      }
    }

    private final class UserCheckOutFragmentSubcomponentImpl
        implements FragmentBuilder_ContributeUserCheckOutFragment.UserCheckOutFragmentSubcomponent {
      private UserCheckOutFragmentSubcomponentImpl(UserCheckOutFragment arg0) {}

      @Override
      public void inject(UserCheckOutFragment arg0) {
        injectUserCheckOutFragment(arg0);
      }

      private UserCheckOutFragment injectUserCheckOutFragment(UserCheckOutFragment instance) {
        BaseFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
        return instance;
      }
    }

    private final class MyOrdersFragmentSubcomponentFactory
        implements FragmentBuilder_ContributeMyOrdersFragment.MyOrdersFragmentSubcomponent.Factory {
      @Override
      public FragmentBuilder_ContributeMyOrdersFragment.MyOrdersFragmentSubcomponent create(
          MyOrdersFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new MyOrdersFragmentSubcomponentImpl(arg0);
      }
    }

    private final class MyOrdersFragmentSubcomponentImpl
        implements FragmentBuilder_ContributeMyOrdersFragment.MyOrdersFragmentSubcomponent {
      private MyOrdersFragmentSubcomponentImpl(MyOrdersFragment arg0) {}

      @Override
      public void inject(MyOrdersFragment arg0) {
        injectMyOrdersFragment(arg0);
      }

      private MyOrdersFragment injectMyOrdersFragment(MyOrdersFragment instance) {
        BaseFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
        return instance;
      }
    }

    private final class CreateActivityFragmentSubcomponentFactory
        implements FragmentBuilder_ContributeCreateActivityFragment
            .CreateActivityFragmentSubcomponent.Factory {
      @Override
      public FragmentBuilder_ContributeCreateActivityFragment.CreateActivityFragmentSubcomponent
          create(CreateActivityFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new CreateActivityFragmentSubcomponentImpl(arg0);
      }
    }

    private final class CreateActivityFragmentSubcomponentImpl
        implements FragmentBuilder_ContributeCreateActivityFragment
            .CreateActivityFragmentSubcomponent {
      private CreateActivityFragmentSubcomponentImpl(CreateActivityFragment arg0) {}

      @Override
      public void inject(CreateActivityFragment arg0) {
        injectCreateActivityFragment(arg0);
      }

      private CreateActivityFragment injectCreateActivityFragment(CreateActivityFragment instance) {
        BaseFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
        CreateActivityFragment_MembersInjector.injectLocationService(
            instance, DaggerAppComponent.this.provideLocationServiceProvider.get());
        return instance;
      }
    }

    private final class ReportListFragmentSubcomponentFactory
        implements FragmentBuilder_ReportListFragment.ReportListFragmentSubcomponent.Factory {
      @Override
      public FragmentBuilder_ReportListFragment.ReportListFragmentSubcomponent create(
          ReportListFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new ReportListFragmentSubcomponentImpl(arg0);
      }
    }

    private final class ReportListFragmentSubcomponentImpl
        implements FragmentBuilder_ReportListFragment.ReportListFragmentSubcomponent {
      private ReportListFragmentSubcomponentImpl(ReportListFragment arg0) {}

      @Override
      public void inject(ReportListFragment arg0) {
        injectReportListFragment(arg0);
      }

      private ReportListFragment injectReportListFragment(ReportListFragment instance) {
        BaseFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
        return instance;
      }
    }

    private final class CustomerFragmentSubcomponentFactory
        implements FragmentBuilder_ContributeCustomerFragment.CustomerFragmentSubcomponent.Factory {
      @Override
      public FragmentBuilder_ContributeCustomerFragment.CustomerFragmentSubcomponent create(
          CustomerFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new CustomerFragmentSubcomponentImpl(arg0);
      }
    }

    private final class CustomerFragmentSubcomponentImpl
        implements FragmentBuilder_ContributeCustomerFragment.CustomerFragmentSubcomponent {
      private CustomerFragmentSubcomponentImpl(CustomerFragment arg0) {}

      @Override
      public void inject(CustomerFragment arg0) {
        injectCustomerFragment(arg0);
      }

      private CustomerFragment injectCustomerFragment(CustomerFragment instance) {
        BaseFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
        CustomerFragment_MembersInjector.injectMAdapter(
            instance, DaggerAppComponent.this.providesCustomerAdapterProvider.get());
        return instance;
      }
    }
  }

  private final class SettingsActivitySubcomponentFactory
      implements ActivityBuilder_SettingsActivity.SettingsActivitySubcomponent.Factory {
    @Override
    public ActivityBuilder_SettingsActivity.SettingsActivitySubcomponent create(
        SettingsActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new SettingsActivitySubcomponentImpl(arg0);
    }
  }

  private final class SettingsActivitySubcomponentImpl
      implements ActivityBuilder_SettingsActivity.SettingsActivitySubcomponent {
    private SettingsActivitySubcomponentImpl(SettingsActivity arg0) {}

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newInstance(
          DaggerAppComponent.this.getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    @Override
    public void inject(SettingsActivity arg0) {
      injectSettingsActivity(arg0);
    }

    private SettingsActivity injectSettingsActivity(SettingsActivity instance) {
      BaseActivity_MembersInjector.injectFragmentAndroidInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      SettingsActivity_MembersInjector.injectFactory(
          instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
      return instance;
    }
  }

  private final class ProductDetailsActivitySubcomponentFactory
      implements ActivityBuilder_ItemDetailsActivity.ProductDetailsActivitySubcomponent.Factory {
    @Override
    public ActivityBuilder_ItemDetailsActivity.ProductDetailsActivitySubcomponent create(
        ProductDetailsActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new ProductDetailsActivitySubcomponentImpl(arg0);
    }
  }

  private final class ProductDetailsActivitySubcomponentImpl
      implements ActivityBuilder_ItemDetailsActivity.ProductDetailsActivitySubcomponent {
    private ProductDetailsActivitySubcomponentImpl(ProductDetailsActivity arg0) {}

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newInstance(
          DaggerAppComponent.this.getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    @Override
    public void inject(ProductDetailsActivity arg0) {
      injectProductDetailsActivity(arg0);
    }

    private ProductDetailsActivity injectProductDetailsActivity(ProductDetailsActivity instance) {
      BaseActivity_MembersInjector.injectFragmentAndroidInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      ProductDetailsActivity_MembersInjector.injectFactory(
          instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
      return instance;
    }
  }

  private final class CartActivitySubcomponentFactory
      implements ActivityBuilder_CartActivity.CartActivitySubcomponent.Factory {
    @Override
    public ActivityBuilder_CartActivity.CartActivitySubcomponent create(CartActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new CartActivitySubcomponentImpl(arg0);
    }
  }

  private final class CartActivitySubcomponentImpl
      implements ActivityBuilder_CartActivity.CartActivitySubcomponent {
    private CartActivitySubcomponentImpl(CartActivity arg0) {}

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newInstance(
          DaggerAppComponent.this.getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    @Override
    public void inject(CartActivity arg0) {
      injectCartActivity(arg0);
    }

    private CartActivity injectCartActivity(CartActivity instance) {
      BaseActivity_MembersInjector.injectFragmentAndroidInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      CartActivity_MembersInjector.injectFactory(
          instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
      CartActivity_MembersInjector.injectCartListAdapter(
          instance, DaggerAppComponent.this.provideCartAdapterProvider.get());
      return instance;
    }
  }

  private final class CheckOutActivitySubcomponentFactory
      implements ActivityBuilder_CheckOutActivity.CheckOutActivitySubcomponent.Factory {
    @Override
    public ActivityBuilder_CheckOutActivity.CheckOutActivitySubcomponent create(
        CheckOutActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new CheckOutActivitySubcomponentImpl(arg0);
    }
  }

  private final class CheckOutActivitySubcomponentImpl
      implements ActivityBuilder_CheckOutActivity.CheckOutActivitySubcomponent {
    private CheckOutActivitySubcomponentImpl(CheckOutActivity arg0) {}

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newInstance(
          DaggerAppComponent.this.getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    @Override
    public void inject(CheckOutActivity arg0) {
      injectCheckOutActivity(arg0);
    }

    private CheckOutActivity injectCheckOutActivity(CheckOutActivity instance) {
      BaseActivity_MembersInjector.injectFragmentAndroidInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      CheckOutActivity_MembersInjector.injectFactory(
          instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
      CheckOutActivity_MembersInjector.injectLocationService(
          instance, DaggerAppComponent.this.provideLocationServiceProvider.get());
      return instance;
    }
  }

  private final class CustomerOutstandingActivitySubcomponentFactory
      implements ActivityBuilder_CustomerOutstandingActivity.CustomerOutstandingActivitySubcomponent
          .Factory {
    @Override
    public ActivityBuilder_CustomerOutstandingActivity.CustomerOutstandingActivitySubcomponent
        create(CustomerOutstandingActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new CustomerOutstandingActivitySubcomponentImpl(arg0);
    }
  }

  private final class CustomerOutstandingActivitySubcomponentImpl
      implements ActivityBuilder_CustomerOutstandingActivity
          .CustomerOutstandingActivitySubcomponent {
    private CustomerOutstandingActivitySubcomponentImpl(CustomerOutstandingActivity arg0) {}

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newInstance(
          DaggerAppComponent.this.getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    @Override
    public void inject(CustomerOutstandingActivity arg0) {
      injectCustomerOutstandingActivity(arg0);
    }

    private CustomerOutstandingActivity injectCustomerOutstandingActivity(
        CustomerOutstandingActivity instance) {
      BaseActivity_MembersInjector.injectFragmentAndroidInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      CustomerOutstandingActivity_MembersInjector.injectFactory(
          instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
      CustomerOutstandingActivity_MembersInjector.injectMAdapter(
          instance, DaggerAppComponent.this.provideOutstandingAdapterProvider.get());
      return instance;
    }
  }

  private final class ExpenseReportActivitySubcomponentFactory
      implements ActivityBuilder_ExpenseReportActivity.ExpenseReportActivitySubcomponent.Factory {
    @Override
    public ActivityBuilder_ExpenseReportActivity.ExpenseReportActivitySubcomponent create(
        ExpenseReportActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new ExpenseReportActivitySubcomponentImpl(arg0);
    }
  }

  private final class ExpenseReportActivitySubcomponentImpl
      implements ActivityBuilder_ExpenseReportActivity.ExpenseReportActivitySubcomponent {
    private ExpenseReportActivitySubcomponentImpl(ExpenseReportActivity arg0) {}

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newInstance(
          DaggerAppComponent.this.getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    @Override
    public void inject(ExpenseReportActivity arg0) {
      injectExpenseReportActivity(arg0);
    }

    private ExpenseReportActivity injectExpenseReportActivity(ExpenseReportActivity instance) {
      BaseActivity_MembersInjector.injectFragmentAndroidInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      ExpenseReportActivity_MembersInjector.injectFactory(
          instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
      return instance;
    }
  }

  private final class SalesAnalysisActivitySubcomponentFactory
      implements ActivityBuilder_SalesAnalysisActivity.SalesAnalysisActivitySubcomponent.Factory {
    @Override
    public ActivityBuilder_SalesAnalysisActivity.SalesAnalysisActivitySubcomponent create(
        SalesAnalysisActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new SalesAnalysisActivitySubcomponentImpl(arg0);
    }
  }

  private final class SalesAnalysisActivitySubcomponentImpl
      implements ActivityBuilder_SalesAnalysisActivity.SalesAnalysisActivitySubcomponent {
    private SalesAnalysisActivitySubcomponentImpl(SalesAnalysisActivity arg0) {}

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newInstance(
          DaggerAppComponent.this.getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    @Override
    public void inject(SalesAnalysisActivity arg0) {
      injectSalesAnalysisActivity(arg0);
    }

    private SalesAnalysisActivity injectSalesAnalysisActivity(SalesAnalysisActivity instance) {
      BaseActivity_MembersInjector.injectFragmentAndroidInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      SalesAnalysisActivity_MembersInjector.injectFactory(
          instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
      return instance;
    }
  }

  private final class InventoryReportActivitySubcomponentFactory
      implements ActivityBuilder_InventoryReportActivity.InventoryReportActivitySubcomponent
          .Factory {
    @Override
    public ActivityBuilder_InventoryReportActivity.InventoryReportActivitySubcomponent create(
        InventoryReportActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new InventoryReportActivitySubcomponentImpl(arg0);
    }
  }

  private final class InventoryReportActivitySubcomponentImpl
      implements ActivityBuilder_InventoryReportActivity.InventoryReportActivitySubcomponent {
    private InventoryReportActivitySubcomponentImpl(InventoryReportActivity arg0) {}

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newInstance(
          DaggerAppComponent.this.getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    @Override
    public void inject(InventoryReportActivity arg0) {
      injectInventoryReportActivity(arg0);
    }

    private InventoryReportActivity injectInventoryReportActivity(
        InventoryReportActivity instance) {
      BaseActivity_MembersInjector.injectFragmentAndroidInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      InventoryReportActivity_MembersInjector.injectFactory(
          instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
      return instance;
    }
  }

  private final class ComplaintsReportActivitySubcomponentFactory
      implements ActivityBuilder_ComplaintsReportActivity.ComplaintsReportActivitySubcomponent
          .Factory {
    @Override
    public ActivityBuilder_ComplaintsReportActivity.ComplaintsReportActivitySubcomponent create(
        ComplaintsReportActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new ComplaintsReportActivitySubcomponentImpl(arg0);
    }
  }

  private final class ComplaintsReportActivitySubcomponentImpl
      implements ActivityBuilder_ComplaintsReportActivity.ComplaintsReportActivitySubcomponent {
    private ComplaintsReportActivitySubcomponentImpl(ComplaintsReportActivity arg0) {}

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newInstance(
          DaggerAppComponent.this.getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    @Override
    public void inject(ComplaintsReportActivity arg0) {
      injectComplaintsReportActivity(arg0);
    }

    private ComplaintsReportActivity injectComplaintsReportActivity(
        ComplaintsReportActivity instance) {
      BaseActivity_MembersInjector.injectFragmentAndroidInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      ComplaintsReportActivity_MembersInjector.injectFactory(
          instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
      return instance;
    }
  }

  private final class AddCustomerActivitySubcomponentFactory
      implements ActivityBuilder_AddCustomerActivity.AddCustomerActivitySubcomponent.Factory {
    @Override
    public ActivityBuilder_AddCustomerActivity.AddCustomerActivitySubcomponent create(
        AddCustomerActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new AddCustomerActivitySubcomponentImpl(arg0);
    }
  }

  private final class AddCustomerActivitySubcomponentImpl
      implements ActivityBuilder_AddCustomerActivity.AddCustomerActivitySubcomponent {
    private AddCustomerActivitySubcomponentImpl(AddCustomerActivity arg0) {}

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newInstance(
          DaggerAppComponent.this.getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    @Override
    public void inject(AddCustomerActivity arg0) {
      injectAddCustomerActivity(arg0);
    }

    private AddCustomerActivity injectAddCustomerActivity(AddCustomerActivity instance) {
      BaseActivity_MembersInjector.injectFragmentAndroidInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      AddCustomerActivity_MembersInjector.injectFactory(
          instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
      AddCustomerActivity_MembersInjector.injectLocationService(
          instance, DaggerAppComponent.this.provideLocationServiceProvider.get());
      return instance;
    }
  }

  private final class CheckInActivitySubcomponentFactory
      implements ActivityBuilder_CheckInActivity.CheckInActivitySubcomponent.Factory {
    @Override
    public ActivityBuilder_CheckInActivity.CheckInActivitySubcomponent create(
        CheckInActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new CheckInActivitySubcomponentImpl(arg0);
    }
  }

  private final class CheckInActivitySubcomponentImpl
      implements ActivityBuilder_CheckInActivity.CheckInActivitySubcomponent {
    private CheckInActivitySubcomponentImpl(CheckInActivity arg0) {}

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newInstance(
          DaggerAppComponent.this.getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    @Override
    public void inject(CheckInActivity arg0) {
      injectCheckInActivity(arg0);
    }

    private CheckInActivity injectCheckInActivity(CheckInActivity instance) {
      BaseActivity_MembersInjector.injectFragmentAndroidInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      CheckInActivity_MembersInjector.injectFactory(
          instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
      return instance;
    }
  }

  private final class NotificationActivitySubcomponentFactory
      implements ActivityBuilder_NotificationActivity.NotificationActivitySubcomponent.Factory {
    @Override
    public ActivityBuilder_NotificationActivity.NotificationActivitySubcomponent create(
        NotificationActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new NotificationActivitySubcomponentImpl(arg0);
    }
  }

  private final class NotificationActivitySubcomponentImpl
      implements ActivityBuilder_NotificationActivity.NotificationActivitySubcomponent {
    private NotificationActivitySubcomponentImpl(NotificationActivity arg0) {}

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newInstance(
          DaggerAppComponent.this.getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    @Override
    public void inject(NotificationActivity arg0) {
      injectNotificationActivity(arg0);
    }

    private NotificationActivity injectNotificationActivity(NotificationActivity instance) {
      BaseActivity_MembersInjector.injectFragmentAndroidInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      NotificationActivity_MembersInjector.injectFactory(
          instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
      return instance;
    }
  }

  private final class InvoiceListActivitySubcomponentFactory
      implements ActivityBuilder_InvoiceListActivity.InvoiceListActivitySubcomponent.Factory {
    @Override
    public ActivityBuilder_InvoiceListActivity.InvoiceListActivitySubcomponent create(
        InvoiceListActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new InvoiceListActivitySubcomponentImpl(arg0);
    }
  }

  private final class InvoiceListActivitySubcomponentImpl
      implements ActivityBuilder_InvoiceListActivity.InvoiceListActivitySubcomponent {
    private InvoiceListActivitySubcomponentImpl(InvoiceListActivity arg0) {}

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newInstance(
          DaggerAppComponent.this.getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    @Override
    public void inject(InvoiceListActivity arg0) {
      injectInvoiceListActivity(arg0);
    }

    private InvoiceListActivity injectInvoiceListActivity(InvoiceListActivity instance) {
      BaseActivity_MembersInjector.injectFragmentAndroidInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      InvoiceListActivity_MembersInjector.injectFactory(
          instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
      InvoiceListActivity_MembersInjector.injectMAdapter(
          instance, DaggerAppComponent.this.provideInvoiceListAdapterrProvider.get());
      return instance;
    }
  }

  private final class ActivityReportActivitySubcomponentFactory
      implements ActivityBuilder_ActivityReportActivity.ActivityReportActivitySubcomponent.Factory {
    @Override
    public ActivityBuilder_ActivityReportActivity.ActivityReportActivitySubcomponent create(
        ActivityReportActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new ActivityReportActivitySubcomponentImpl(arg0);
    }
  }

  private final class ActivityReportActivitySubcomponentImpl
      implements ActivityBuilder_ActivityReportActivity.ActivityReportActivitySubcomponent {
    private ActivityReportActivitySubcomponentImpl(ActivityReportActivity arg0) {}

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newInstance(
          DaggerAppComponent.this.getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    @Override
    public void inject(ActivityReportActivity arg0) {
      injectActivityReportActivity(arg0);
    }

    private ActivityReportActivity injectActivityReportActivity(ActivityReportActivity instance) {
      BaseActivity_MembersInjector.injectFragmentAndroidInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      ActivityReportActivity_MembersInjector.injectFactory(
          instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
      return instance;
    }
  }

  private final class ProductsActivitySubcomponentFactory
      implements ActivityBuilder_ProductsActivity.ProductsActivitySubcomponent.Factory {
    @Override
    public ActivityBuilder_ProductsActivity.ProductsActivitySubcomponent create(
        ProductsActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new ProductsActivitySubcomponentImpl(arg0);
    }
  }

  private final class ProductsActivitySubcomponentImpl
      implements ActivityBuilder_ProductsActivity.ProductsActivitySubcomponent {
    private ProductsActivitySubcomponentImpl(ProductsActivity arg0) {}

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newInstance(
          DaggerAppComponent.this.getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    @Override
    public void inject(ProductsActivity arg0) {
      injectProductsActivity(arg0);
    }

    private ProductsActivity injectProductsActivity(ProductsActivity instance) {
      BaseActivity_MembersInjector.injectFragmentAndroidInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      ProductsActivity_MembersInjector.injectFactory(
          instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
      ProductsActivity_MembersInjector.injectMAdapter(
          instance, DaggerAppComponent.this.provideProductAdapterProvider.get());
      return instance;
    }
  }

  private final class ProductsListActivitySubcomponentFactory
      implements ActivityBuilder_ProductsListActivity.ProductsListActivitySubcomponent.Factory {
    @Override
    public ActivityBuilder_ProductsListActivity.ProductsListActivitySubcomponent create(
        ProductsListActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new ProductsListActivitySubcomponentImpl(arg0);
    }
  }

  private final class ProductsListActivitySubcomponentImpl
      implements ActivityBuilder_ProductsListActivity.ProductsListActivitySubcomponent {
    private ProductsListActivitySubcomponentImpl(ProductsListActivity arg0) {}

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newInstance(
          DaggerAppComponent.this.getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    @Override
    public void inject(ProductsListActivity arg0) {
      injectProductsListActivity(arg0);
    }

    private ProductsListActivity injectProductsListActivity(ProductsListActivity instance) {
      BaseActivity_MembersInjector.injectFragmentAndroidInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      ProductsListActivity_MembersInjector.injectFactory(
          instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
      ProductsListActivity_MembersInjector.injectMAdapter(
          instance, DaggerAppComponent.this.provideProductsListAdapterProvider.get());
      return instance;
    }
  }

  private final class OrderItemListActivitySubcomponentFactory
      implements ActivityBuilder_OrderItemListActivity.OrderItemListActivitySubcomponent.Factory {
    @Override
    public ActivityBuilder_OrderItemListActivity.OrderItemListActivitySubcomponent create(
        OrderItemListActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new OrderItemListActivitySubcomponentImpl(arg0);
    }
  }

  private final class OrderItemListActivitySubcomponentImpl
      implements ActivityBuilder_OrderItemListActivity.OrderItemListActivitySubcomponent {
    private OrderItemListActivitySubcomponentImpl(OrderItemListActivity arg0) {}

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newInstance(
          DaggerAppComponent.this.getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    @Override
    public void inject(OrderItemListActivity arg0) {
      injectOrderItemListActivity(arg0);
    }

    private OrderItemListActivity injectOrderItemListActivity(OrderItemListActivity instance) {
      BaseActivity_MembersInjector.injectFragmentAndroidInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      OrderItemListActivity_MembersInjector.injectFactory(
          instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
      OrderItemListActivity_MembersInjector.injectMAdapter(
          instance, DaggerAppComponent.this.provideOrderItemListAdapterProvider.get());
      return instance;
    }
  }
}
